
Vremenska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a04  0800e998  0800e998  0001e998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801039c  0801039c  000302e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801039c  0801039c  0002039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103a4  080103a4  000302e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103a4  080103a4  000203a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103a8  080103a8  000203a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  080103ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e0  2**0
                  CONTENTS
 10 .bss          0000219c  200002e0  200002e0  000302e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000247c  2000247c  000302e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be6e  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041e9  00000000  00000000  0004c17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00050368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001730  00000000  00000000  00051c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002695c  00000000  00000000  000533a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe03  00000000  00000000  00079cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5424  00000000  00000000  00099aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ef23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f5c  00000000  00000000  0016ef74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e97c 	.word	0x0800e97c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0800e97c 	.word	0x0800e97c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <delay+0x30>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 800100a:	bf00      	nop
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <delay+0x30>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3f9      	bcc.n	800100c <delay+0x14>
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200003f0 	.word	0x200003f0

0800102c <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f001 fac2 	bl	80025e4 <HAL_GPIO_Init>
}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 faa4 	bl	80025e4 <HAL_GPIO_Init>
}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <DHT11_Start>:

#define SSD1306_COLOR_WHITE 1
#define SSD1306_COLOR_BLACK 0

void DHT11_Start (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);
 80010a8:	2110      	movs	r1, #16
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <DHT11_Start+0x3c>)
 80010ac:	f7ff ffbe 	bl	800102c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2110      	movs	r1, #16
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <DHT11_Start+0x3c>)
 80010b6:	f001 fc49 	bl	800294c <HAL_GPIO_WritePin>
	delay (18000);
 80010ba:	f244 6050 	movw	r0, #18000	; 0x4650
 80010be:	f7ff ff9b 	bl	8000ff8 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <DHT11_Start+0x3c>)
 80010c8:	f001 fc40 	bl	800294c <HAL_GPIO_WritePin>
	delay (20);
 80010cc:	2014      	movs	r0, #20
 80010ce:	f7ff ff93 	bl	8000ff8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 80010d2:	2110      	movs	r1, #16
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DHT11_Start+0x3c>)
 80010d6:	f7ff ffc7 	bl	8001068 <Set_Pin_Input>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40020400 	.word	0x40020400

080010e4 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f7ff ff82 	bl	8000ff8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010f4:	2110      	movs	r1, #16
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <DHT11_Check_Response+0x58>)
 80010f8:	f001 fc10 	bl	800291c <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10e      	bne.n	8001120 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001102:	2050      	movs	r0, #80	; 0x50
 8001104:	f7ff ff78 	bl	8000ff8 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001108:	2110      	movs	r1, #16
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <DHT11_Check_Response+0x58>)
 800110c:	f001 fc06 	bl	800291c <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <DHT11_Check_Response+0x38>
			Response = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	e001      	b.n	8001120 <DHT11_Check_Response+0x3c>
		else
			Response = -1;
 800111c:	23ff      	movs	r3, #255	; 0xff
 800111e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001120:	bf00      	nop
 8001122:	2110      	movs	r1, #16
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <DHT11_Check_Response+0x58>)
 8001126:	f001 fbf9 	bl	800291c <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f8      	bne.n	8001122 <DHT11_Check_Response+0x3e>

	return Response;
 8001130:	79fb      	ldrb	r3, [r7, #7]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020400 	.word	0x40020400

08001140 <DHT11_Read>:


uint8_t DHT11_Read (void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	e028      	b.n	80011a2 <DHT11_Read+0x62>
    {
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 8001150:	bf00      	nop
 8001152:	2110      	movs	r1, #16
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <DHT11_Read+0x74>)
 8001156:	f001 fbe1 	bl	800291c <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f8      	beq.n	8001152 <DHT11_Read+0x12>
        delay(40);
 8001160:	2028      	movs	r0, #40	; 0x28
 8001162:	f7ff ff49 	bl	8000ff8 <delay>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001166:	2110      	movs	r1, #16
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <DHT11_Read+0x74>)
 800116a:	f001 fbd7 	bl	800291c <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <DHT11_Read+0x4c>
        {
            data |= (1 << (7 - i));
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2201      	movs	r2, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	71fb      	strb	r3, [r7, #7]
        }
        while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 800118c:	bf00      	nop
 800118e:	2110      	movs	r1, #16
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <DHT11_Read+0x74>)
 8001192:	f001 fbc3 	bl	800291c <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f8      	bne.n	800118e <DHT11_Read+0x4e>
    for (uint8_t i = 0; i < 8; i++)
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	3301      	adds	r3, #1
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	d9d3      	bls.n	8001150 <DHT11_Read+0x10>
    }
    return data;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020400 	.word	0x40020400

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b092      	sub	sp, #72	; 0x48
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f001 f869 	bl	8002294 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f911 	bl	80013e8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 fa41 	bl	800164c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ca:	f000 f977 	bl	80014bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80011ce:	f000 f9a3 	bl	8001518 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011d2:	f000 f9cf 	bl	8001574 <MX_SPI1_Init>
  MX_TIM6_Init();
 80011d6:	f000 fa03 	bl	80015e0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80011da:	f008 fa2b 	bl	8009634 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 80011de:	4870      	ldr	r0, [pc, #448]	; (80013a0 <main+0x1e8>)
 80011e0:	f004 fcd4 	bl	8005b8c <HAL_TIM_Base_Start>


  while (1)
  {

	  DHT11_Start();
 80011e4:	f7ff ff5e 	bl	80010a4 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 80011e8:	f7ff ff7c 	bl	80010e4 <DHT11_Check_Response>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <main+0x1ec>)
 80011f2:	701a      	strb	r2, [r3, #0]

	 	  if(Presence==1){
 80011f4:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <main+0x1ec>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	f040 80c0 	bne.w	800137e <main+0x1c6>
	 		  Rh_byte1 = DHT11_Read ();
 80011fe:	f7ff ff9f 	bl	8001140 <DHT11_Read>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <main+0x1f0>)
 8001208:	701a      	strb	r2, [r3, #0]
	 		  Rh_byte2 = DHT11_Read ();
 800120a:	f7ff ff99 	bl	8001140 <DHT11_Read>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b66      	ldr	r3, [pc, #408]	; (80013ac <main+0x1f4>)
 8001214:	701a      	strb	r2, [r3, #0]
	 		  Temp_byte1 = DHT11_Read ();
 8001216:	f7ff ff93 	bl	8001140 <DHT11_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <main+0x1f8>)
 8001220:	701a      	strb	r2, [r3, #0]
	 		  Temp_byte2 = DHT11_Read ();
 8001222:	f7ff ff8d 	bl	8001140 <DHT11_Read>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <main+0x1fc>)
 800122c:	701a      	strb	r2, [r3, #0]
	 		  SUM = DHT11_Read();
 800122e:	f7ff ff87 	bl	8001140 <DHT11_Read>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <main+0x200>)
 8001238:	801a      	strh	r2, [r3, #0]

	 		  TEMP = Temp_byte1;
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <main+0x1f8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <main+0x204>)
 8001242:	801a      	strh	r2, [r3, #0]
	 		  RH = Rh_byte1;
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <main+0x1f0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <main+0x208>)
 800124c:	801a      	strh	r2, [r3, #0]


	 		  Temperature = (float)TEMP + ((float)Temp_byte2 / 10.0);
 800124e:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <main+0x204>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125a:	ee17 0a90 	vmov	r0, s15
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <main+0x1fc>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001272:	ee17 0a90 	vmov	r0, s15
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <main+0x20c>)
 8001280:	f7ff fae4 	bl	800084c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7fe fffe 	bl	800028c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fca6 	bl	8000be8 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <main+0x210>)
 80012a0:	6013      	str	r3, [r2, #0]
	 		  Humidity = (float)RH + ((float)Rh_byte2 / 10.0);
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <main+0x208>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ae:	ee17 0a90 	vmov	r0, s15
 80012b2:	f7ff f949 	bl	8000548 <__aeabi_f2d>
 80012b6:	4604      	mov	r4, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <main+0x1f4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f7ff f93d 	bl	8000548 <__aeabi_f2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <main+0x20c>)
 80012d4:	f7ff faba 	bl	800084c <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ffd4 	bl	800028c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fc7c 	bl	8000be8 <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a36      	ldr	r2, [pc, #216]	; (80013cc <main+0x214>)
 80012f4:	6013      	str	r3, [r2, #0]


	 		  ssd1306_Init();
 80012f6:	f000 fb3b 	bl	8001970 <ssd1306_Init>

	 		  char humidity[10];
	 		  sprintf(humidity, "RH:   %.1f", Humidity);
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <main+0x214>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f922 	bl	8000548 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800130c:	4930      	ldr	r1, [pc, #192]	; (80013d0 <main+0x218>)
 800130e:	f009 fd6d 	bl	800adec <siprintf>

	 		  char temp[15];
	 		  sprintf(temp, "Temp: %.1f", Temperature);
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <main+0x210>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f916 	bl	8000548 <__aeabi_f2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <main+0x21c>)
 8001326:	f009 fd61 	bl	800adec <siprintf>

	 		  char naslov[20];
	 		  sprintf(naslov, "Vremenska Postaja");
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	492a      	ldr	r1, [pc, #168]	; (80013d8 <main+0x220>)
 8001330:	4618      	mov	r0, r3
 8001332:	f009 fd5b 	bl	800adec <siprintf>


	 		  ssd1306_SetCursor(0,0);
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f000 fcd1 	bl	8001ce0 <ssd1306_SetCursor>
	 		  ssd1306_WriteString(naslov, Font_7x10, SSD1306_COLOR_WHITE);
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <main+0x224>)
 8001340:	f107 0018 	add.w	r0, r7, #24
 8001344:	2301      	movs	r3, #1
 8001346:	ca06      	ldmia	r2, {r1, r2}
 8001348:	f000 fca4 	bl	8001c94 <ssd1306_WriteString>

	 		  ssd1306_SetCursor(0,18);
 800134c:	2112      	movs	r1, #18
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fcc6 	bl	8001ce0 <ssd1306_SetCursor>
	 		  ssd1306_WriteString(temp, Font_11x18, SSD1306_COLOR_WHITE);
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <main+0x228>)
 8001356:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800135a:	2301      	movs	r3, #1
 800135c:	ca06      	ldmia	r2, {r1, r2}
 800135e:	f000 fc99 	bl	8001c94 <ssd1306_WriteString>


			  ssd1306_SetCursor(0, 45);
 8001362:	212d      	movs	r1, #45	; 0x2d
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fcbb 	bl	8001ce0 <ssd1306_SetCursor>
			  ssd1306_WriteString(humidity, Font_11x18, SSD1306_COLOR_WHITE);
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <main+0x228>)
 800136c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001370:	2301      	movs	r3, #1
 8001372:	ca06      	ldmia	r2, {r1, r2}
 8001374:	f000 fc8e 	bl	8001c94 <ssd1306_WriteString>

		      ssd1306_UpdateScreen();
 8001378:	f000 fb88 	bl	8001a8c <ssd1306_UpdateScreen>
 800137c:	e00a      	b.n	8001394 <main+0x1dc>


	 	  }else{
	 		 char problem[20];
	 		 sprintf(problem, "ERROR");
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4918      	ldr	r1, [pc, #96]	; (80013e4 <main+0x22c>)
 8001382:	4618      	mov	r0, r3
 8001384:	f009 fd32 	bl	800adec <siprintf>
	 		 ssd1306_WriteString(problem, Font_11x18, SSD1306_COLOR_WHITE);
 8001388:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <main+0x228>)
 800138a:	1d38      	adds	r0, r7, #4
 800138c:	2301      	movs	r3, #1
 800138e:	ca06      	ldmia	r2, {r1, r2}
 8001390:	f000 fc80 	bl	8001c94 <ssd1306_WriteString>
	 	  }

	 	  HAL_Delay(20000);
 8001394:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001398:	f000 ffee 	bl	8002378 <HAL_Delay>
	  DHT11_Start();
 800139c:	e722      	b.n	80011e4 <main+0x2c>
 800139e:	bf00      	nop
 80013a0:	200003f0 	.word	0x200003f0
 80013a4:	2000044c 	.word	0x2000044c
 80013a8:	20000438 	.word	0x20000438
 80013ac:	20000439 	.word	0x20000439
 80013b0:	2000043a 	.word	0x2000043a
 80013b4:	2000043b 	.word	0x2000043b
 80013b8:	2000043c 	.word	0x2000043c
 80013bc:	20000440 	.word	0x20000440
 80013c0:	2000043e 	.word	0x2000043e
 80013c4:	40240000 	.word	0x40240000
 80013c8:	20000444 	.word	0x20000444
 80013cc:	20000448 	.word	0x20000448
 80013d0:	0800e998 	.word	0x0800e998
 80013d4:	0800e9a4 	.word	0x0800e9a4
 80013d8:	0800e9b0 	.word	0x0800e9b0
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	0800e9c4 	.word	0x0800e9c4

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2230      	movs	r2, #48	; 0x30
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 fe70 	bl	800a0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <SystemClock_Config+0xcc>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <SystemClock_Config+0xcc>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <SystemClock_Config+0xcc>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <SystemClock_Config+0xd0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <SystemClock_Config+0xd0>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <SystemClock_Config+0xd0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001444:	2301      	movs	r3, #1
 8001446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001452:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001458:	2304      	movs	r3, #4
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800145c:	2360      	movs	r3, #96	; 0x60
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fae9 	bl	8004a44 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001478:	f000 fa08 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fd4a 	bl	8004f34 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014a6:	f000 f9f1 	bl	800188c <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3750      	adds	r7, #80	; 0x50
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000

080014bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C1_Init+0x50>)
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <MX_I2C1_Init+0x54>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_I2C1_Init+0x50>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_I2C1_Init+0x58>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C1_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C1_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_I2C1_Init+0x50>)
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C1_Init+0x50>)
 80014fa:	f001 fa41 	bl	8002980 <HAL_I2C_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001504:	f000 f9c2 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002fc 	.word	0x200002fc
 8001510:	40005400 	.word	0x40005400
 8001514:	000186a0 	.word	0x000186a0

08001518 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_I2S3_Init+0x54>)
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <MX_I2S3_Init+0x58>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2S3_Init+0x54>)
 8001524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001528:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_I2S3_Init+0x54>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2S3_Init+0x54>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_I2S3_Init+0x54>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_I2S3_Init+0x54>)
 8001540:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001544:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_I2S3_Init+0x54>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_I2S3_Init+0x54>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_I2S3_Init+0x54>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_I2S3_Init+0x54>)
 800155a:	f001 fb55 	bl	8002c08 <HAL_I2S_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001564:	f000 f992 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000350 	.word	0x20000350
 8001570:	40003c00 	.word	0x40003c00

08001574 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_SPI1_Init+0x64>)
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_SPI1_Init+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c0:	220a      	movs	r2, #10
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c6:	f004 f801 	bl	80055cc <HAL_SPI_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 f95c 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000398 	.word	0x20000398
 80015dc:	40013000 	.word	0x40013000

080015e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_TIM6_Init+0x64>)
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <MX_TIM6_Init+0x68>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_TIM6_Init+0x64>)
 80015f6:	222f      	movs	r2, #47	; 0x2f
 80015f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_TIM6_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_TIM6_Init+0x64>)
 8001602:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001606:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_TIM6_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_TIM6_Init+0x64>)
 8001610:	f004 fa6c 	bl	8005aec <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800161a:	f000 f937 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_TIM6_Init+0x64>)
 800162c:	f004 fbb6 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001636:	f000 f929 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003f0 	.word	0x200003f0
 8001648:	40001000 	.word	0x40001000

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	4b83      	ldr	r3, [pc, #524]	; (8001874 <MX_GPIO_Init+0x228>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a82      	ldr	r2, [pc, #520]	; (8001874 <MX_GPIO_Init+0x228>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b80      	ldr	r3, [pc, #512]	; (8001874 <MX_GPIO_Init+0x228>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <MX_GPIO_Init+0x228>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a7b      	ldr	r2, [pc, #492]	; (8001874 <MX_GPIO_Init+0x228>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b79      	ldr	r3, [pc, #484]	; (8001874 <MX_GPIO_Init+0x228>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b75      	ldr	r3, [pc, #468]	; (8001874 <MX_GPIO_Init+0x228>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a74      	ldr	r2, [pc, #464]	; (8001874 <MX_GPIO_Init+0x228>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b72      	ldr	r3, [pc, #456]	; (8001874 <MX_GPIO_Init+0x228>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b6e      	ldr	r3, [pc, #440]	; (8001874 <MX_GPIO_Init+0x228>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a6d      	ldr	r2, [pc, #436]	; (8001874 <MX_GPIO_Init+0x228>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <MX_GPIO_Init+0x228>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <MX_GPIO_Init+0x228>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a66      	ldr	r2, [pc, #408]	; (8001874 <MX_GPIO_Init+0x228>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b64      	ldr	r3, [pc, #400]	; (8001874 <MX_GPIO_Init+0x228>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b60      	ldr	r3, [pc, #384]	; (8001874 <MX_GPIO_Init+0x228>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a5f      	ldr	r2, [pc, #380]	; (8001874 <MX_GPIO_Init+0x228>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <MX_GPIO_Init+0x228>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|OLED_CS_Pin|OLED_DC_Pin|OLED_Res_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f643 0108 	movw	r1, #14344	; 0x3808
 8001710:	4859      	ldr	r0, [pc, #356]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001712:	f001 f91b 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2101      	movs	r1, #1
 800171a:	4858      	ldr	r0, [pc, #352]	; (800187c <MX_GPIO_Init+0x230>)
 800171c:	f001 f916 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001720:	2200      	movs	r2, #0
 8001722:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001726:	4856      	ldr	r0, [pc, #344]	; (8001880 <MX_GPIO_Init+0x234>)
 8001728:	f001 f910 	bl	800294c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2110      	movs	r1, #16
 8001730:	4854      	ldr	r0, [pc, #336]	; (8001884 <MX_GPIO_Init+0x238>)
 8001732:	f001 f90b 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001736:	2308      	movs	r3, #8
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	484a      	ldr	r0, [pc, #296]	; (8001878 <MX_GPIO_Init+0x22c>)
 800174e:	f000 ff49 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001752:	2301      	movs	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4844      	ldr	r0, [pc, #272]	; (800187c <MX_GPIO_Init+0x230>)
 800176a:	f000 ff3b 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800176e:	2308      	movs	r3, #8
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177e:	2305      	movs	r3, #5
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	483c      	ldr	r0, [pc, #240]	; (800187c <MX_GPIO_Init+0x230>)
 800178a:	f000 ff2b 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800178e:	2301      	movs	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001792:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4839      	ldr	r0, [pc, #228]	; (8001888 <MX_GPIO_Init+0x23c>)
 80017a4:	f000 ff1e 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017a8:	2304      	movs	r3, #4
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4832      	ldr	r0, [pc, #200]	; (8001884 <MX_GPIO_Init+0x238>)
 80017bc:	f000 ff12 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin OLED_Res_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_Res_Pin;
 80017c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4827      	ldr	r0, [pc, #156]	; (8001878 <MX_GPIO_Init+0x22c>)
 80017da:	f000 ff03 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f0:	2305      	movs	r3, #5
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4822      	ldr	r0, [pc, #136]	; (8001884 <MX_GPIO_Init+0x238>)
 80017fc:	f000 fef2 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001800:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001804:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4819      	ldr	r0, [pc, #100]	; (8001880 <MX_GPIO_Init+0x234>)
 800181a:	f000 fee3 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800181e:	2320      	movs	r3, #32
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_GPIO_Init+0x234>)
 8001832:	f000 fed7 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001836:	2310      	movs	r3, #16
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_GPIO_Init+0x238>)
 800184e:	f000 fec9 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001852:	2302      	movs	r3, #2
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001856:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800185a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_GPIO_Init+0x22c>)
 8001868:	f000 febc 	bl	80025e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40021000 	.word	0x40021000
 800187c:	40020800 	.word	0x40020800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40020400 	.word	0x40020400
 8001888:	40020000 	.word	0x40020000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <ssd1306_Reset+0x38>)
 80018a4:	f001 f852 	bl	800294c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <ssd1306_Reset+0x38>)
 80018b0:	f001 f84c 	bl	800294c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f000 fd5f 	bl	8002378 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <ssd1306_Reset+0x38>)
 80018c2:	f001 f843 	bl	800294c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018c6:	200a      	movs	r0, #10
 80018c8:	f000 fd56 	bl	8002378 <HAL_Delay>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <ssd1306_WriteCommand+0x44>)
 80018e6:	f001 f831 	bl	800294c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <ssd1306_WriteCommand+0x44>)
 80018f2:	f001 f82b 	bl	800294c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80018f6:	1df9      	adds	r1, r7, #7
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	2201      	movs	r2, #1
 80018fe:	4807      	ldr	r0, [pc, #28]	; (800191c <ssd1306_WriteCommand+0x48>)
 8001900:	f003 feed 	bl	80056de <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <ssd1306_WriteCommand+0x44>)
 800190c:	f001 f81e 	bl	800294c <HAL_GPIO_WritePin>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	20000398 	.word	0x20000398

08001920 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <ssd1306_WriteData+0x48>)
 8001932:	f001 f80b 	bl	800294c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <ssd1306_WriteData+0x48>)
 800193e:	f001 f805 	bl	800294c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b29a      	uxth	r2, r3
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <ssd1306_WriteData+0x4c>)
 800194e:	f003 fec6 	bl	80056de <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <ssd1306_WriteData+0x48>)
 800195a:	f000 fff7 	bl	800294c <HAL_GPIO_WritePin>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	20000398 	.word	0x20000398

08001970 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001974:	f7ff ff90 	bl	8001898 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	f000 fcfd 	bl	8002378 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f9da 	bl	8001d38 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001984:	2020      	movs	r0, #32
 8001986:	f7ff ffa5 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff ffa2 	bl	80018d4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001990:	20b0      	movs	r0, #176	; 0xb0
 8001992:	f7ff ff9f 	bl	80018d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001996:	20c8      	movs	r0, #200	; 0xc8
 8001998:	f7ff ff9c 	bl	80018d4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff ff99 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019a2:	2010      	movs	r0, #16
 80019a4:	f7ff ff96 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80019a8:	2040      	movs	r0, #64	; 0x40
 80019aa:	f7ff ff93 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80019ae:	20ff      	movs	r0, #255	; 0xff
 80019b0:	f000 f9ae 	bl	8001d10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019b4:	20a1      	movs	r0, #161	; 0xa1
 80019b6:	f7ff ff8d 	bl	80018d4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019ba:	20a6      	movs	r0, #166	; 0xa6
 80019bc:	f7ff ff8a 	bl	80018d4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019c0:	20a8      	movs	r0, #168	; 0xa8
 80019c2:	f7ff ff87 	bl	80018d4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80019c6:	203f      	movs	r0, #63	; 0x3f
 80019c8:	f7ff ff84 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019cc:	20a4      	movs	r0, #164	; 0xa4
 80019ce:	f7ff ff81 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019d2:	20d3      	movs	r0, #211	; 0xd3
 80019d4:	f7ff ff7e 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff ff7b 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019de:	20d5      	movs	r0, #213	; 0xd5
 80019e0:	f7ff ff78 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019e4:	20f0      	movs	r0, #240	; 0xf0
 80019e6:	f7ff ff75 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019ea:	20d9      	movs	r0, #217	; 0xd9
 80019ec:	f7ff ff72 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019f0:	2022      	movs	r0, #34	; 0x22
 80019f2:	f7ff ff6f 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019f6:	20da      	movs	r0, #218	; 0xda
 80019f8:	f7ff ff6c 	bl	80018d4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019fc:	2012      	movs	r0, #18
 80019fe:	f7ff ff69 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a02:	20db      	movs	r0, #219	; 0xdb
 8001a04:	f7ff ff66 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a08:	2020      	movs	r0, #32
 8001a0a:	f7ff ff63 	bl	80018d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a0e:	208d      	movs	r0, #141	; 0x8d
 8001a10:	f7ff ff60 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a14:	2014      	movs	r0, #20
 8001a16:	f7ff ff5d 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f000 f98c 	bl	8001d38 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f80f 	bl	8001a44 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a26:	f000 f831 	bl	8001a8c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <ssd1306_Init+0xd0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <ssd1306_Init+0xd0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a36:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <ssd1306_Init+0xd0>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	711a      	strb	r2, [r3, #4]
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000850 	.word	0x20000850

08001a44 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e00d      	b.n	8001a70 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <ssd1306_Fill+0x1a>
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	e000      	b.n	8001a60 <ssd1306_Fill+0x1c>
 8001a5e:	21ff      	movs	r1, #255	; 0xff
 8001a60:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <ssd1306_Fill+0x44>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	460a      	mov	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d3ed      	bcc.n	8001a54 <ssd1306_Fill+0x10>
    }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000450 	.word	0x20000450

08001a8c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	e016      	b.n	8001ac6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	3b50      	subs	r3, #80	; 0x50
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff18 	bl	80018d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff ff15 	bl	80018d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001aaa:	2010      	movs	r0, #16
 8001aac:	f7ff ff12 	bl	80018d4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <ssd1306_UpdateScreen+0x4c>)
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff30 	bl	8001920 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b07      	cmp	r3, #7
 8001aca:	d9e5      	bls.n	8001a98 <ssd1306_UpdateScreen+0xc>
    }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000450 	.word	0x20000450

08001adc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	71bb      	strb	r3, [r7, #6]
 8001aea:	4613      	mov	r3, r2
 8001aec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db3d      	blt.n	8001b72 <ssd1306_DrawPixel+0x96>
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	2b3f      	cmp	r3, #63	; 0x3f
 8001afa:	d83a      	bhi.n	8001b72 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001afc:	797b      	ldrb	r3, [r7, #5]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11a      	bne.n	8001b38 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b02:	79fa      	ldrb	r2, [r7, #7]
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	01db      	lsls	r3, r3, #7
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <ssd1306_DrawPixel+0xa4>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b259      	sxtb	r1, r3
 8001b28:	79fa      	ldrb	r2, [r7, #7]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	01db      	lsls	r3, r3, #7
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <ssd1306_DrawPixel+0xa4>)
 8001b34:	54d1      	strb	r1, [r2, r3]
 8001b36:	e01d      	b.n	8001b74 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	b2d8      	uxtb	r0, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	4413      	add	r3, r2
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <ssd1306_DrawPixel+0xa4>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	79bb      	ldrb	r3, [r7, #6]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	4013      	ands	r3, r2
 8001b60:	b259      	sxtb	r1, r3
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	4603      	mov	r3, r0
 8001b66:	01db      	lsls	r3, r3, #7
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2c9      	uxtb	r1, r1
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <ssd1306_DrawPixel+0xa4>)
 8001b6e:	54d1      	strb	r1, [r2, r3]
 8001b70:	e000      	b.n	8001b74 <ssd1306_DrawPixel+0x98>
        return;
 8001b72:	bf00      	nop
    }
}
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000450 	.word	0x20000450

08001b84 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	1d38      	adds	r0, r7, #4
 8001b8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b1f      	cmp	r3, #31
 8001ba0:	d902      	bls.n	8001ba8 <ssd1306_WriteChar+0x24>
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b7e      	cmp	r3, #126	; 0x7e
 8001ba6:	d901      	bls.n	8001bac <ssd1306_WriteChar+0x28>
        return 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e06d      	b.n	8001c88 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bac:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	793b      	ldrb	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2b80      	cmp	r3, #128	; 0x80
 8001bb8:	dc06      	bgt.n	8001bc8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001bbc:	885b      	ldrh	r3, [r3, #2]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bc4:	2b40      	cmp	r3, #64	; 0x40
 8001bc6:	dd01      	ble.n	8001bcc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e05d      	b.n	8001c88 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	e04c      	b.n	8001c6c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	3b20      	subs	r3, #32
 8001bd8:	7979      	ldrb	r1, [r7, #5]
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	440b      	add	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e034      	b.n	8001c5c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d012      	beq.n	8001c28 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2d8      	uxtb	r0, r3
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001c12:	885b      	ldrh	r3, [r3, #2]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	7bba      	ldrb	r2, [r7, #14]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7ff ff5b 	bl	8001adc <ssd1306_DrawPixel>
 8001c26:	e016      	b.n	8001c56 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b2d8      	uxtb	r0, r3
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001c38:	885b      	ldrh	r3, [r3, #2]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	b2d9      	uxtb	r1, r3
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	f7ff ff43 	bl	8001adc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	793b      	ldrb	r3, [r7, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d3c5      	bcc.n	8001bf2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	797b      	ldrb	r3, [r7, #5]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d3ad      	bcc.n	8001bd2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	793b      	ldrb	r3, [r7, #4]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <ssd1306_WriteChar+0x10c>)
 8001c84:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3724      	adds	r7, #36	; 0x24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	20000850 	.word	0x20000850

08001c94 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	1d38      	adds	r0, r7, #4
 8001c9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ca2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001ca4:	e012      	b.n	8001ccc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	7818      	ldrb	r0, [r3, #0]
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	1d3a      	adds	r2, r7, #4
 8001cae:	ca06      	ldmia	r2, {r1, r2}
 8001cb0:	f7ff ff68 	bl	8001b84 <ssd1306_WriteChar>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d002      	beq.n	8001cc6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	e008      	b.n	8001cd8 <ssd1306_WriteString+0x44>
        }
        str++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e8      	bne.n	8001ca6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <ssd1306_SetCursor+0x2c>)
 8001cf6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <ssd1306_SetCursor+0x2c>)
 8001cfe:	805a      	strh	r2, [r3, #2]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	20000850 	.word	0x20000850

08001d10 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d1a:	2381      	movs	r3, #129	; 0x81
 8001d1c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fdd7 	bl	80018d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fdd3 	bl	80018d4 <ssd1306_WriteCommand>
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d48:	23af      	movs	r3, #175	; 0xaf
 8001d4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <ssd1306_SetDisplayOn+0x38>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	715a      	strb	r2, [r3, #5]
 8001d52:	e004      	b.n	8001d5e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d54:	23ae      	movs	r3, #174	; 0xae
 8001d56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <ssd1306_SetDisplayOn+0x38>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdb7 	bl	80018d4 <ssd1306_WriteCommand>
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000850 	.word	0x20000850

08001d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001db2:	2007      	movs	r0, #7
 8001db4:	f000 fbd4 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_I2C_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12c      	bne.n	8001e40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_I2C_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_I2C_MspInit+0x88>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_I2C_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480c      	ldr	r0, [pc, #48]	; (8001e50 <HAL_I2C_MspInit+0x8c>)
 8001e20:	f000 fbe0 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_I2C_MspInit+0x88>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_I2C_MspInit+0x88>)
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_I2C_MspInit+0x88>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020400 	.word	0x40020400

08001e54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <HAL_I2S_MspInit+0xf0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d15a      	bne.n	8001f3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001e88:	2332      	movs	r3, #50	; 0x32
 8001e8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fa59 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ea0:	f7ff fcf4 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_I2S_MspInit+0xf4>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ef8:	2310      	movs	r3, #16
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f08:	2306      	movs	r3, #6
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	480e      	ldr	r0, [pc, #56]	; (8001f4c <HAL_I2S_MspInit+0xf8>)
 8001f14:	f000 fb66 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001f18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <HAL_I2S_MspInit+0xfc>)
 8001f36:	f000 fb55 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3738      	adds	r7, #56	; 0x38
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40003c00 	.word	0x40003c00
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020800 	.word	0x40020800

08001f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_SPI_MspInit+0x84>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12b      	bne.n	8001fce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fae:	23e0      	movs	r3, #224	; 0xe0
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001fca:	f000 fb0b 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40013000 	.word	0x40013000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_TIM_Base_MspInit+0x3c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10d      	bne.n	8002012 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_TIM_Base_MspInit+0x40>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_TIM_Base_MspInit+0x40>)
 8002000:	f043 0310 	orr.w	r3, r3, #16
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_TIM_Base_MspInit+0x40>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40001000 	.word	0x40001000
 8002024:	40023800 	.word	0x40023800

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800202c:	e7fe      	b.n	800202c <NMI_Handler+0x4>

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <MemManage_Handler+0x4>

0800203a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <UsageFault_Handler+0x4>

08002046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f000 f960 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <OTG_FS_IRQHandler+0x10>)
 8002082:	f001 fbb1 	bl	80037e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20001d40 	.word	0x20001d40

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f007 ffc5 	bl	800a038 <__errno>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe7 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d2:	e7fe      	b.n	80020d2 <_exit+0x12>

080020d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e00a      	b.n	80020fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e6:	f3af 8000 	nop.w
 80020ea:	4601      	mov	r1, r0
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	b2ca      	uxtb	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	dbf0      	blt.n	80020e6 <_read+0x12>
  }

  return len;
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e009      	b.n	8002134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf1      	blt.n	8002120 <_write+0x12>
  }
  return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_close>:

int _close(int file)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216e:	605a      	str	r2, [r3, #4]
  return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_isatty>:

int _isatty(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f007 ff2a 	bl	800a038 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20020000 	.word	0x20020000
 8002210:	00000400 	.word	0x00000400
 8002214:	20000858 	.word	0x20000858
 8002218:	20002480 	.word	0x20002480

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002246:	490e      	ldr	r1, [pc, #56]	; (8002280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800225c:	4c0b      	ldr	r4, [pc, #44]	; (800228c <LoopFillZerobss+0x26>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800226a:	f7ff ffd7 	bl	800221c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226e:	f007 fee9 	bl	800a044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002272:	f7fe ffa1 	bl	80011b8 <main>
  bx  lr    
 8002276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002284:	080103ac 	.word	0x080103ac
  ldr r2, =_sbss
 8002288:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800228c:	2000247c 	.word	0x2000247c

08002290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_Init+0x40>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_Init+0x40>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x40>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f94f 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fd54 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f967 	bl	80025ca <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 f92f 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000010 	.word	0x20000010
 8002330:	20000018 	.word	0x20000018
 8002334:	20000014 	.word	0x20000014

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000018 	.word	0x20000018
 800235c:	2000085c 	.word	0x2000085c

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2000085c 	.word	0x2000085c

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff ffee 	bl	8002360 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800239e:	bf00      	nop
 80023a0:	f7ff ffde 	bl	8002360 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000018 	.word	0x20000018

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff3e 	bl	8002408 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff8e 	bl	80024b4 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff31 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e16b      	b.n	80028d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 815a 	bne.w	80028d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80b4 	beq.w	80028d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b60      	ldr	r3, [pc, #384]	; (80028f0 <HAL_GPIO_Init+0x30c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a5f      	ldr	r2, [pc, #380]	; (80028f0 <HAL_GPIO_Init+0x30c>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <HAL_GPIO_Init+0x30c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a5b      	ldr	r2, [pc, #364]	; (80028f4 <HAL_GPIO_Init+0x310>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_GPIO_Init+0x314>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02b      	beq.n	800280a <HAL_GPIO_Init+0x226>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a51      	ldr	r2, [pc, #324]	; (80028fc <HAL_GPIO_Init+0x318>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d025      	beq.n	8002806 <HAL_GPIO_Init+0x222>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a50      	ldr	r2, [pc, #320]	; (8002900 <HAL_GPIO_Init+0x31c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01f      	beq.n	8002802 <HAL_GPIO_Init+0x21e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4f      	ldr	r2, [pc, #316]	; (8002904 <HAL_GPIO_Init+0x320>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_Init+0x21a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4e      	ldr	r2, [pc, #312]	; (8002908 <HAL_GPIO_Init+0x324>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x216>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4d      	ldr	r2, [pc, #308]	; (800290c <HAL_GPIO_Init+0x328>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x212>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4c      	ldr	r2, [pc, #304]	; (8002910 <HAL_GPIO_Init+0x32c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x20e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4b      	ldr	r2, [pc, #300]	; (8002914 <HAL_GPIO_Init+0x330>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x20a>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e00e      	b.n	800280c <HAL_GPIO_Init+0x228>
 80027ee:	2308      	movs	r3, #8
 80027f0:	e00c      	b.n	800280c <HAL_GPIO_Init+0x228>
 80027f2:	2306      	movs	r3, #6
 80027f4:	e00a      	b.n	800280c <HAL_GPIO_Init+0x228>
 80027f6:	2305      	movs	r3, #5
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x228>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x228>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x228>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x228>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x228>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	; (80028f4 <HAL_GPIO_Init+0x310>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_GPIO_Init+0x334>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a32      	ldr	r2, [pc, #200]	; (8002918 <HAL_GPIO_Init+0x334>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b30      	ldr	r3, [pc, #192]	; (8002918 <HAL_GPIO_Init+0x334>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_GPIO_Init+0x334>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_GPIO_Init+0x334>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_GPIO_Init+0x334>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_GPIO_Init+0x334>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <HAL_GPIO_Init+0x334>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f ae90 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40021400 	.word	0x40021400
 8002910:	40021800 	.word	0x40021800
 8002914:	40021c00 	.word	0x40021c00
 8002918:	40013c00 	.word	0x40013c00

0800291c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e001      	b.n	800293e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e12b      	b.n	8002bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fa0c 	bl	8001dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e4:	f002 fc9e 	bl	8005324 <HAL_RCC_GetPCLK1Freq>
 80029e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a81      	ldr	r2, [pc, #516]	; (8002bf4 <HAL_I2C_Init+0x274>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d807      	bhi.n	8002a04 <HAL_I2C_Init+0x84>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a80      	ldr	r2, [pc, #512]	; (8002bf8 <HAL_I2C_Init+0x278>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e006      	b.n	8002a12 <HAL_I2C_Init+0x92>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a7d      	ldr	r2, [pc, #500]	; (8002bfc <HAL_I2C_Init+0x27c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0e7      	b.n	8002bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a78      	ldr	r2, [pc, #480]	; (8002c00 <HAL_I2C_Init+0x280>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0c9b      	lsrs	r3, r3, #18
 8002a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a6a      	ldr	r2, [pc, #424]	; (8002bf4 <HAL_I2C_Init+0x274>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d802      	bhi.n	8002a54 <HAL_I2C_Init+0xd4>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	e009      	b.n	8002a68 <HAL_I2C_Init+0xe8>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	4a69      	ldr	r2, [pc, #420]	; (8002c04 <HAL_I2C_Init+0x284>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	3301      	adds	r3, #1
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	495c      	ldr	r1, [pc, #368]	; (8002bf4 <HAL_I2C_Init+0x274>)
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d819      	bhi.n	8002abc <HAL_I2C_Init+0x13c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e59      	subs	r1, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_I2C_Init+0x138>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e59      	subs	r1, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	e051      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	e04f      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d111      	bne.n	8002ae8 <HAL_I2C_Init+0x168>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e012      	b.n	8002b0e <HAL_I2C_Init+0x18e>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	0099      	lsls	r1, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Init+0x196>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e022      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10e      	bne.n	8002b3c <HAL_I2C_Init+0x1bc>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1e58      	subs	r0, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	440b      	add	r3, r1
 8002b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	0099      	lsls	r1, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	6809      	ldr	r1, [r1, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6911      	ldr	r1, [r2, #16]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	000186a0 	.word	0x000186a0
 8002bf8:	001e847f 	.word	0x001e847f
 8002bfc:	003d08ff 	.word	0x003d08ff
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	10624dd3 	.word	0x10624dd3

08002c08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e128      	b.n	8002e6c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a90      	ldr	r2, [pc, #576]	; (8002e74 <HAL_I2S_Init+0x26c>)
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff f90d 	bl	8001e54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c50:	f023 030f 	bic.w	r3, r3, #15
 8002c54:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d060      	beq.n	8002d28 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c6e:	2310      	movs	r3, #16
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e001      	b.n	8002c78 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d802      	bhi.n	8002c86 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002c86:	2001      	movs	r0, #1
 8002c88:	f002 fc42 	bl	8005510 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c8c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c96:	d125      	bne.n	8002ce4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	3305      	adds	r3, #5
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	e01f      	b.n	8002d02 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	3305      	adds	r3, #5
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e00e      	b.n	8002d02 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	3305      	adds	r3, #5
 8002d00:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4a5c      	ldr	r2, [pc, #368]	; (8002e78 <HAL_I2S_Init+0x270>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	08db      	lsrs	r3, r3, #3
 8002d0c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	e003      	b.n	8002d30 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d902      	bls.n	8002d3c <HAL_I2S_Init+0x134>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d907      	bls.n	8002d4c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e08f      	b.n	8002e6c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d6a:	f023 030f 	bic.w	r3, r3, #15
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6851      	ldr	r1, [r2, #4]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6892      	ldr	r2, [r2, #8]
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68d2      	ldr	r2, [r2, #12]
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6992      	ldr	r2, [r2, #24]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d161      	bne.n	8002e5c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a38      	ldr	r2, [pc, #224]	; (8002e7c <HAL_I2S_Init+0x274>)
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a37      	ldr	r2, [pc, #220]	; (8002e80 <HAL_I2S_Init+0x278>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_I2S_Init+0x1a4>
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_I2S_Init+0x27c>)
 8002daa:	e001      	b.n	8002db0 <HAL_I2S_Init+0x1a8>
 8002dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	4932      	ldr	r1, [pc, #200]	; (8002e80 <HAL_I2S_Init+0x278>)
 8002db8:	428a      	cmp	r2, r1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2S_Init+0x1b8>
 8002dbc:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <HAL_I2S_Init+0x27c>)
 8002dbe:	e001      	b.n	8002dc4 <HAL_I2S_Init+0x1bc>
 8002dc0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002dc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002dc8:	f023 030f 	bic.w	r3, r3, #15
 8002dcc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2b      	ldr	r2, [pc, #172]	; (8002e80 <HAL_I2S_Init+0x278>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2S_Init+0x1d4>
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_I2S_Init+0x27c>)
 8002dda:	e001      	b.n	8002de0 <HAL_I2S_Init+0x1d8>
 8002ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de0:	2202      	movs	r2, #2
 8002de2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <HAL_I2S_Init+0x278>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_I2S_Init+0x1ea>
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_I2S_Init+0x27c>)
 8002df0:	e001      	b.n	8002df6 <HAL_I2S_Init+0x1ee>
 8002df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e02:	d003      	beq.n	8002e0c <HAL_I2S_Init+0x204>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e001      	b.n	8002e18 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002e22:	4313      	orrs	r3, r2
 8002e24:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e44:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_I2S_Init+0x278>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2S_Init+0x24c>
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_I2S_Init+0x27c>)
 8002e52:	e001      	b.n	8002e58 <HAL_I2S_Init+0x250>
 8002e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e58:	897a      	ldrh	r2, [r7, #10]
 8002e5a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	08002f7f 	.word	0x08002f7f
 8002e78:	cccccccd 	.word	0xcccccccd
 8002e7c:	08003095 	.word	0x08003095
 8002e80:	40003800 	.word	0x40003800
 8002e84:	40003400 	.word	0x40003400

08002e88 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	881a      	ldrh	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	1c9a      	adds	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10e      	bne.n	8002f18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffb8 	bl	8002e88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	b292      	uxth	r2, r2
 8002f34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	1c9a      	adds	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10e      	bne.n	8002f76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff93 	bl	8002e9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d13a      	bne.n	8003010 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d109      	bne.n	8002fb8 <I2S_IRQHandler+0x3a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d102      	bne.n	8002fb8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffb4 	bl	8002f20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d126      	bne.n	8003010 <I2S_IRQHandler+0x92>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d11f      	bne.n	8003010 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ff50 	bl	8002eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d136      	bne.n	800308a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d109      	bne.n	800303a <I2S_IRQHandler+0xbc>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d102      	bne.n	800303a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff45 	bl	8002ec4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d122      	bne.n	800308a <I2S_IRQHandler+0x10c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d11b      	bne.n	800308a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003060:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff13 	bl	8002eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a92      	ldr	r2, [pc, #584]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80030ae:	4b92      	ldr	r3, [pc, #584]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030b0:	e001      	b.n	80030b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80030b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a8b      	ldr	r2, [pc, #556]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80030cc:	4b8a      	ldr	r3, [pc, #552]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030ce:	e001      	b.n	80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80030d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d004      	beq.n	80030ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8099 	bne.w	800321e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d107      	bne.n	8003106 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f925 	bl	8003350 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9c8 	bl	80034b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d13a      	bne.n	80031a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d035      	beq.n	80031a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6e      	ldr	r2, [pc, #440]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800313e:	4b6e      	ldr	r3, [pc, #440]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003140:	e001      	b.n	8003146 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4969      	ldr	r1, [pc, #420]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800314e:	428b      	cmp	r3, r1
 8003150:	d101      	bne.n	8003156 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003152:	4b69      	ldr	r3, [pc, #420]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003154:	e001      	b.n	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800315e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800316e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f043 0202 	orr.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe88 	bl	8002eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	f040 80c3 	bne.w	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80bd 	beq.w	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a49      	ldr	r2, [pc, #292]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031d4:	e001      	b.n	80031da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80031d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4944      	ldr	r1, [pc, #272]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031e2:	428b      	cmp	r3, r1
 80031e4:	d101      	bne.n	80031ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031e8:	e001      	b.n	80031ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80031ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f043 0204 	orr.w	r2, r3, #4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fe4a 	bl	8002eb0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800321c:	e089      	b.n	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d107      	bne.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8be 	bl	80033b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8fd 	bl	800344c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d12f      	bne.n	80032bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02a      	beq.n	80032bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003274:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003282:	e001      	b.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4919      	ldr	r1, [pc, #100]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003290:	428b      	cmp	r3, r1
 8003292:	d101      	bne.n	8003298 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003296:	e001      	b.n	800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800329c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fdfa 	bl	8002eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d136      	bne.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d031      	beq.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032dc:	e001      	b.n	80032e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80032de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4902      	ldr	r1, [pc, #8]	; (80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032ea:	428b      	cmp	r3, r1
 80032ec:	d106      	bne.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80032ee:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032f0:	e006      	b.n	8003300 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80032f2:	bf00      	nop
 80032f4:	40003800 	.word	0x40003800
 80032f8:	40003400 	.word	0x40003400
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003304:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003314:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fdc0 	bl	8002eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	e000      	b.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003332:	bf00      	nop
}
 8003334:	bf00      	nop
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	1c99      	adds	r1, r3, #2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6251      	str	r1, [r2, #36]	; 0x24
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003390:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffc9 	bl	800333c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c99      	adds	r1, r3, #2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6251      	str	r1, [r2, #36]	; 0x24
 80033c6:	8819      	ldrh	r1, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <I2SEx_TxISR_I2SExt+0x90>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <I2SEx_TxISR_I2SExt+0x22>
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <I2SEx_TxISR_I2SExt+0x94>)
 80033d4:	e001      	b.n	80033da <I2SEx_TxISR_I2SExt+0x26>
 80033d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033da:	460a      	mov	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d121      	bne.n	800343a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <I2SEx_TxISR_I2SExt+0x90>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <I2SEx_TxISR_I2SExt+0x50>
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <I2SEx_TxISR_I2SExt+0x94>)
 8003402:	e001      	b.n	8003408 <I2SEx_TxISR_I2SExt+0x54>
 8003404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	490d      	ldr	r1, [pc, #52]	; (8003444 <I2SEx_TxISR_I2SExt+0x90>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d101      	bne.n	8003418 <I2SEx_TxISR_I2SExt+0x64>
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <I2SEx_TxISR_I2SExt+0x94>)
 8003416:	e001      	b.n	800341c <I2SEx_TxISR_I2SExt+0x68>
 8003418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003420:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff81 	bl	800333c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40003800 	.word	0x40003800
 8003448:	40003400 	.word	0x40003400

0800344c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68d8      	ldr	r0, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	1c99      	adds	r1, r3, #2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003464:	b282      	uxth	r2, r0
 8003466:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff4a 	bl	800333c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <I2SEx_RxISR_I2SExt+0x90>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <I2SEx_RxISR_I2SExt+0x16>
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <I2SEx_RxISR_I2SExt+0x94>)
 80034c4:	e001      	b.n	80034ca <I2SEx_RxISR_I2SExt+0x1a>
 80034c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ca:	68d8      	ldr	r0, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	1c99      	adds	r1, r3, #2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80034d6:	b282      	uxth	r2, r0
 80034d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d121      	bne.n	8003536 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <I2SEx_RxISR_I2SExt+0x90>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <I2SEx_RxISR_I2SExt+0x50>
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <I2SEx_RxISR_I2SExt+0x94>)
 80034fe:	e001      	b.n	8003504 <I2SEx_RxISR_I2SExt+0x54>
 8003500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	490d      	ldr	r1, [pc, #52]	; (8003540 <I2SEx_RxISR_I2SExt+0x90>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d101      	bne.n	8003514 <I2SEx_RxISR_I2SExt+0x64>
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <I2SEx_RxISR_I2SExt+0x94>)
 8003512:	e001      	b.n	8003518 <I2SEx_RxISR_I2SExt+0x68>
 8003514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003518:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ff03 	bl	800333c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40003800 	.word	0x40003800
 8003544:	40003400 	.word	0x40003400

08003548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	b08f      	sub	sp, #60	; 0x3c
 800354c:	af0a      	add	r7, sp, #40	; 0x28
 800354e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e10f      	b.n	800377a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f006 fa3d 	bl	80099f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f002 fd90 	bl	80060be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	687e      	ldr	r6, [r7, #4]
 80035a6:	466d      	mov	r5, sp
 80035a8:	f106 0410 	add.w	r4, r6, #16
 80035ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80035bc:	1d33      	adds	r3, r6, #4
 80035be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	f002 fc67 	bl	8005e94 <USB_CoreInit>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d0      	b.n	800377a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 fd7e 	bl	80060e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e04a      	b.n	8003680 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	333d      	adds	r3, #61	; 0x3d
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	333c      	adds	r3, #60	; 0x3c
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	b298      	uxth	r0, r3
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3344      	adds	r3, #68	; 0x44
 8003626:	4602      	mov	r2, r0
 8003628:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3340      	adds	r3, #64	; 0x40
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3348      	adds	r3, #72	; 0x48
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334c      	adds	r3, #76	; 0x4c
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3354      	adds	r3, #84	; 0x54
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	3301      	adds	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d3af      	bcc.n	80035ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e044      	b.n	800371a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	3301      	adds	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d3b5      	bcc.n	8003690 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	687e      	ldr	r6, [r7, #4]
 800372c:	466d      	mov	r5, sp
 800372e:	f106 0410 	add.w	r4, r6, #16
 8003732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800373e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003742:	1d33      	adds	r3, r6, #4
 8003744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003746:	6838      	ldr	r0, [r7, #0]
 8003748:	f002 fd16 	bl	8006178 <USB_DevInit>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00d      	b.n	800377a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fe65 	bl	8007442 <USB_DevDisconnect>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003782 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_PCD_Start+0x1c>
 800379a:	2302      	movs	r3, #2
 800379c:	e020      	b.n	80037e0 <HAL_PCD_Start+0x5e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d109      	bne.n	80037c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d005      	beq.n	80037c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fc68 	bl	800609c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fe15 	bl	8007400 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b08d      	sub	sp, #52	; 0x34
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f003 fed3 	bl	80075aa <USB_GetMode>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 848a 	bne.w	8004120 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fe37 	bl	8007484 <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8480 	beq.w	800411e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fe24 	bl	8007484 <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f002 0202 	and.w	r2, r2, #2
 8003854:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fe12 	bl	8007484 <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d161      	bne.n	800392e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0210 	bic.w	r2, r2, #16
 8003878:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	3304      	adds	r3, #4
 8003898:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	0c5b      	lsrs	r3, r3, #17
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d124      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d035      	beq.n	800391e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	6a38      	ldr	r0, [r7, #32]
 80038c6:	f003 fc49 	bl	800715c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d6:	441a      	add	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e8:	441a      	add	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	e016      	b.n	800391e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	0c5b      	lsrs	r3, r3, #17
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d110      	bne.n	800391e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003902:	2208      	movs	r2, #8
 8003904:	4619      	mov	r1, r3
 8003906:	6a38      	ldr	r0, [r7, #32]
 8003908:	f003 fc28 	bl	800715c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003918:	441a      	add	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0210 	orr.w	r2, r2, #16
 800392c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 fda6 	bl	8007484 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003942:	f040 80a7 	bne.w	8003a94 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f003 fdab 	bl	80074aa <USB_ReadDevAllOutEpInterrupt>
 8003954:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003956:	e099      	b.n	8003a8c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 808e 	beq.w	8003a80 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fdcf 	bl	8007512 <USB_ReadDevOutEPInterrupt>
 8003974:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	461a      	mov	r2, r3
 800398e:	2301      	movs	r3, #1
 8003990:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fec3 	bl	8004720 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	461a      	mov	r2, r3
 80039b2:	2308      	movs	r3, #8
 80039b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 ff99 	bl	80048f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2310      	movs	r3, #16
 80039d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d030      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d109      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a02:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	3304      	adds	r3, #4
 8003a18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	78db      	ldrb	r3, [r3, #3]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d108      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f006 f8f4 	bl	8009c1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	2302      	movs	r3, #2
 8003a44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2320      	movs	r3, #32
 8003a60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	3301      	adds	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f47f af62 	bne.w	8003958 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 fcf3 	bl	8007484 <USB_ReadInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa8:	f040 80db 	bne.w	8003c62 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 fd14 	bl	80074de <USB_ReadDevAllInEpInterrupt>
 8003ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003abc:	e0cd      	b.n	8003c5a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80c2 	beq.w	8003c4e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 fd3a 	bl	800754e <USB_ReadDevInEPInterrupt>
 8003ada:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d057      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	2201      	movs	r2, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69f9      	ldr	r1, [r7, #28]
 8003b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b06:	4013      	ands	r3, r2
 8003b08:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	461a      	mov	r2, r3
 8003b18:	2301      	movs	r3, #1
 8003b1a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d132      	bne.n	8003b8a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	334c      	adds	r3, #76	; 0x4c
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4403      	add	r3, r0
 8003b44:	3348      	adds	r3, #72	; 0x48
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4419      	add	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4403      	add	r3, r0
 8003b58:	334c      	adds	r3, #76	; 0x4c
 8003b5a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d113      	bne.n	8003b8a <HAL_PCD_IRQHandler+0x3a2>
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3354      	adds	r3, #84	; 0x54
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d108      	bne.n	8003b8a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b82:	461a      	mov	r2, r3
 8003b84:	2101      	movs	r1, #1
 8003b86:	f003 fd41 	bl	800760c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f005 ffbe 	bl	8009b12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	461a      	mov	r2, r3
 8003bae:	2308      	movs	r3, #8
 8003bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2310      	movs	r3, #16
 8003bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	2340      	movs	r3, #64	; 0x40
 8003be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d023      	beq.n	8003c3c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bf6:	6a38      	ldr	r0, [r7, #32]
 8003bf8:	f002 fc22 	bl	8006440 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3338      	adds	r3, #56	; 0x38
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d108      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f006 f80b 	bl	8009c40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	461a      	mov	r2, r3
 8003c38:	2302      	movs	r3, #2
 8003c3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fcdb 	bl	8004604 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3301      	adds	r3, #1
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f af2e 	bne.w	8003abe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 fc0c 	bl	8007484 <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c76:	d122      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fec3 	bl	8004a2c <HAL_PCDEx_LPM_Callback>
 8003ca6:	e002      	b.n	8003cae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f005 ffa9 	bl	8009c00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fbde 	bl	8007484 <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd2:	d112      	bne.n	8003cfa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f005 ff65 	bl	8009bb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cf8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 fbc0 	bl	8007484 <USB_ReadInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	f040 80b7 	bne.w	8003e80 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2110      	movs	r1, #16
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fb87 	bl	8006440 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d36:	e046      	b.n	8003dc6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db0:	0151      	lsls	r1, r2, #5
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	440a      	add	r2, r1
 8003db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3b3      	bcc.n	8003d38 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003de2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d016      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f043 030b 	orr.w	r3, r3, #11
 8003e00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e12:	f043 030b 	orr.w	r3, r3, #11
 8003e16:	6453      	str	r3, [r2, #68]	; 0x44
 8003e18:	e015      	b.n	8003e46 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e40:	f043 030b 	orr.w	r3, r3, #11
 8003e44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f003 fbce 	bl	800760c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f003 fafd 	bl	8007484 <USB_ReadInterrupts>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d124      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f003 fb93 	bl	80075c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 fb48 	bl	800653a <USB_GetDevSpeed>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681c      	ldr	r4, [r3, #0]
 8003eb6:	f001 fa29 	bl	800530c <HAL_RCC_GetHCLKFreq>
 8003eba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f002 f847 	bl	8005f58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f005 fe49 	bl	8009b62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 facd 	bl	8007484 <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d10a      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f005 fe26 	bl	8009b46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f002 0208 	and.w	r2, r2, #8
 8003f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 fab8 	bl	8007484 <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b80      	cmp	r3, #128	; 0x80
 8003f1c:	d122      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	e014      	b.n	8003f5a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fb27 	bl	80045a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	3301      	adds	r3, #1
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d3e5      	bcc.n	8003f30 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fa8b 	bl	8007484 <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f78:	d13b      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e02b      	b.n	8003fd8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3340      	adds	r3, #64	; 0x40
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d115      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	da12      	bge.n	8003fd2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	333f      	adds	r3, #63	; 0x3f
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fae8 	bl	80045a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3ce      	bcc.n	8003f80 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 fa44 	bl	8007484 <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004006:	d155      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004008:	2301      	movs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	e045      	b.n	800409a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d12e      	bne.n	8004094 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004036:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004038:	2b00      	cmp	r3, #0
 800403a:	da2b      	bge.n	8004094 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004048:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800404c:	429a      	cmp	r2, r3
 800404e:	d121      	bne.n	8004094 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004090:	6053      	str	r3, [r2, #4]
            break;
 8004092:	e007      	b.n	80040a4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	3301      	adds	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3b4      	bcc.n	800400e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f003 f9e3 	bl	8007484 <USB_ReadInterrupts>
 80040be:	4603      	mov	r3, r0
 80040c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d10a      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f005 fdca 	bl	8009c64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f003 f9cd 	bl	8007484 <USB_ReadInterrupts>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d115      	bne.n	8004120 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f005 fdba 	bl	8009c80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e000      	b.n	8004120 <HAL_PCD_IRQHandler+0x938>
      return;
 800411e:	bf00      	nop
    }
  }
}
 8004120:	3734      	adds	r7, #52	; 0x34
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}

08004126 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_PCD_SetAddress+0x1a>
 800413c:	2302      	movs	r3, #2
 800413e:	e013      	b.n	8004168 <HAL_PCD_SetAddress+0x42>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f003 f92b 	bl	80073b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	70fb      	strb	r3, [r7, #3]
 8004182:	460b      	mov	r3, r1
 8004184:	803b      	strh	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800418e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004192:	2b00      	cmp	r3, #0
 8004194:	da0f      	bge.n	80041b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	3338      	adds	r3, #56	; 0x38
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	705a      	strb	r2, [r3, #1]
 80041b4:	e00f      	b.n	80041d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041e2:	883a      	ldrh	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	78ba      	ldrb	r2, [r7, #2]
 80041ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004200:	78bb      	ldrb	r3, [r7, #2]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d102      	bne.n	800420c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_PCD_EP_Open+0xaa>
 8004216:	2302      	movs	r3, #2
 8004218:	e00e      	b.n	8004238 <HAL_PCD_EP_Open+0xc8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	4618      	mov	r0, r3
 800422a:	f002 f9ab 	bl	8006584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004236:	7afb      	ldrb	r3, [r7, #11]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800424c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004250:	2b00      	cmp	r3, #0
 8004252:	da0f      	bge.n	8004274 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f003 020f 	and.w	r2, r3, #15
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	3338      	adds	r3, #56	; 0x38
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	705a      	strb	r2, [r3, #1]
 8004272:	e00f      	b.n	8004294 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_PCD_EP_Close+0x6e>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e00e      	b.n	80042cc <HAL_PCD_EP_Close+0x8c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 f9e9 	bl	8006694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	460b      	mov	r3, r1
 80042e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	3304      	adds	r3, #4
 80042fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004316:	7afb      	ldrb	r3, [r7, #11]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	b2da      	uxtb	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d102      	bne.n	8004330 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	f002 fcc8 	bl	8006cdc <USB_EP0StartXfer>
 800434c:	e008      	b.n	8004360 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	f002 fa76 	bl	800684c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800438c:	681b      	ldr	r3, [r3, #0]
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	460b      	mov	r3, r1
 80043a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	f003 020f 	and.w	r2, r3, #15
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	3338      	adds	r3, #56	; 0x38
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	3304      	adds	r3, #4
 80043c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2201      	movs	r2, #1
 80043d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043da:	7afb      	ldrb	r3, [r7, #11]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f4:	7afb      	ldrb	r3, [r7, #11]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	f002 fc66 	bl	8006cdc <USB_EP0StartXfer>
 8004410:	e008      	b.n	8004424 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	f002 fa14 	bl	800684c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d901      	bls.n	800444c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e050      	b.n	80044ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800444c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004450:	2b00      	cmp	r3, #0
 8004452:	da0f      	bge.n	8004474 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 020f 	and.w	r2, r3, #15
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	3304      	adds	r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	705a      	strb	r2, [r3, #1]
 8004472:	e00d      	b.n	8004490 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_PCD_EP_SetStall+0x82>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e01e      	b.n	80044ee <HAL_PCD_EP_SetStall+0xc0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fea4 	bl	800720c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	b2d9      	uxtb	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044de:	461a      	mov	r2, r3
 80044e0:	f003 f894 	bl	800760c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d901      	bls.n	8004514 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e042      	b.n	800459a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0f      	bge.n	800453c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3338      	adds	r3, #56	; 0x38
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	e00f      	b.n	800455c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_PCD_EP_ClrStall+0x86>
 8004578:	2302      	movs	r3, #2
 800457a:	e00e      	b.n	800459a <HAL_PCD_EP_ClrStall+0xa4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	4618      	mov	r0, r3
 800458c:	f002 feac 	bl	80072e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da0c      	bge.n	80045d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3338      	adds	r3, #56	; 0x38
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	3304      	adds	r3, #4
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e00c      	b.n	80045ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 fccb 	bl	8006f8c <USB_EPStopXfer>
 80045f6:	4603      	mov	r3, r0
 80045f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045fa:	7afb      	ldrb	r3, [r7, #11]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	429a      	cmp	r2, r3
 8004636:	d901      	bls.n	800463c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e06c      	b.n	8004716 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	429a      	cmp	r2, r3
 8004650:	d902      	bls.n	8004658 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3303      	adds	r3, #3
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004660:	e02b      	b.n	80046ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	429a      	cmp	r2, r3
 8004676:	d902      	bls.n	800467e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3303      	adds	r3, #3
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6919      	ldr	r1, [r3, #16]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004696:	b2db      	uxtb	r3, r3
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4603      	mov	r3, r0
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	f002 fd1f 	bl	80070e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1a      	ldr	r2, [r3, #32]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	441a      	add	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d809      	bhi.n	80046e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046d8:	429a      	cmp	r2, r3
 80046da:	d203      	bcs.n	80046e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1be      	bne.n	8004662 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d811      	bhi.n	8004714 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	43db      	mvns	r3, r3
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004710:	4013      	ands	r3, r2
 8004712:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	3304      	adds	r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d17b      	bne.n	800484e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4a61      	ldr	r2, [pc, #388]	; (80048e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	f240 80b9 	bls.w	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80b3 	beq.w	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	461a      	mov	r2, r3
 8004784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004788:	6093      	str	r3, [r2, #8]
 800478a:	e0a7      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	461a      	mov	r2, r3
 80047a4:	2320      	movs	r3, #32
 80047a6:	6093      	str	r3, [r2, #8]
 80047a8:	e098      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f040 8093 	bne.w	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90f      	bls.n	80047de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047da:	6093      	str	r3, [r2, #8]
 80047dc:	e07e      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	3304      	adds	r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	0159      	lsls	r1, r3, #5
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	440b      	add	r3, r1
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d114      	bne.n	8004840 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004828:	461a      	mov	r2, r3
 800482a:	2101      	movs	r1, #1
 800482c:	f002 feee 	bl	800760c <USB_EP0_OutStart>
 8004830:	e006      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	441a      	add	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f005 f948 	bl	8009adc <HAL_PCD_DataOutStageCallback>
 800484c:	e046      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4a26      	ldr	r2, [pc, #152]	; (80048ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d124      	bne.n	80048a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	461a      	mov	r2, r3
 800486e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004872:	6093      	str	r3, [r2, #8]
 8004874:	e032      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	461a      	mov	r2, r3
 800488e:	2320      	movs	r3, #32
 8004890:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f005 f91f 	bl	8009adc <HAL_PCD_DataOutStageCallback>
 800489e:	e01d      	b.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d114      	bne.n	80048d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048c8:	461a      	mov	r2, r3
 80048ca:	2100      	movs	r1, #0
 80048cc:	f002 fe9e 	bl	800760c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f005 f900 	bl	8009adc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	4f54300a 	.word	0x4f54300a
 80048ec:	4f54310a 	.word	0x4f54310a

080048f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	333c      	adds	r3, #60	; 0x3c
 8004908:	3304      	adds	r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a15      	ldr	r2, [pc, #84]	; (8004978 <PCD_EP_OutSetupPacket_int+0x88>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d90e      	bls.n	8004944 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004942:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f005 f8b7 	bl	8009ab8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <PCD_EP_OutSetupPacket_int+0x88>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d90c      	bls.n	800496c <PCD_EP_OutSetupPacket_int+0x7c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d108      	bne.n	800496c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004964:	461a      	mov	r2, r3
 8004966:	2101      	movs	r1, #1
 8004968:	f002 fe50 	bl	800760c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	4f54300a 	.word	0x4f54300a

0800497c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
 8004988:	4613      	mov	r3, r2
 800498a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800499a:	883b      	ldrh	r3, [r7, #0]
 800499c:	0419      	lsls	r1, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
 80049a8:	e028      	b.n	80049fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4413      	add	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]
 80049bc:	e00d      	b.n	80049da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	3340      	adds	r3, #64	; 0x40
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	3301      	adds	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	3b01      	subs	r3, #1
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d3ec      	bcc.n	80049be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049e4:	883b      	ldrh	r3, [r7, #0]
 80049e6:	0418      	lsls	r0, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	4302      	orrs	r2, r0
 80049f4:	3340      	adds	r3, #64	; 0x40
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e267      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d075      	beq.n	8004b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a62:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d00c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	4b85      	ldr	r3, [pc, #532]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d112      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a86:	d10b      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	4b7e      	ldr	r3, [pc, #504]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05b      	beq.n	8004b4c <HAL_RCC_OscConfig+0x108>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d157      	bne.n	8004b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e242      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d106      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x74>
 8004aaa:	4b76      	ldr	r3, [pc, #472]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a75      	ldr	r2, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e01d      	b.n	8004af4 <HAL_RCC_OscConfig+0xb0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x98>
 8004ac2:	4b70      	ldr	r3, [pc, #448]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6f      	ldr	r2, [pc, #444]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b6d      	ldr	r3, [pc, #436]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6c      	ldr	r2, [pc, #432]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_OscConfig+0xb0>
 8004adc:	4b69      	ldr	r3, [pc, #420]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a68      	ldr	r2, [pc, #416]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b66      	ldr	r3, [pc, #408]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a65      	ldr	r2, [pc, #404]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fd fc30 	bl	8002360 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fd fc2c 	bl	8002360 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e207      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0xc0>
 8004b22:	e014      	b.n	8004b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fd fc1c 	bl	8002360 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fd fc18 	bl	8002360 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e1f3      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0xe8>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d063      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b66:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d11c      	bne.n	8004bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	4b41      	ldr	r3, [pc, #260]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCC_OscConfig+0x152>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1c7      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4937      	ldr	r1, [pc, #220]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	e03a      	b.n	8004c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb4:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <HAL_RCC_OscConfig+0x244>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fd fbd1 	bl	8002360 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fd fbcd 	bl	8002360 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e1a8      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4925      	ldr	r1, [pc, #148]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <HAL_RCC_OscConfig+0x244>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fbb0 	bl	8002360 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c04:	f7fd fbac 	bl	8002360 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e187      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d036      	beq.n	8004c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_RCC_OscConfig+0x248>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fd fb90 	bl	8002360 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fd fb8c 	bl	8002360 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e167      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x200>
 8004c62:	e01b      	b.n	8004c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_OscConfig+0x248>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fd fb79 	bl	8002360 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	e00e      	b.n	8004c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c72:	f7fd fb75 	bl	8002360 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d907      	bls.n	8004c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e150      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
 8004c84:	40023800 	.word	0x40023800
 8004c88:	42470000 	.word	0x42470000
 8004c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b88      	ldr	r3, [pc, #544]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ea      	bne.n	8004c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8097 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b81      	ldr	r3, [pc, #516]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b7d      	ldr	r3, [pc, #500]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a7c      	ldr	r2, [pc, #496]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b7a      	ldr	r3, [pc, #488]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cda:	4b77      	ldr	r3, [pc, #476]	; (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d118      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce6:	4b74      	ldr	r3, [pc, #464]	; (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a73      	ldr	r2, [pc, #460]	; (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fd fb35 	bl	8002360 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fd fb31 	bl	8002360 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e10c      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2ea>
 8004d20:	4b64      	ldr	r3, [pc, #400]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	4a63      	ldr	r2, [pc, #396]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2c:	e01c      	b.n	8004d68 <HAL_RCC_OscConfig+0x324>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x30c>
 8004d36:	4b5f      	ldr	r3, [pc, #380]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a5e      	ldr	r2, [pc, #376]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
 8004d42:	4b5c      	ldr	r3, [pc, #368]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a5b      	ldr	r2, [pc, #364]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0x324>
 8004d50:	4b58      	ldr	r3, [pc, #352]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4a57      	ldr	r2, [pc, #348]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5c:	4b55      	ldr	r3, [pc, #340]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	4a54      	ldr	r2, [pc, #336]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 0304 	bic.w	r3, r3, #4
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fd faf6 	bl	8002360 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fd faf2 	bl	8002360 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e0cb      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8e:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0ee      	beq.n	8004d78 <HAL_RCC_OscConfig+0x334>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd fae0 	bl	8002360 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fd fadc 	bl	8002360 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0b5      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ee      	bne.n	8004da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80a1 	beq.w	8004f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de2:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d05c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d141      	bne.n	8004e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df6:	4b31      	ldr	r3, [pc, #196]	; (8004ebc <HAL_RCC_OscConfig+0x478>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fd fab0 	bl	8002360 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fd faac 	bl	8002360 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e087      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	491b      	ldr	r1, [pc, #108]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <HAL_RCC_OscConfig+0x478>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fd fa85 	bl	8002360 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd fa81 	bl	8002360 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e05c      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x416>
 8004e78:	e054      	b.n	8004f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_RCC_OscConfig+0x478>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fd fa6e 	bl	8002360 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd fa6a 	bl	8002360 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e045      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x444>
 8004ea6:	e03d      	b.n	8004f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e038      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCC_OscConfig+0x4ec>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d121      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d11a      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d111      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023800 	.word	0x40023800

08004f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0cc      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b68      	ldr	r3, [pc, #416]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90c      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f88:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa0:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	494d      	ldr	r1, [pc, #308]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d044      	beq.n	8005054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d119      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e067      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4934      	ldr	r1, [pc, #208]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005024:	f7fd f99c 	bl	8002360 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fd f998 	bl	8002360 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e04f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d20c      	bcs.n	800507c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e032      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4916      	ldr	r1, [pc, #88]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	490e      	ldr	r1, [pc, #56]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050ba:	f000 f821 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050be:	4602      	mov	r2, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	490a      	ldr	r1, [pc, #40]	; (80050f4 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	5ccb      	ldrb	r3, [r1, r3]
 80050ce:	fa22 f303 	lsr.w	r3, r2, r3
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fd f8fc 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023c00 	.word	0x40023c00
 80050f0:	40023800 	.word	0x40023800
 80050f4:	0800fedc 	.word	0x0800fedc
 80050f8:	20000010 	.word	0x20000010
 80050fc:	20000014 	.word	0x20000014

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005104:	b094      	sub	sp, #80	; 0x50
 8005106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
 800510c:	2300      	movs	r3, #0
 800510e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005110:	2300      	movs	r3, #0
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005118:	4b79      	ldr	r3, [pc, #484]	; (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d00d      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x40>
 8005124:	2b08      	cmp	r3, #8
 8005126:	f200 80e1 	bhi.w	80052ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x34>
 800512e:	2b04      	cmp	r3, #4
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x3a>
 8005132:	e0db      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005134:	4b73      	ldr	r3, [pc, #460]	; (8005304 <HAL_RCC_GetSysClockFreq+0x204>)
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005138:	e0db      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800513a:	4b73      	ldr	r3, [pc, #460]	; (8005308 <HAL_RCC_GetSysClockFreq+0x208>)
 800513c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800513e:	e0d8      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005140:	4b6f      	ldr	r3, [pc, #444]	; (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005148:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800514a:	4b6d      	ldr	r3, [pc, #436]	; (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d063      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	099b      	lsrs	r3, r3, #6
 800515c:	2200      	movs	r2, #0
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005168:	633b      	str	r3, [r7, #48]	; 0x30
 800516a:	2300      	movs	r3, #0
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
 800516e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005172:	4622      	mov	r2, r4
 8005174:	462b      	mov	r3, r5
 8005176:	f04f 0000 	mov.w	r0, #0
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	0159      	lsls	r1, r3, #5
 8005180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005184:	0150      	lsls	r0, r2, #5
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4621      	mov	r1, r4
 800518c:	1a51      	subs	r1, r2, r1
 800518e:	6139      	str	r1, [r7, #16]
 8005190:	4629      	mov	r1, r5
 8005192:	eb63 0301 	sbc.w	r3, r3, r1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a4:	4659      	mov	r1, fp
 80051a6:	018b      	lsls	r3, r1, #6
 80051a8:	4651      	mov	r1, sl
 80051aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ae:	4651      	mov	r1, sl
 80051b0:	018a      	lsls	r2, r1, #6
 80051b2:	4651      	mov	r1, sl
 80051b4:	ebb2 0801 	subs.w	r8, r2, r1
 80051b8:	4659      	mov	r1, fp
 80051ba:	eb63 0901 	sbc.w	r9, r3, r1
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d2:	4690      	mov	r8, r2
 80051d4:	4699      	mov	r9, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	eb18 0303 	adds.w	r3, r8, r3
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	462b      	mov	r3, r5
 80051e0:	eb49 0303 	adc.w	r3, r9, r3
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051f2:	4629      	mov	r1, r5
 80051f4:	024b      	lsls	r3, r1, #9
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051fc:	4621      	mov	r1, r4
 80051fe:	024a      	lsls	r2, r1, #9
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
 800520a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800520c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005210:	f7fb fd3a 	bl	8000c88 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800521c:	e058      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521e:	4b38      	ldr	r3, [pc, #224]	; (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	099b      	lsrs	r3, r3, #6
 8005224:	2200      	movs	r2, #0
 8005226:	4618      	mov	r0, r3
 8005228:	4611      	mov	r1, r2
 800522a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	f04f 0000 	mov.w	r0, #0
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	0159      	lsls	r1, r3, #5
 8005246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524a:	0150      	lsls	r0, r2, #5
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4641      	mov	r1, r8
 8005252:	ebb2 0a01 	subs.w	sl, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb63 0b01 	sbc.w	fp, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800526c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005270:	ebb2 040a 	subs.w	r4, r2, sl
 8005274:	eb63 050b 	sbc.w	r5, r3, fp
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	00eb      	lsls	r3, r5, #3
 8005282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005286:	00e2      	lsls	r2, r4, #3
 8005288:	4614      	mov	r4, r2
 800528a:	461d      	mov	r5, r3
 800528c:	4643      	mov	r3, r8
 800528e:	18e3      	adds	r3, r4, r3
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	464b      	mov	r3, r9
 8005294:	eb45 0303 	adc.w	r3, r5, r3
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052a6:	4629      	mov	r1, r5
 80052a8:	028b      	lsls	r3, r1, #10
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b0:	4621      	mov	r1, r4
 80052b2:	028a      	lsls	r2, r1, #10
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ba:	2200      	movs	r2, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	61fa      	str	r2, [r7, #28]
 80052c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c4:	f7fb fce0 	bl	8000c88 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	3301      	adds	r3, #1
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052ea:	e002      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3750      	adds	r7, #80	; 0x50
 80052f8:	46bd      	mov	sp, r7
 80052fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800
 8005304:	00f42400 	.word	0x00f42400
 8005308:	007a1200 	.word	0x007a1200

0800530c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <HAL_RCC_GetHCLKFreq+0x14>)
 8005312:	681b      	ldr	r3, [r3, #0]
}
 8005314:	4618      	mov	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000010 	.word	0x20000010

08005324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005328:	f7ff fff0 	bl	800530c <HAL_RCC_GetHCLKFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0a9b      	lsrs	r3, r3, #10
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	4903      	ldr	r1, [pc, #12]	; (8005348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005340:	4618      	mov	r0, r3
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40023800 	.word	0x40023800
 8005348:	0800feec 	.word	0x0800feec

0800534c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005370:	2b00      	cmp	r3, #0
 8005372:	d035      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005374:	4b62      	ldr	r3, [pc, #392]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537a:	f7fc fff1 	bl	8002360 <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005382:	f7fc ffed 	bl	8002360 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e0b0      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005394:	4b5b      	ldr	r3, [pc, #364]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f0      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	019a      	lsls	r2, r3, #6
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	071b      	lsls	r3, r3, #28
 80053ac:	4955      	ldr	r1, [pc, #340]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053b4:	4b52      	ldr	r3, [pc, #328]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ba:	f7fc ffd1 	bl	8002360 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053c2:	f7fc ffcd 	bl	8002360 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e090      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8083 	beq.w	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	4b44      	ldr	r3, [pc, #272]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	4a43      	ldr	r2, [pc, #268]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fc:	6413      	str	r3, [r2, #64]	; 0x40
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3e      	ldr	r2, [pc, #248]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005414:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005416:	f7fc ffa3 	bl	8002360 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800541e:	f7fc ff9f 	bl	8002360 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e062      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005444:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02f      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d028      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800545a:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005464:	4b29      	ldr	r3, [pc, #164]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800546a:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005470:	4a24      	ldr	r2, [pc, #144]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005476:	4b23      	ldr	r3, [pc, #140]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d114      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005482:	f7fc ff6d 	bl	8002360 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005488:	e00a      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548a:	f7fc ff69 	bl	8002360 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	f241 3288 	movw	r2, #5000	; 0x1388
 8005498:	4293      	cmp	r3, r2
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e02a      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	4b18      	ldr	r3, [pc, #96]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ee      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b8:	d10d      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ce:	490d      	ldr	r1, [pc, #52]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]
 80054d4:	e005      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054e0:	6093      	str	r3, [r2, #8]
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ee:	4905      	ldr	r1, [pc, #20]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	42470068 	.word	0x42470068
 8005504:	40023800 	.word	0x40023800
 8005508:	40007000 	.word	0x40007000
 800550c:	42470e40 	.word	0x42470e40

08005510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d13e      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800552e:	4b23      	ldr	r3, [pc, #140]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d12f      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005546:	617b      	str	r3, [r7, #20]
          break;
 8005548:	e02f      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005556:	d108      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005558:	4b18      	ldr	r3, [pc, #96]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e007      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800556a:	4b14      	ldr	r3, [pc, #80]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800557c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800558e:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005594:	0f1b      	lsrs	r3, r3, #28
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
          break;
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
          break;
 80055a8:	bf00      	nop
        }
      }
      break;
 80055aa:	bf00      	nop
    }
  }
  return frequency;
 80055ac:	697b      	ldr	r3, [r7, #20]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	00bb8000 	.word	0x00bb8000
 80055c4:	007a1200 	.word	0x007a1200
 80055c8:	00f42400 	.word	0x00f42400

080055cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e07b      	b.n	80056d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ee:	d009      	beq.n	8005604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	61da      	str	r2, [r3, #28]
 80055f6:	e005      	b.n	8005604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc fc98 	bl	8001f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	ea42 0103 	orr.w	r1, r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	f003 0104 	and.w	r1, r3, #4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	f003 0210 	and.w	r2, r3, #16
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b088      	sub	sp, #32
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_SPI_Transmit+0x22>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e126      	b.n	800594e <HAL_SPI_Transmit+0x270>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005708:	f7fc fe2a 	bl	8002360 <HAL_GetTick>
 800570c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d002      	beq.n	8005724 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800571e:	2302      	movs	r3, #2
 8005720:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005722:	e10b      	b.n	800593c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_SPI_Transmit+0x52>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005734:	e102      	b.n	800593c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2203      	movs	r2, #3
 800573a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800577c:	d10f      	bne.n	800579e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800579c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d007      	beq.n	80057bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c4:	d14b      	bne.n	800585e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Transmit+0xf6>
 80057ce:	8afb      	ldrh	r3, [r7, #22]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d13e      	bne.n	8005852 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	881a      	ldrh	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	1c9a      	adds	r2, r3, #2
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057f8:	e02b      	b.n	8005852 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d112      	bne.n	800582e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	1c9a      	adds	r2, r3, #2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	86da      	strh	r2, [r3, #54]	; 0x36
 800582c:	e011      	b.n	8005852 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582e:	f7fc fd97 	bl	8002360 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d803      	bhi.n	8005846 <HAL_SPI_Transmit+0x168>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d102      	bne.n	800584c <HAL_SPI_Transmit+0x16e>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005850:	e074      	b.n	800593c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ce      	bne.n	80057fa <HAL_SPI_Transmit+0x11c>
 800585c:	e04c      	b.n	80058f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_SPI_Transmit+0x18e>
 8005866:	8afb      	ldrh	r3, [r7, #22]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d140      	bne.n	80058ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005892:	e02c      	b.n	80058ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d113      	bne.n	80058ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80058c8:	e011      	b.n	80058ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ca:	f7fc fd49 	bl	8002360 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d803      	bhi.n	80058e2 <HAL_SPI_Transmit+0x204>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d102      	bne.n	80058e8 <HAL_SPI_Transmit+0x20a>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058ec:	e026      	b.n	800593c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1cd      	bne.n	8005894 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f8b3 	bl	8005a68 <SPI_EndRxTxTransaction>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	77fb      	strb	r3, [r7, #31]
 8005938:	e000      	b.n	800593c <HAL_SPI_Transmit+0x25e>
  }

error:
 800593a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800594c:	7ffb      	ldrb	r3, [r7, #31]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005968:	f7fc fcfa 	bl	8002360 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	4413      	add	r3, r2
 8005976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005978:	f7fc fcf2 	bl	8002360 <HAL_GetTick>
 800597c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800597e:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	015b      	lsls	r3, r3, #5
 8005984:	0d1b      	lsrs	r3, r3, #20
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800598e:	e054      	b.n	8005a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d050      	beq.n	8005a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005998:	f7fc fce2 	bl	8002360 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d902      	bls.n	80059ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d13d      	bne.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c6:	d111      	bne.n	80059ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d0:	d004      	beq.n	80059dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059da:	d107      	bne.n	80059ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f4:	d10f      	bne.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e017      	b.n	8005a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	bf0c      	ite	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	2300      	movne	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d19b      	bne.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000010 	.word	0x20000010

08005a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <SPI_EndRxTxTransaction+0x7c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <SPI_EndRxTxTransaction+0x80>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	0d5b      	lsrs	r3, r3, #21
 8005a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d112      	bne.n	8005aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ff5a 	bl	8005958 <SPI_WaitFlagStateUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e00f      	b.n	8005ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d0f2      	beq.n	8005aba <SPI_EndRxTxTransaction+0x52>
 8005ad4:	e000      	b.n	8005ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ad6:	bf00      	nop
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000010 	.word	0x20000010
 8005ae8:	165e9f81 	.word	0x165e9f81

08005aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e041      	b.n	8005b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fa66 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f000 f896 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d001      	beq.n	8005ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e046      	b.n	8005c32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <HAL_TIM_Base_Start+0xb4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d022      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d01d      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <HAL_TIM_Base_Start+0xb8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <HAL_TIM_Base_Start+0xbc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <HAL_TIM_Base_Start+0xc0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <HAL_TIM_Base_Start+0xc4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_TIM_Base_Start+0xc8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIM_Base_Start+0x70>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <HAL_TIM_Base_Start+0xcc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d010      	beq.n	8005c30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	e007      	b.n	8005c30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40010400 	.word	0x40010400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40001800 	.word	0x40001800

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d00f      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3c      	ldr	r2, [pc, #240]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3b      	ldr	r2, [pc, #236]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3a      	ldr	r2, [pc, #232]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d027      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d023      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d017      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <TIM_Base_SetConfig+0x128>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <TIM_Base_SetConfig+0x12c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <TIM_Base_SetConfig+0x130>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <TIM_Base_SetConfig+0x134>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <TIM_Base_SetConfig+0x138>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_Base_SetConfig+0x13c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d108      	bne.n	8005d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	615a      	str	r2, [r3, #20]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40001800 	.word	0x40001800
 8005d94:	40001c00 	.word	0x40001c00
 8005d98:	40002000 	.word	0x40002000

08005d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e05a      	b.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d022      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e00:	d01d      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d018      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00e      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d10c      	bne.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40001800 	.word	0x40001800

08005e94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e94:	b084      	sub	sp, #16
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	f107 001c 	add.w	r0, r7, #28
 8005ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d122      	bne.n	8005ef2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d105      	bne.n	8005ee6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 fbee 	bl	80076c8 <USB_CoreReset>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e01a      	b.n	8005f28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 fbe2 	bl	80076c8 <USB_CoreReset>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
 8005f1a:	e005      	b.n	8005f28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10b      	bne.n	8005f46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f043 0206 	orr.w	r2, r3, #6
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f52:	b004      	add	sp, #16
 8005f54:	4770      	bx	lr
	...

08005f58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d165      	bne.n	8006038 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a41      	ldr	r2, [pc, #260]	; (8006074 <USB_SetTurnaroundTime+0x11c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d906      	bls.n	8005f82 <USB_SetTurnaroundTime+0x2a>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a40      	ldr	r2, [pc, #256]	; (8006078 <USB_SetTurnaroundTime+0x120>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d202      	bcs.n	8005f82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e062      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4a3c      	ldr	r2, [pc, #240]	; (8006078 <USB_SetTurnaroundTime+0x120>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d306      	bcc.n	8005f98 <USB_SetTurnaroundTime+0x40>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a3b      	ldr	r2, [pc, #236]	; (800607c <USB_SetTurnaroundTime+0x124>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d202      	bcs.n	8005f98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f92:	230e      	movs	r3, #14
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	e057      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a38      	ldr	r2, [pc, #224]	; (800607c <USB_SetTurnaroundTime+0x124>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d306      	bcc.n	8005fae <USB_SetTurnaroundTime+0x56>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4a37      	ldr	r2, [pc, #220]	; (8006080 <USB_SetTurnaroundTime+0x128>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d202      	bcs.n	8005fae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fa8:	230d      	movs	r3, #13
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e04c      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a33      	ldr	r2, [pc, #204]	; (8006080 <USB_SetTurnaroundTime+0x128>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d306      	bcc.n	8005fc4 <USB_SetTurnaroundTime+0x6c>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4a32      	ldr	r2, [pc, #200]	; (8006084 <USB_SetTurnaroundTime+0x12c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d802      	bhi.n	8005fc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e041      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a2f      	ldr	r2, [pc, #188]	; (8006084 <USB_SetTurnaroundTime+0x12c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d906      	bls.n	8005fda <USB_SetTurnaroundTime+0x82>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4a2e      	ldr	r2, [pc, #184]	; (8006088 <USB_SetTurnaroundTime+0x130>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d802      	bhi.n	8005fda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fd4:	230b      	movs	r3, #11
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e036      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <USB_SetTurnaroundTime+0x130>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d906      	bls.n	8005ff0 <USB_SetTurnaroundTime+0x98>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4a29      	ldr	r2, [pc, #164]	; (800608c <USB_SetTurnaroundTime+0x134>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d802      	bhi.n	8005ff0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fea:	230a      	movs	r3, #10
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e02b      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a26      	ldr	r2, [pc, #152]	; (800608c <USB_SetTurnaroundTime+0x134>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d906      	bls.n	8006006 <USB_SetTurnaroundTime+0xae>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4a25      	ldr	r2, [pc, #148]	; (8006090 <USB_SetTurnaroundTime+0x138>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d202      	bcs.n	8006006 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006000:	2309      	movs	r3, #9
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e020      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a21      	ldr	r2, [pc, #132]	; (8006090 <USB_SetTurnaroundTime+0x138>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d306      	bcc.n	800601c <USB_SetTurnaroundTime+0xc4>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4a20      	ldr	r2, [pc, #128]	; (8006094 <USB_SetTurnaroundTime+0x13c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d802      	bhi.n	800601c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006016:	2308      	movs	r3, #8
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e015      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <USB_SetTurnaroundTime+0x13c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d906      	bls.n	8006032 <USB_SetTurnaroundTime+0xda>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4a1c      	ldr	r2, [pc, #112]	; (8006098 <USB_SetTurnaroundTime+0x140>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d202      	bcs.n	8006032 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800602c:	2307      	movs	r3, #7
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e00a      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006032:	2306      	movs	r3, #6
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	e007      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800603e:	2309      	movs	r3, #9
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e001      	b.n	8006048 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006044:	2309      	movs	r3, #9
 8006046:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	00d8acbf 	.word	0x00d8acbf
 8006078:	00e4e1c0 	.word	0x00e4e1c0
 800607c:	00f42400 	.word	0x00f42400
 8006080:	01067380 	.word	0x01067380
 8006084:	011a499f 	.word	0x011a499f
 8006088:	01312cff 	.word	0x01312cff
 800608c:	014ca43f 	.word	0x014ca43f
 8006090:	016e3600 	.word	0x016e3600
 8006094:	01a6ab1f 	.word	0x01a6ab1f
 8006098:	01e84800 	.word	0x01e84800

0800609c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d115      	bne.n	800612e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800610e:	2001      	movs	r0, #1
 8006110:	f7fc f932 	bl	8002378 <HAL_Delay>
      ms++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3301      	adds	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fa45 	bl	80075aa <USB_GetMode>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d01e      	beq.n	8006164 <USB_SetCurrentMode+0x84>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b31      	cmp	r3, #49	; 0x31
 800612a:	d9f0      	bls.n	800610e <USB_SetCurrentMode+0x2e>
 800612c:	e01a      	b.n	8006164 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d115      	bne.n	8006160 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006140:	2001      	movs	r0, #1
 8006142:	f7fc f919 	bl	8002378 <HAL_Delay>
      ms++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fa2c 	bl	80075aa <USB_GetMode>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <USB_SetCurrentMode+0x84>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b31      	cmp	r3, #49	; 0x31
 800615c:	d9f0      	bls.n	8006140 <USB_SetCurrentMode+0x60>
 800615e:	e001      	b.n	8006164 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e005      	b.n	8006170 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b32      	cmp	r3, #50	; 0x32
 8006168:	d101      	bne.n	800616e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006178:	b084      	sub	sp, #16
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006192:	2300      	movs	r3, #0
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e009      	b.n	80061ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3340      	adds	r3, #64	; 0x40
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	2200      	movs	r2, #0
 80061a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b0e      	cmp	r3, #14
 80061b0:	d9f2      	bls.n	8006198 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11c      	bne.n	80061f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c6:	f043 0302 	orr.w	r3, r3, #2
 80061ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
 80061f0:	e00b      	b.n	800620a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621c:	4619      	mov	r1, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	461a      	mov	r2, r3
 8006226:	680b      	ldr	r3, [r1, #0]
 8006228:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10c      	bne.n	800624a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006236:	2100      	movs	r1, #0
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f965 	bl	8006508 <USB_SetDevSpeed>
 800623e:	e008      	b.n	8006252 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006240:	2101      	movs	r1, #1
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f960 	bl	8006508 <USB_SetDevSpeed>
 8006248:	e003      	b.n	8006252 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800624a:	2103      	movs	r1, #3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f95b 	bl	8006508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006252:	2110      	movs	r1, #16
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8f3 	bl	8006440 <USB_FlushTxFifo>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f91f 	bl	80064a8 <USB_FlushRxFifo>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e043      	b.n	8006326 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b4:	d118      	bne.n	80062e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e013      	b.n	80062fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	461a      	mov	r2, r3
 80062e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e008      	b.n	80062fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	461a      	mov	r2, r3
 800631a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800631e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3301      	adds	r3, #1
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3b7      	bcc.n	800629e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e043      	b.n	80063bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800634a:	d118      	bne.n	800637e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e013      	b.n	8006390 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e008      	b.n	8006390 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d3b7      	bcc.n	8006334 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <USB_DevInit+0x2c4>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d107      	bne.n	800642c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006424:	f043 0304 	orr.w	r3, r3, #4
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006438:	b004      	add	sp, #16
 800643a:	4770      	bx	lr
 800643c:	803c3800 	.word	0x803c3800

08006440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <USB_FlushTxFifo+0x64>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e01b      	b.n	8006498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	daf2      	bge.n	800644e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	019b      	lsls	r3, r3, #6
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <USB_FlushTxFifo+0x64>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e006      	b.n	8006498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b20      	cmp	r3, #32
 8006494:	d0f0      	beq.n	8006478 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <USB_FlushRxFifo+0x5c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e018      	b.n	80064f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	daf2      	bge.n	80064b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2210      	movs	r2, #16
 80064d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <USB_FlushRxFifo+0x5c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e006      	b.n	80064f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d0f0      	beq.n	80064d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	00030d40 	.word	0x00030d40

08006508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800653a:	b480      	push	{r7}
 800653c:	b087      	sub	sp, #28
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0306 	and.w	r3, r3, #6
 8006552:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
 800655e:	e00a      	b.n	8006576 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d002      	beq.n	800656c <USB_GetDevSpeed+0x32>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b06      	cmp	r3, #6
 800656a:	d102      	bne.n	8006572 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800656c:	2302      	movs	r3, #2
 800656e:	75fb      	strb	r3, [r7, #23]
 8006570:	e001      	b.n	8006576 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006572:	230f      	movs	r3, #15
 8006574:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d13a      	bne.n	8006616 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	2101      	movs	r1, #1
 80065b2:	fa01 f303 	lsl.w	r3, r1, r3
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065be:	4313      	orrs	r3, r2
 80065c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d155      	bne.n	8006684 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	059b      	lsls	r3, r3, #22
 80065fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065fc:	4313      	orrs	r3, r2
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e036      	b.n	8006684 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	2101      	movs	r1, #1
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006634:	4313      	orrs	r3, r2
 8006636:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d11a      	bne.n	8006684 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800666a:	430b      	orrs	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d161      	bne.n	8006774 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c6:	d11f      	bne.n	8006708 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	2101      	movs	r1, #1
 800671a:	fa01 f303 	lsl.w	r3, r1, r3
 800671e:	b29b      	uxth	r3, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006728:	4013      	ands	r3, r2
 800672a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	2101      	movs	r1, #1
 800673e:	fa01 f303 	lsl.w	r3, r1, r3
 8006742:	b29b      	uxth	r3, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800674c:	4013      	ands	r3, r2
 800674e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	0159      	lsls	r1, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	440b      	add	r3, r1
 8006766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676a:	4619      	mov	r1, r3
 800676c:	4b35      	ldr	r3, [pc, #212]	; (8006844 <USB_DeactivateEndpoint+0x1b0>)
 800676e:	4013      	ands	r3, r2
 8006770:	600b      	str	r3, [r1, #0]
 8006772:	e060      	b.n	8006836 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678a:	d11f      	bne.n	80067cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	2101      	movs	r1, #1
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	43db      	mvns	r3, r3
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ec:	4013      	ands	r3, r2
 80067ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f303 	lsl.w	r3, r1, r3
 8006806:	041b      	lsls	r3, r3, #16
 8006808:	43db      	mvns	r3, r3
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006810:	4013      	ands	r3, r2
 8006812:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	0159      	lsls	r1, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	440b      	add	r3, r1
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	4619      	mov	r1, r3
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <USB_DeactivateEndpoint+0x1b4>)
 8006832:	4013      	ands	r3, r2
 8006834:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	ec337800 	.word	0xec337800
 8006848:	eff37800 	.word	0xeff37800

0800684c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b01      	cmp	r3, #1
 800686a:	f040 815c 	bne.w	8006b26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d132      	bne.n	80068dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d4:	0cdb      	lsrs	r3, r3, #19
 80068d6:	04db      	lsls	r3, r3, #19
 80068d8:	6113      	str	r3, [r2, #16]
 80068da:	e074      	b.n	80069c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f6:	0cdb      	lsrs	r3, r3, #19
 80068f8:	04db      	lsls	r3, r3, #19
 80068fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800691a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800691e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6999      	ldr	r1, [r3, #24]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	440b      	add	r3, r1
 8006938:	1e59      	subs	r1, r3, #1
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006942:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006944:	4b9d      	ldr	r3, [pc, #628]	; (8006bbc <USB_EPStartXfer+0x370>)
 8006946:	400b      	ands	r3, r1
 8006948:	69b9      	ldr	r1, [r7, #24]
 800694a:	0148      	lsls	r0, r1, #5
 800694c:	69f9      	ldr	r1, [r7, #28]
 800694e:	4401      	add	r1, r0
 8006950:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006954:	4313      	orrs	r3, r2
 8006956:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	0148      	lsls	r0, r1, #5
 8006972:	69f9      	ldr	r1, [r7, #28]
 8006974:	4401      	add	r1, r0
 8006976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800697a:	4313      	orrs	r3, r2
 800697c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	791b      	ldrb	r3, [r3, #4]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d11f      	bne.n	80069c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	440a      	add	r2, r1
 800699c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	0151      	lsls	r1, r2, #5
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	440a      	add	r2, r1
 80069bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d14b      	bne.n	8006a64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	461a      	mov	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	791b      	ldrb	r3, [r3, #4]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d128      	bne.n	8006a42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d110      	bne.n	8006a22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e00f      	b.n	8006a42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e133      	b.n	8006ccc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	791b      	ldrb	r3, [r3, #4]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d015      	beq.n	8006ab8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 811b 	beq.w	8006ccc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	634b      	str	r3, [r1, #52]	; 0x34
 8006ab6:	e109      	b.n	8006ccc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d110      	bne.n	8006aea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e00f      	b.n	8006b0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6919      	ldr	r1, [r3, #16]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	b298      	uxth	r0, r3
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fade 	bl	80070e0 <USB_WritePacket>
 8006b24:	e0d2      	b.n	8006ccc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b40:	0cdb      	lsrs	r3, r3, #19
 8006b42:	04db      	lsls	r3, r3, #19
 8006b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d126      	bne.n	8006bc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	0148      	lsls	r0, r1, #5
 8006b8c:	69f9      	ldr	r1, [r7, #28]
 8006b8e:	4401      	add	r1, r0
 8006b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b94:	4313      	orrs	r3, r2
 8006b96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb6:	6113      	str	r3, [r2, #16]
 8006bb8:	e03a      	b.n	8006c30 <USB_EPStartXfer+0x3e4>
 8006bba:	bf00      	nop
 8006bbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	1e5a      	subs	r2, r3, #1
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	8afa      	ldrh	r2, [r7, #22]
 8006bdc:	fb03 f202 	mul.w	r2, r3, r2
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	8afb      	ldrh	r3, [r7, #22]
 8006bf4:	04d9      	lsls	r1, r3, #19
 8006bf6:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <USB_EPStartXfer+0x48c>)
 8006bf8:	400b      	ands	r3, r1
 8006bfa:	69b9      	ldr	r1, [r7, #24]
 8006bfc:	0148      	lsls	r0, r1, #5
 8006bfe:	69f9      	ldr	r1, [r7, #28]
 8006c00:	4401      	add	r1, r0
 8006c02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c06:	4313      	orrs	r3, r2
 8006c08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c20:	69b9      	ldr	r1, [r7, #24]
 8006c22:	0148      	lsls	r0, r1, #5
 8006c24:	69f9      	ldr	r1, [r7, #28]
 8006c26:	4401      	add	r1, r0
 8006c28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d10d      	bne.n	8006c52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6919      	ldr	r1, [r3, #16]
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	460a      	mov	r2, r1
 8006c50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d128      	bne.n	8006cac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d110      	bne.n	8006c8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e00f      	b.n	8006cac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006caa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	1ff80000 	.word	0x1ff80000

08006cdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	f040 80ce 	bne.w	8006e9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d132      	bne.n	8006d6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d64:	0cdb      	lsrs	r3, r3, #19
 8006d66:	04db      	lsls	r3, r3, #19
 8006d68:	6113      	str	r3, [r2, #16]
 8006d6a:	e04e      	b.n	8006e0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d86:	0cdb      	lsrs	r3, r3, #19
 8006d88:	04db      	lsls	r3, r3, #19
 8006d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006daa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d903      	bls.n	8006dc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfa:	6939      	ldr	r1, [r7, #16]
 8006dfc:	0148      	lsls	r0, r1, #5
 8006dfe:	6979      	ldr	r1, [r7, #20]
 8006e00:	4401      	add	r1, r0
 8006e02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e06:	4313      	orrs	r3, r2
 8006e08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d11e      	bne.n	8006e4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	461a      	mov	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	e097      	b.n	8006f7e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8083 	beq.w	8006f7e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e94:	4313      	orrs	r3, r2
 8006e96:	634b      	str	r3, [r1, #52]	; 0x34
 8006e98:	e071      	b.n	8006f7e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb4:	0cdb      	lsrs	r3, r3, #19
 8006eb6:	04db      	lsls	r3, r3, #19
 8006eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006edc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f2c:	6939      	ldr	r1, [r7, #16]
 8006f2e:	0148      	lsls	r0, r1, #5
 8006f30:	6979      	ldr	r1, [r7, #20]
 8006f32:	4401      	add	r1, r0
 8006f34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d10d      	bne.n	8006f5e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6919      	ldr	r1, [r3, #16]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d14a      	bne.n	8007040 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc2:	f040 8086 	bne.w	80070d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fe8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	7812      	ldrb	r2, [r2, #0]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	440a      	add	r2, r1
 8007004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800700c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f242 7210 	movw	r2, #10000	; 0x2710
 800701a:	4293      	cmp	r3, r2
 800701c:	d902      	bls.n	8007024 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
          break;
 8007022:	e056      	b.n	80070d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800703c:	d0e7      	beq.n	800700e <USB_EPStopXfer+0x82>
 800703e:	e048      	b.n	80070d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007058:	d13b      	bne.n	80070d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	440a      	add	r2, r1
 8007074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007078:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800707c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3301      	adds	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d902      	bls.n	80070b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	75fb      	strb	r3, [r7, #23]
          break;
 80070b6:	e00c      	b.n	80070d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d0:	d0e7      	beq.n	80070a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b089      	sub	sp, #36	; 0x24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4611      	mov	r1, r2
 80070ec:	461a      	mov	r2, r3
 80070ee:	460b      	mov	r3, r1
 80070f0:	71fb      	strb	r3, [r7, #7]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007102:	2b00      	cmp	r3, #0
 8007104:	d123      	bne.n	800714e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007106:	88bb      	ldrh	r3, [r7, #4]
 8007108:	3303      	adds	r3, #3
 800710a:	089b      	lsrs	r3, r3, #2
 800710c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	e018      	b.n	8007146 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	031a      	lsls	r2, r3, #12
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4413      	add	r3, r2
 800711c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007120:	461a      	mov	r2, r3
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	3301      	adds	r3, #1
 8007132:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	3301      	adds	r3, #1
 8007138:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3301      	adds	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	3301      	adds	r3, #1
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	429a      	cmp	r2, r3
 800714c:	d3e2      	bcc.n	8007114 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3724      	adds	r7, #36	; 0x24
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800715c:	b480      	push	{r7}
 800715e:	b08b      	sub	sp, #44	; 0x2c
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	b29b      	uxth	r3, r3
 8007178:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007182:	2300      	movs	r3, #0
 8007184:	623b      	str	r3, [r7, #32]
 8007186:	e014      	b.n	80071b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	601a      	str	r2, [r3, #0]
    pDest++;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	3301      	adds	r3, #1
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	3301      	adds	r3, #1
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	3301      	adds	r3, #1
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	3301      	adds	r3, #1
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	3301      	adds	r3, #1
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d3e6      	bcc.n	8007188 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071ba:	8bfb      	ldrh	r3, [r7, #30]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01e      	beq.n	80071fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ca:	461a      	mov	r2, r3
 80071cc:	f107 0310 	add.w	r3, r7, #16
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	701a      	strb	r2, [r3, #0]
      i++;
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	3301      	adds	r3, #1
 80071ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	3301      	adds	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80071f2:	8bfb      	ldrh	r3, [r7, #30]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071f8:	8bfb      	ldrh	r3, [r7, #30]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1ea      	bne.n	80071d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007200:	4618      	mov	r0, r3
 8007202:	372c      	adds	r7, #44	; 0x2c
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d12c      	bne.n	8007282 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	db12      	blt.n	8007260 <USB_EPSetStall+0x54>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00f      	beq.n	8007260 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800725e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	e02b      	b.n	80072da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	db12      	blt.n	80072ba <USB_EPSetStall+0xae>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00f      	beq.n	80072ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d128      	bne.n	8007356 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007322:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	791b      	ldrb	r3, [r3, #4]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d003      	beq.n	8007334 <USB_EPClearStall+0x4c>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	791b      	ldrb	r3, [r3, #4]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d138      	bne.n	80073a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e027      	b.n	80073a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007370:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007374:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	791b      	ldrb	r3, [r3, #4]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d003      	beq.n	8007386 <USB_EPClearStall+0x9e>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	791b      	ldrb	r3, [r3, #4]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d10f      	bne.n	80073a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	440a      	add	r2, r1
 800739c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073e8:	68f9      	ldr	r1, [r7, #12]
 80073ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ee:	4313      	orrs	r3, r2
 80073f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742e:	f023 0302 	bic.w	r3, r3, #2
 8007432:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800745c:	f023 0303 	bic.w	r3, r3, #3
 8007460:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007470:	f043 0302 	orr.w	r3, r3, #2
 8007474:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4013      	ands	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800749c:	68fb      	ldr	r3, [r7, #12]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	4013      	ands	r3, r2
 80074cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	0c1b      	lsrs	r3, r3, #16
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4013      	ands	r3, r2
 8007500:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	b29b      	uxth	r3, r3
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007540:	68bb      	ldr	r3, [r7, #8]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800754e:	b480      	push	{r7}
 8007550:	b087      	sub	sp, #28
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	fa22 f303 	lsr.w	r3, r2, r3
 800757e:	01db      	lsls	r3, r3, #7
 8007580:	b2db      	uxtb	r3, r3
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4013      	ands	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800759c:	68bb      	ldr	r3, [r7, #8]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	f003 0301 	and.w	r3, r3, #1
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075e4:	f023 0307 	bic.w	r3, r3, #7
 80075e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	460b      	mov	r3, r1
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	333c      	adds	r3, #60	; 0x3c
 8007622:	3304      	adds	r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <USB_EP0_OutStart+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d90a      	bls.n	8007646 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007640:	d101      	bne.n	8007646 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e037      	b.n	80076b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	461a      	mov	r2, r3
 800764e:	2300      	movs	r3, #0
 8007650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f043 0318 	orr.w	r3, r3, #24
 8007678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800768c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10f      	bne.n	80076b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	4f54300a 	.word	0x4f54300a

080076c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <USB_CoreReset+0x64>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d901      	bls.n	80076e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e01b      	b.n	800771e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	daf2      	bge.n	80076d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a09      	ldr	r2, [pc, #36]	; (800772c <USB_CoreReset+0x64>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d901      	bls.n	8007710 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e006      	b.n	800771e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d0f0      	beq.n	80076fe <USB_CoreReset+0x36>

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	00030d40 	.word	0x00030d40

08007730 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800773c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007740:	f002 fc36 	bl	8009fb0 <USBD_static_malloc>
 8007744:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d109      	bne.n	8007760 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32b0      	adds	r2, #176	; 0xb0
 8007756:	2100      	movs	r1, #0
 8007758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800775c:	2302      	movs	r3, #2
 800775e:	e0d4      	b.n	800790a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007760:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007764:	2100      	movs	r1, #0
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f002 fcb8 	bl	800a0dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32b0      	adds	r2, #176	; 0xb0
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	32b0      	adds	r2, #176	; 0xb0
 8007786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7c1b      	ldrb	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d138      	bne.n	800780a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007798:	4b5e      	ldr	r3, [pc, #376]	; (8007914 <USBD_CDC_Init+0x1e4>)
 800779a:	7819      	ldrb	r1, [r3, #0]
 800779c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a0:	2202      	movs	r2, #2
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f002 fae1 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077a8:	4b5a      	ldr	r3, [pc, #360]	; (8007914 <USBD_CDC_Init+0x1e4>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	3324      	adds	r3, #36	; 0x24
 80077be:	2201      	movs	r2, #1
 80077c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077c2:	4b55      	ldr	r3, [pc, #340]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80077c4:	7819      	ldrb	r1, [r3, #0]
 80077c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ca:	2202      	movs	r2, #2
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f002 facc 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077d2:	4b51      	ldr	r3, [pc, #324]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 020f 	and.w	r2, r3, #15
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	440b      	add	r3, r1
 80077e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077ea:	2201      	movs	r2, #1
 80077ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077ee:	4b4b      	ldr	r3, [pc, #300]	; (800791c <USBD_CDC_Init+0x1ec>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	3326      	adds	r3, #38	; 0x26
 8007804:	2210      	movs	r2, #16
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e035      	b.n	8007876 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800780a:	4b42      	ldr	r3, [pc, #264]	; (8007914 <USBD_CDC_Init+0x1e4>)
 800780c:	7819      	ldrb	r1, [r3, #0]
 800780e:	2340      	movs	r3, #64	; 0x40
 8007810:	2202      	movs	r2, #2
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f002 faa9 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007818:	4b3e      	ldr	r3, [pc, #248]	; (8007914 <USBD_CDC_Init+0x1e4>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 020f 	and.w	r2, r3, #15
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	3324      	adds	r3, #36	; 0x24
 800782e:	2201      	movs	r2, #1
 8007830:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007832:	4b39      	ldr	r3, [pc, #228]	; (8007918 <USBD_CDC_Init+0x1e8>)
 8007834:	7819      	ldrb	r1, [r3, #0]
 8007836:	2340      	movs	r3, #64	; 0x40
 8007838:	2202      	movs	r2, #2
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f002 fa95 	bl	8009d6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007840:	4b35      	ldr	r3, [pc, #212]	; (8007918 <USBD_CDC_Init+0x1e8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 020f 	and.w	r2, r3, #15
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007858:	2201      	movs	r2, #1
 800785a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800785c:	4b2f      	ldr	r3, [pc, #188]	; (800791c <USBD_CDC_Init+0x1ec>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 020f 	and.w	r2, r3, #15
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	3326      	adds	r3, #38	; 0x26
 8007872:	2210      	movs	r2, #16
 8007874:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007876:	4b29      	ldr	r3, [pc, #164]	; (800791c <USBD_CDC_Init+0x1ec>)
 8007878:	7819      	ldrb	r1, [r3, #0]
 800787a:	2308      	movs	r3, #8
 800787c:	2203      	movs	r2, #3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 fa73 	bl	8009d6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007884:	4b25      	ldr	r3, [pc, #148]	; (800791c <USBD_CDC_Init+0x1ec>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	3324      	adds	r3, #36	; 0x24
 800789a:	2201      	movs	r2, #1
 800789c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	33b0      	adds	r3, #176	; 0xb0
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80078d4:	2302      	movs	r3, #2
 80078d6:	e018      	b.n	800790a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	7c1b      	ldrb	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078e0:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80078e2:	7819      	ldrb	r1, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f002 fb2a 	bl	8009f48 <USBD_LL_PrepareReceive>
 80078f4:	e008      	b.n	8007908 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078f6:	4b08      	ldr	r3, [pc, #32]	; (8007918 <USBD_CDC_Init+0x1e8>)
 80078f8:	7819      	ldrb	r1, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 fb20 	bl	8009f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200000a3 	.word	0x200000a3
 8007918:	200000a4 	.word	0x200000a4
 800791c:	200000a5 	.word	0x200000a5

08007920 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800792c:	4b3a      	ldr	r3, [pc, #232]	; (8007a18 <USBD_CDC_DeInit+0xf8>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f002 fa3f 	bl	8009db6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007938:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <USBD_CDC_DeInit+0xf8>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	2200      	movs	r2, #0
 8007950:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007952:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <USBD_CDC_DeInit+0xfc>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f002 fa2c 	bl	8009db6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800795e:	4b2f      	ldr	r3, [pc, #188]	; (8007a1c <USBD_CDC_DeInit+0xfc>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 020f 	and.w	r2, r3, #15
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007976:	2200      	movs	r2, #0
 8007978:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800797a:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <USBD_CDC_DeInit+0x100>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f002 fa18 	bl	8009db6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <USBD_CDC_DeInit+0x100>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	2200      	movs	r2, #0
 800799e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <USBD_CDC_DeInit+0x100>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	3326      	adds	r3, #38	; 0x26
 80079b6:	2200      	movs	r2, #0
 80079b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	32b0      	adds	r2, #176	; 0xb0
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01f      	beq.n	8007a0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	33b0      	adds	r3, #176	; 0xb0
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32b0      	adds	r2, #176	; 0xb0
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f002 faec 	bl	8009fcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32b0      	adds	r2, #176	; 0xb0
 80079fe:	2100      	movs	r1, #0
 8007a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200000a3 	.word	0x200000a3
 8007a1c:	200000a4 	.word	0x200000a4
 8007a20:	200000a5 	.word	0x200000a5

08007a24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	32b0      	adds	r2, #176	; 0xb0
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e0bf      	b.n	8007bd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d050      	beq.n	8007b02 <USBD_CDC_Setup+0xde>
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	f040 80af 	bne.w	8007bc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d03a      	beq.n	8007ae4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b25b      	sxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da1b      	bge.n	8007ab0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	33b0      	adds	r3, #176	; 0xb0
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	88d2      	ldrh	r2, [r2, #6]
 8007a94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	2b07      	cmp	r3, #7
 8007a9c:	bf28      	it	cs
 8007a9e:	2307      	movcs	r3, #7
 8007aa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	89fa      	ldrh	r2, [r7, #14]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 fd43 	bl	8009534 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007aae:	e090      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	785a      	ldrb	r2, [r3, #1]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b3f      	cmp	r3, #63	; 0x3f
 8007ac0:	d803      	bhi.n	8007aca <USBD_CDC_Setup+0xa6>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	88db      	ldrh	r3, [r3, #6]
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	e000      	b.n	8007acc <USBD_CDC_Setup+0xa8>
 8007aca:	2240      	movs	r2, #64	; 0x40
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ad2:	6939      	ldr	r1, [r7, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007ada:	461a      	mov	r2, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fd55 	bl	800958c <USBD_CtlPrepareRx>
      break;
 8007ae2:	e076      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	33b0      	adds	r3, #176	; 0xb0
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	7850      	ldrb	r0, [r2, #1]
 8007afa:	2200      	movs	r2, #0
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	4798      	blx	r3
      break;
 8007b00:	e067      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b0b      	cmp	r3, #11
 8007b08:	d851      	bhi.n	8007bae <USBD_CDC_Setup+0x18a>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_CDC_Setup+0xec>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b41 	.word	0x08007b41
 8007b14:	08007bbd 	.word	0x08007bbd
 8007b18:	08007baf 	.word	0x08007baf
 8007b1c:	08007baf 	.word	0x08007baf
 8007b20:	08007baf 	.word	0x08007baf
 8007b24:	08007baf 	.word	0x08007baf
 8007b28:	08007baf 	.word	0x08007baf
 8007b2c:	08007baf 	.word	0x08007baf
 8007b30:	08007baf 	.word	0x08007baf
 8007b34:	08007baf 	.word	0x08007baf
 8007b38:	08007b6b 	.word	0x08007b6b
 8007b3c:	08007b95 	.word	0x08007b95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d107      	bne.n	8007b5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b4c:	f107 030a 	add.w	r3, r7, #10
 8007b50:	2202      	movs	r2, #2
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fced 	bl	8009534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b5a:	e032      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fc77 	bl	8009452 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	75fb      	strb	r3, [r7, #23]
          break;
 8007b68:	e02b      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d107      	bne.n	8007b86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b76:	f107 030d 	add.w	r3, r7, #13
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fcd8 	bl	8009534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b84:	e01d      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fc62 	bl	8009452 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
          break;
 8007b92:	e016      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d00f      	beq.n	8007bc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 fc55 	bl	8009452 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bac:	e008      	b.n	8007bc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fc4e 	bl	8009452 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bba:	e002      	b.n	8007bc2 <USBD_CDC_Setup+0x19e>
          break;
 8007bbc:	bf00      	nop
 8007bbe:	e008      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>
          break;
 8007bc0:	bf00      	nop
      }
      break;
 8007bc2:	e006      	b.n	8007bd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fc43 	bl	8009452 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	32b0      	adds	r2, #176	; 0xb0
 8007bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e065      	b.n	8007cd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	32b0      	adds	r2, #176	; 0xb0
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3318      	adds	r3, #24
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d02f      	beq.n	8007c90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	f003 020f 	and.w	r2, r3, #15
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	3318      	adds	r3, #24
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	f003 010f 	and.w	r1, r3, #15
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	440b      	add	r3, r1
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4403      	add	r3, r0
 8007c58:	3348      	adds	r3, #72	; 0x48
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d112      	bne.n	8007c90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3318      	adds	r3, #24
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2200      	movs	r2, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f002 f93c 	bl	8009f06 <USBD_LL_Transmit>
 8007c8e:	e01f      	b.n	8007cd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	33b0      	adds	r3, #176	; 0xb0
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d010      	beq.n	8007cd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	33b0      	adds	r3, #176	; 0xb0
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	32b0      	adds	r2, #176	; 0xb0
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32b0      	adds	r2, #176	; 0xb0
 8007d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e01a      	b.n	8007d42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f002 f93a 	bl	8009f8a <USBD_LL_GetRxDataSize>
 8007d16:	4602      	mov	r2, r0
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	33b0      	adds	r3, #176	; 0xb0
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	32b0      	adds	r2, #176	; 0xb0
 8007d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e025      	b.n	8007db8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	33b0      	adds	r3, #176	; 0xb0
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01a      	beq.n	8007db6 <USBD_CDC_EP0_RxReady+0x6c>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d86:	2bff      	cmp	r3, #255	; 0xff
 8007d88:	d015      	beq.n	8007db6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	33b0      	adds	r3, #176	; 0xb0
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007da2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007daa:	b292      	uxth	r2, r2
 8007dac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dc8:	2182      	movs	r1, #130	; 0x82
 8007dca:	4818      	ldr	r0, [pc, #96]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dcc:	f000 fd09 	bl	80087e2 <USBD_GetEpDesc>
 8007dd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	4815      	ldr	r0, [pc, #84]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dd6:	f000 fd04 	bl	80087e2 <USBD_GetEpDesc>
 8007dda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ddc:	2181      	movs	r1, #129	; 0x81
 8007dde:	4813      	ldr	r0, [pc, #76]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007de0:	f000 fcff 	bl	80087e2 <USBD_GetEpDesc>
 8007de4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2210      	movs	r2, #16
 8007df0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e00:	711a      	strb	r2, [r3, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e14:	711a      	strb	r2, [r3, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2243      	movs	r2, #67	; 0x43
 8007e1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000060 	.word	0x20000060

08007e30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e38:	2182      	movs	r1, #130	; 0x82
 8007e3a:	4818      	ldr	r0, [pc, #96]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e3c:	f000 fcd1 	bl	80087e2 <USBD_GetEpDesc>
 8007e40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e42:	2101      	movs	r1, #1
 8007e44:	4815      	ldr	r0, [pc, #84]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e46:	f000 fccc 	bl	80087e2 <USBD_GetEpDesc>
 8007e4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e4c:	2181      	movs	r1, #129	; 0x81
 8007e4e:	4813      	ldr	r0, [pc, #76]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e50:	f000 fcc7 	bl	80087e2 <USBD_GetEpDesc>
 8007e54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2210      	movs	r2, #16
 8007e60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d006      	beq.n	8007e76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	711a      	strb	r2, [r3, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f042 0202 	orr.w	r2, r2, #2
 8007e74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d006      	beq.n	8007e8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	711a      	strb	r2, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f042 0202 	orr.w	r2, r2, #2
 8007e88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2243      	movs	r2, #67	; 0x43
 8007e8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e90:	4b02      	ldr	r3, [pc, #8]	; (8007e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000060 	.word	0x20000060

08007ea0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ea8:	2182      	movs	r1, #130	; 0x82
 8007eaa:	4818      	ldr	r0, [pc, #96]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eac:	f000 fc99 	bl	80087e2 <USBD_GetEpDesc>
 8007eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	4815      	ldr	r0, [pc, #84]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eb6:	f000 fc94 	bl	80087e2 <USBD_GetEpDesc>
 8007eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ebc:	2181      	movs	r1, #129	; 0x81
 8007ebe:	4813      	ldr	r0, [pc, #76]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ec0:	f000 fc8f 	bl	80087e2 <USBD_GetEpDesc>
 8007ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2210      	movs	r2, #16
 8007ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d006      	beq.n	8007ee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee0:	711a      	strb	r2, [r3, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef4:	711a      	strb	r2, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2243      	movs	r2, #67	; 0x43
 8007efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000060 	.word	0x20000060

08007f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	220a      	movs	r2, #10
 8007f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f1e:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	2000001c 	.word	0x2000001c

08007f30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e009      	b.n	8007f58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	33b0      	adds	r3, #176	; 0xb0
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	32b0      	adds	r2, #176	; 0xb0
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e008      	b.n	8007f9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	32b0      	adds	r2, #176	; 0xb0
 8007fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e004      	b.n	8007fd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32b0      	adds	r2, #176	; 0xb0
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32b0      	adds	r2, #176	; 0xb0
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	e018      	b.n	8008044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7c1b      	ldrb	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <USBD_CDC_ReceivePacket+0x68>)
 800801c:	7819      	ldrb	r1, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 ff8d 	bl	8009f48 <USBD_LL_PrepareReceive>
 800802e:	e008      	b.n	8008042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <USBD_CDC_ReceivePacket+0x68>)
 8008032:	7819      	ldrb	r1, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 ff83 	bl	8009f48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200000a4 	.word	0x200000a4

08008050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	e01f      	b.n	80080a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fdfd 	bl	8009c9c <USBD_LL_Init>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e025      	b.n	8008114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32ae      	adds	r2, #174	; 0xae
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00f      	beq.n	8008104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	32ae      	adds	r2, #174	; 0xae
 80080ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	f107 020e 	add.w	r2, r7, #14
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 fe05 	bl	8009d34 <USBD_LL_Start>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800813c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	4611      	mov	r1, r2
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	4611      	mov	r1, r2
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 f908 	bl	80093de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d01a      	beq.n	8008228 <USBD_LL_SetupStage+0x72>
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d822      	bhi.n	800823c <USBD_LL_SetupStage+0x86>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <USBD_LL_SetupStage+0x4a>
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d00a      	beq.n	8008214 <USBD_LL_SetupStage+0x5e>
 80081fe:	e01d      	b.n	800823c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb5f 	bl	80088cc <USBD_StdDevReq>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
      break;
 8008212:	e020      	b.n	8008256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fbc7 	bl	80089b0 <USBD_StdItfReq>
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
      break;
 8008226:	e016      	b.n	8008256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc29 	bl	8008a88 <USBD_StdEPReq>
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]
      break;
 800823a:	e00c      	b.n	8008256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008246:	b2db      	uxtb	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 fdd2 	bl	8009df4 <USBD_LL_StallEP>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
      break;
 8008254:	bf00      	nop
  }

  return ret;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	460b      	mov	r3, r1
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008272:	7afb      	ldrb	r3, [r7, #11]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d16e      	bne.n	8008356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800827e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008286:	2b03      	cmp	r3, #3
 8008288:	f040 8098 	bne.w	80083bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	429a      	cmp	r2, r3
 8008296:	d913      	bls.n	80082c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	1ad2      	subs	r2, r2, r3
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	4293      	cmp	r3, r2
 80082b0:	bf28      	it	cs
 80082b2:	4613      	movcs	r3, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f001 f984 	bl	80095c6 <USBD_CtlContinueRx>
 80082be:	e07d      	b.n	80083bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d014      	beq.n	80082f8 <USBD_LL_DataOutStage+0x98>
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d81d      	bhi.n	800830e <USBD_LL_DataOutStage+0xae>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <USBD_LL_DataOutStage+0x7c>
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d003      	beq.n	80082e2 <USBD_LL_DataOutStage+0x82>
 80082da:	e018      	b.n	800830e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	75bb      	strb	r3, [r7, #22]
            break;
 80082e0:	e018      	b.n	8008314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	4619      	mov	r1, r3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fa5e 	bl	80087ae <USBD_CoreFindIF>
 80082f2:	4603      	mov	r3, r0
 80082f4:	75bb      	strb	r3, [r7, #22]
            break;
 80082f6:	e00d      	b.n	8008314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fa60 	bl	80087c8 <USBD_CoreFindEP>
 8008308:	4603      	mov	r3, r0
 800830a:	75bb      	strb	r3, [r7, #22]
            break;
 800830c:	e002      	b.n	8008314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	75bb      	strb	r3, [r7, #22]
            break;
 8008312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d119      	bne.n	800834e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d113      	bne.n	800834e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008326:	7dba      	ldrb	r2, [r7, #22]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	32ae      	adds	r2, #174	; 0xae
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008336:	7dba      	ldrb	r2, [r7, #22]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800833e:	7dba      	ldrb	r2, [r7, #22]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	32ae      	adds	r2, #174	; 0xae
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f001 f94a 	bl	80095e8 <USBD_CtlSendStatus>
 8008354:	e032      	b.n	80083bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008356:	7afb      	ldrb	r3, [r7, #11]
 8008358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835c:	b2db      	uxtb	r3, r3
 800835e:	4619      	mov	r1, r3
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fa31 	bl	80087c8 <USBD_CoreFindEP>
 8008366:	4603      	mov	r3, r0
 8008368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800836a:	7dbb      	ldrb	r3, [r7, #22]
 800836c:	2bff      	cmp	r3, #255	; 0xff
 800836e:	d025      	beq.n	80083bc <USBD_LL_DataOutStage+0x15c>
 8008370:	7dbb      	ldrb	r3, [r7, #22]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d122      	bne.n	80083bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b03      	cmp	r3, #3
 8008380:	d117      	bne.n	80083b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008382:	7dba      	ldrb	r2, [r7, #22]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	32ae      	adds	r2, #174	; 0xae
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008392:	7dba      	ldrb	r2, [r7, #22]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800839a:	7dba      	ldrb	r2, [r7, #22]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	32ae      	adds	r2, #174	; 0xae
 80083a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	7afa      	ldrb	r2, [r7, #11]
 80083a8:	4611      	mov	r1, r2
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	4798      	blx	r3
 80083ae:	4603      	mov	r3, r0
 80083b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	e000      	b.n	80083be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	460b      	mov	r3, r1
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d16f      	bne.n	80084ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3314      	adds	r3, #20
 80083de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d15a      	bne.n	80084a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d914      	bls.n	8008420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	461a      	mov	r2, r3
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f001 f8ac 	bl	800956a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008412:	2300      	movs	r3, #0
 8008414:	2200      	movs	r2, #0
 8008416:	2100      	movs	r1, #0
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f001 fd95 	bl	8009f48 <USBD_LL_PrepareReceive>
 800841e:	e03f      	b.n	80084a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	429a      	cmp	r2, r3
 800842a:	d11c      	bne.n	8008466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008434:	429a      	cmp	r2, r3
 8008436:	d316      	bcc.n	8008466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008442:	429a      	cmp	r2, r3
 8008444:	d20f      	bcs.n	8008466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f001 f88d 	bl	800956a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f001 fd72 	bl	8009f48 <USBD_LL_PrepareReceive>
 8008464:	e01c      	b.n	80084a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b03      	cmp	r3, #3
 8008470:	d10f      	bne.n	8008492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008492:	2180      	movs	r1, #128	; 0x80
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fcad 	bl	8009df4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 f8b7 	bl	800960e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d03a      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff fe42 	bl	8008134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084b8:	e032      	b.n	8008520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f97f 	bl	80087c8 <USBD_CoreFindEP>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	2bff      	cmp	r3, #255	; 0xff
 80084d2:	d025      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d122      	bne.n	8008520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d11c      	bne.n	8008520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80084e6:	7dfa      	ldrb	r2, [r7, #23]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	32ae      	adds	r2, #174	; 0xae
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d014      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80084f6:	7dfa      	ldrb	r2, [r7, #23]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084fe:	7dfa      	ldrb	r2, [r7, #23]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	32ae      	adds	r2, #174	; 0xae
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	7afa      	ldrb	r2, [r7, #11]
 800850c:	4611      	mov	r1, r2
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	4798      	blx	r3
 8008512:	4603      	mov	r3, r0
 8008514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008516:	7dbb      	ldrb	r3, [r7, #22]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800851c:	7dbb      	ldrb	r3, [r7, #22]
 800851e:	e000      	b.n	8008522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6852      	ldr	r2, [r2, #4]
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	4611      	mov	r1, r2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800858c:	2303      	movs	r3, #3
 800858e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	2200      	movs	r2, #0
 8008594:	2100      	movs	r1, #0
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fbe7 	bl	8009d6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2240      	movs	r2, #64	; 0x40
 80085a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085ac:	2340      	movs	r3, #64	; 0x40
 80085ae:	2200      	movs	r2, #0
 80085b0:	2180      	movs	r1, #128	; 0x80
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fbd9 	bl	8009d6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2240      	movs	r2, #64	; 0x40
 80085c2:	621a      	str	r2, [r3, #32]

  return ret;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2204      	movs	r2, #4
 8008608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b04      	cmp	r3, #4
 800862c:	d106      	bne.n	800863c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008634:	b2da      	uxtb	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b03      	cmp	r3, #3
 800865c:	d110      	bne.n	8008680 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	32ae      	adds	r2, #174	; 0xae
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e01c      	b.n	80086e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d115      	bne.n	80086e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32ae      	adds	r2, #174	; 0xae
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32ae      	adds	r2, #174	; 0xae
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	4611      	mov	r1, r2
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	32ae      	adds	r2, #174	; 0xae
 8008704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800870c:	2303      	movs	r3, #3
 800870e:	e01c      	b.n	800874a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b03      	cmp	r3, #3
 800871a:	d115      	bne.n	8008748 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32ae      	adds	r2, #174	; 0xae
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32ae      	adds	r2, #174	; 0xae
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	4611      	mov	r1, r2
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6852      	ldr	r2, [r2, #4]
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	4611      	mov	r1, r2
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	460b      	mov	r3, r1
 80087b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80087d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	429a      	cmp	r2, r3
 8008808:	d920      	bls.n	800884c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008812:	e013      	b.n	800883c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008814:	f107 030a 	add.w	r3, r7, #10
 8008818:	4619      	mov	r1, r3
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f000 f81b 	bl	8008856 <USBD_GetNextDesc>
 8008820:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	2b05      	cmp	r3, #5
 8008828:	d108      	bne.n	800883c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	789b      	ldrb	r3, [r3, #2]
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	429a      	cmp	r2, r3
 8008836:	d008      	beq.n	800884a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	885b      	ldrh	r3, [r3, #2]
 8008840:	b29a      	uxth	r2, r3
 8008842:	897b      	ldrh	r3, [r7, #10]
 8008844:	429a      	cmp	r2, r3
 8008846:	d8e5      	bhi.n	8008814 <USBD_GetEpDesc+0x32>
 8008848:	e000      	b.n	800884c <USBD_GetEpDesc+0x6a>
          break;
 800884a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800884c:	693b      	ldr	r3, [r7, #16]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008856:	b480      	push	{r7}
 8008858:	b085      	sub	sp, #20
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	881a      	ldrh	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	4413      	add	r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	3301      	adds	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088ae:	8a3b      	ldrh	r3, [r7, #16]
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	b21a      	sxth	r2, r3
 80088b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b21b      	sxth	r3, r3
 80088bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088be:	89fb      	ldrh	r3, [r7, #14]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d005      	beq.n	80088f2 <USBD_StdDevReq+0x26>
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d857      	bhi.n	800899a <USBD_StdDevReq+0xce>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00f      	beq.n	800890e <USBD_StdDevReq+0x42>
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d153      	bne.n	800899a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32ae      	adds	r2, #174	; 0xae
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
      break;
 800890c:	e04a      	b.n	80089a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	785b      	ldrb	r3, [r3, #1]
 8008912:	2b09      	cmp	r3, #9
 8008914:	d83b      	bhi.n	800898e <USBD_StdDevReq+0xc2>
 8008916:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBD_StdDevReq+0x50>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008971 	.word	0x08008971
 8008920:	08008985 	.word	0x08008985
 8008924:	0800898f 	.word	0x0800898f
 8008928:	0800897b 	.word	0x0800897b
 800892c:	0800898f 	.word	0x0800898f
 8008930:	0800894f 	.word	0x0800894f
 8008934:	08008945 	.word	0x08008945
 8008938:	0800898f 	.word	0x0800898f
 800893c:	08008967 	.word	0x08008967
 8008940:	08008959 	.word	0x08008959
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa3c 	bl	8008dc4 <USBD_GetDescriptor>
          break;
 800894c:	e024      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fba1 	bl	8009098 <USBD_SetAddress>
          break;
 8008956:	e01f      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fbe0 	bl	8009120 <USBD_SetConfig>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
          break;
 8008964:	e018      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fc83 	bl	8009274 <USBD_GetConfig>
          break;
 800896e:	e013      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fcb4 	bl	80092e0 <USBD_GetStatus>
          break;
 8008978:	e00e      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fce3 	bl	8009348 <USBD_SetFeature>
          break;
 8008982:	e009      	b.n	8008998 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fd07 	bl	800939a <USBD_ClrFeature>
          break;
 800898c:	e004      	b.n	8008998 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fd5e 	bl	8009452 <USBD_CtlError>
          break;
 8008996:	bf00      	nop
      }
      break;
 8008998:	e004      	b.n	80089a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fd58 	bl	8009452 <USBD_CtlError>
      break;
 80089a2:	bf00      	nop
  }

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop

080089b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089c6:	2b40      	cmp	r3, #64	; 0x40
 80089c8:	d005      	beq.n	80089d6 <USBD_StdItfReq+0x26>
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d852      	bhi.n	8008a74 <USBD_StdItfReq+0xc4>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <USBD_StdItfReq+0x26>
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d14e      	bne.n	8008a74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d840      	bhi.n	8008a66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	889b      	ldrh	r3, [r3, #4]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d836      	bhi.n	8008a5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	889b      	ldrh	r3, [r3, #4]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fed9 	bl	80087ae <USBD_CoreFindIF>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2bff      	cmp	r3, #255	; 0xff
 8008a04:	d01d      	beq.n	8008a42 <USBD_StdItfReq+0x92>
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11a      	bne.n	8008a42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a0c:	7bba      	ldrb	r2, [r7, #14]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	32ae      	adds	r2, #174	; 0xae
 8008a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00f      	beq.n	8008a3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a1c:	7bba      	ldrb	r2, [r7, #14]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a24:	7bba      	ldrb	r2, [r7, #14]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	32ae      	adds	r2, #174	; 0xae
 8008a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a3a:	e004      	b.n	8008a46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a40:	e001      	b.n	8008a46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88db      	ldrh	r3, [r3, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d110      	bne.n	8008a70 <USBD_StdItfReq+0xc0>
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fdc7 	bl	80095e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a5a:	e009      	b.n	8008a70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fcf7 	bl	8009452 <USBD_CtlError>
          break;
 8008a64:	e004      	b.n	8008a70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fcf2 	bl	8009452 <USBD_CtlError>
          break;
 8008a6e:	e000      	b.n	8008a72 <USBD_StdItfReq+0xc2>
          break;
 8008a70:	bf00      	nop
      }
      break;
 8008a72:	e004      	b.n	8008a7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fceb 	bl	8009452 <USBD_CtlError>
      break;
 8008a7c:	bf00      	nop
  }

  return ret;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	889b      	ldrh	r3, [r3, #4]
 8008a9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	d007      	beq.n	8008ab8 <USBD_StdEPReq+0x30>
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	f200 817f 	bhi.w	8008dac <USBD_StdEPReq+0x324>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d02a      	beq.n	8008b08 <USBD_StdEPReq+0x80>
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	f040 817a 	bne.w	8008dac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fe83 	bl	80087c8 <USBD_CoreFindEP>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ac6:	7b7b      	ldrb	r3, [r7, #13]
 8008ac8:	2bff      	cmp	r3, #255	; 0xff
 8008aca:	f000 8174 	beq.w	8008db6 <USBD_StdEPReq+0x32e>
 8008ace:	7b7b      	ldrb	r3, [r7, #13]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f040 8170 	bne.w	8008db6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ad6:	7b7a      	ldrb	r2, [r7, #13]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ade:	7b7a      	ldrb	r2, [r7, #13]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	32ae      	adds	r2, #174	; 0xae
 8008ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8163 	beq.w	8008db6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008af0:	7b7a      	ldrb	r2, [r7, #13]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32ae      	adds	r2, #174	; 0xae
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b06:	e156      	b.n	8008db6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d008      	beq.n	8008b22 <USBD_StdEPReq+0x9a>
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	f300 8145 	bgt.w	8008da0 <USBD_StdEPReq+0x318>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 809b 	beq.w	8008c52 <USBD_StdEPReq+0x1ca>
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d03c      	beq.n	8008b9a <USBD_StdEPReq+0x112>
 8008b20:	e13e      	b.n	8008da0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d002      	beq.n	8008b34 <USBD_StdEPReq+0xac>
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d016      	beq.n	8008b60 <USBD_StdEPReq+0xd8>
 8008b32:	e02c      	b.n	8008b8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <USBD_StdEPReq+0xce>
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b80      	cmp	r3, #128	; 0x80
 8008b3e:	d00a      	beq.n	8008b56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f955 	bl	8009df4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b4a:	2180      	movs	r1, #128	; 0x80
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f951 	bl	8009df4 <USBD_LL_StallEP>
 8008b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b54:	e020      	b.n	8008b98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fc7a 	bl	8009452 <USBD_CtlError>
              break;
 8008b5e:	e01b      	b.n	8008b98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	885b      	ldrh	r3, [r3, #2]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10e      	bne.n	8008b86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <USBD_StdEPReq+0xfe>
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b80      	cmp	r3, #128	; 0x80
 8008b72:	d008      	beq.n	8008b86 <USBD_StdEPReq+0xfe>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	88db      	ldrh	r3, [r3, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f937 	bl	8009df4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fd2e 	bl	80095e8 <USBD_CtlSendStatus>

              break;
 8008b8c:	e004      	b.n	8008b98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc5e 	bl	8009452 <USBD_CtlError>
              break;
 8008b96:	bf00      	nop
          }
          break;
 8008b98:	e107      	b.n	8008daa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d002      	beq.n	8008bac <USBD_StdEPReq+0x124>
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d016      	beq.n	8008bd8 <USBD_StdEPReq+0x150>
 8008baa:	e04b      	b.n	8008c44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00d      	beq.n	8008bce <USBD_StdEPReq+0x146>
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d00a      	beq.n	8008bce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 f919 	bl	8009df4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc2:	2180      	movs	r1, #128	; 0x80
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f915 	bl	8009df4 <USBD_LL_StallEP>
 8008bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bcc:	e040      	b.n	8008c50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc3e 	bl	8009452 <USBD_CtlError>
              break;
 8008bd6:	e03b      	b.n	8008c50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d136      	bne.n	8008c4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 f91f 	bl	8009e32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fcf7 	bl	80095e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff fde2 	bl	80087c8 <USBD_CoreFindEP>
 8008c04:	4603      	mov	r3, r0
 8008c06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c08:	7b7b      	ldrb	r3, [r7, #13]
 8008c0a:	2bff      	cmp	r3, #255	; 0xff
 8008c0c:	d01f      	beq.n	8008c4e <USBD_StdEPReq+0x1c6>
 8008c0e:	7b7b      	ldrb	r3, [r7, #13]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11c      	bne.n	8008c4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c14:	7b7a      	ldrb	r2, [r7, #13]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c1c:	7b7a      	ldrb	r2, [r7, #13]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	32ae      	adds	r2, #174	; 0xae
 8008c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d010      	beq.n	8008c4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c2c:	7b7a      	ldrb	r2, [r7, #13]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32ae      	adds	r2, #174	; 0xae
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c42:	e004      	b.n	8008c4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc03 	bl	8009452 <USBD_CtlError>
              break;
 8008c4c:	e000      	b.n	8008c50 <USBD_StdEPReq+0x1c8>
              break;
 8008c4e:	bf00      	nop
          }
          break;
 8008c50:	e0ab      	b.n	8008daa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d002      	beq.n	8008c64 <USBD_StdEPReq+0x1dc>
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d032      	beq.n	8008cc8 <USBD_StdEPReq+0x240>
 8008c62:	e097      	b.n	8008d94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <USBD_StdEPReq+0x1f2>
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b80      	cmp	r3, #128	; 0x80
 8008c6e:	d004      	beq.n	8008c7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fbed 	bl	8009452 <USBD_CtlError>
                break;
 8008c78:	e091      	b.n	8008d9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da0b      	bge.n	8008c9a <USBD_StdEPReq+0x212>
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3310      	adds	r3, #16
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	e00b      	b.n	8008cb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	4413      	add	r3, r2
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc37 	bl	8009534 <USBD_CtlSendData>
              break;
 8008cc6:	e06a      	b.n	8008d9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	da11      	bge.n	8008cf4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	f003 020f 	and.w	r2, r3, #15
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3324      	adds	r3, #36	; 0x24
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d117      	bne.n	8008d1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fbb0 	bl	8009452 <USBD_CtlError>
                  break;
 8008cf2:	e054      	b.n	8008d9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 020f 	and.w	r2, r3, #15
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fb9d 	bl	8009452 <USBD_CtlError>
                  break;
 8008d18:	e041      	b.n	8008d9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	da0b      	bge.n	8008d3a <USBD_StdEPReq+0x2b2>
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	3310      	adds	r3, #16
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	3304      	adds	r3, #4
 8008d38:	e00b      	b.n	8008d52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	4413      	add	r3, r2
 8008d50:	3304      	adds	r3, #4
 8008d52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <USBD_StdEPReq+0x2d8>
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b80      	cmp	r3, #128	; 0x80
 8008d5e:	d103      	bne.n	8008d68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e00e      	b.n	8008d86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 f87f 	bl	8009e70 <USBD_LL_IsStallEP>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbd1 	bl	8009534 <USBD_CtlSendData>
              break;
 8008d92:	e004      	b.n	8008d9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fb5b 	bl	8009452 <USBD_CtlError>
              break;
 8008d9c:	bf00      	nop
          }
          break;
 8008d9e:	e004      	b.n	8008daa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fb55 	bl	8009452 <USBD_CtlError>
          break;
 8008da8:	bf00      	nop
      }
      break;
 8008daa:	e005      	b.n	8008db8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fb4f 	bl	8009452 <USBD_CtlError>
      break;
 8008db4:	e000      	b.n	8008db8 <USBD_StdEPReq+0x330>
      break;
 8008db6:	bf00      	nop
  }

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b06      	cmp	r3, #6
 8008de6:	f200 8128 	bhi.w	800903a <USBD_GetDescriptor+0x276>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBD_GetDescriptor+0x2c>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	08008e25 	.word	0x08008e25
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	0800903b 	.word	0x0800903b
 8008e00:	0800903b 	.word	0x0800903b
 8008e04:	08008fdb 	.word	0x08008fdb
 8008e08:	08009007 	.word	0x08009007
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	7c12      	ldrb	r2, [r2, #16]
 8008e18:	f107 0108 	add.w	r1, r7, #8
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	60f8      	str	r0, [r7, #12]
      break;
 8008e22:	e112      	b.n	800904a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7c1b      	ldrb	r3, [r3, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10d      	bne.n	8008e48 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	f107 0208 	add.w	r2, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3301      	adds	r3, #1
 8008e42:	2202      	movs	r2, #2
 8008e44:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e46:	e100      	b.n	800904a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	f107 0208 	add.w	r2, r7, #8
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	2202      	movs	r2, #2
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	e0f2      	b.n	800904a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	885b      	ldrh	r3, [r3, #2]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b05      	cmp	r3, #5
 8008e6c:	f200 80ac 	bhi.w	8008fc8 <USBD_GetDescriptor+0x204>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <USBD_GetDescriptor+0xb4>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e91 	.word	0x08008e91
 8008e7c:	08008ec5 	.word	0x08008ec5
 8008e80:	08008ef9 	.word	0x08008ef9
 8008e84:	08008f2d 	.word	0x08008f2d
 8008e88:	08008f61 	.word	0x08008f61
 8008e8c:	08008f95 	.word	0x08008f95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7c12      	ldrb	r2, [r2, #16]
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb2:	e091      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 facb 	bl	8009452 <USBD_CtlError>
            err++;
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec2:	e089      	b.n	8008fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ee6:	e077      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fab1 	bl	8009452 <USBD_CtlError>
            err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ef6:	e06f      	b.n	8008fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	7c12      	ldrb	r2, [r2, #16]
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1a:	e05d      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa97 	bl	8009452 <USBD_CtlError>
            err++;
 8008f24:	7afb      	ldrb	r3, [r7, #11]
 8008f26:	3301      	adds	r3, #1
 8008f28:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2a:	e055      	b.n	8008fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7c12      	ldrb	r2, [r2, #16]
 8008f44:	f107 0108 	add.w	r1, r7, #8
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4e:	e043      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa7d 	bl	8009452 <USBD_CtlError>
            err++;
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5e:	e03b      	b.n	8008fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7c12      	ldrb	r2, [r2, #16]
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f82:	e029      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa63 	bl	8009452 <USBD_CtlError>
            err++;
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	72fb      	strb	r3, [r7, #11]
          break;
 8008f92:	e021      	b.n	8008fd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	7c12      	ldrb	r2, [r2, #16]
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb6:	e00f      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa49 	bl	8009452 <USBD_CtlError>
            err++;
 8008fc0:	7afb      	ldrb	r3, [r7, #11]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc6:	e007      	b.n	8008fd8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fa41 	bl	8009452 <USBD_CtlError>
          err++;
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008fd6:	bf00      	nop
      }
      break;
 8008fd8:	e037      	b.n	800904a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7c1b      	ldrb	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fea:	f107 0208 	add.w	r2, r7, #8
 8008fee:	4610      	mov	r0, r2
 8008ff0:	4798      	blx	r3
 8008ff2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ff4:	e029      	b.n	800904a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fa2a 	bl	8009452 <USBD_CtlError>
        err++;
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	3301      	adds	r3, #1
 8009002:	72fb      	strb	r3, [r7, #11]
      break;
 8009004:	e021      	b.n	800904a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7c1b      	ldrb	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10d      	bne.n	800902a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	f107 0208 	add.w	r2, r7, #8
 800901a:	4610      	mov	r0, r2
 800901c:	4798      	blx	r3
 800901e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	2207      	movs	r2, #7
 8009026:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009028:	e00f      	b.n	800904a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa10 	bl	8009452 <USBD_CtlError>
        err++;
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	3301      	adds	r3, #1
 8009036:	72fb      	strb	r3, [r7, #11]
      break;
 8009038:	e007      	b.n	800904a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fa08 	bl	8009452 <USBD_CtlError>
      err++;
 8009042:	7afb      	ldrb	r3, [r7, #11]
 8009044:	3301      	adds	r3, #1
 8009046:	72fb      	strb	r3, [r7, #11]
      break;
 8009048:	bf00      	nop
  }

  if (err != 0U)
 800904a:	7afb      	ldrb	r3, [r7, #11]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11e      	bne.n	800908e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	88db      	ldrh	r3, [r3, #6]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d016      	beq.n	8009086 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009058:	893b      	ldrh	r3, [r7, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00e      	beq.n	800907c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88da      	ldrh	r2, [r3, #6]
 8009062:	893b      	ldrh	r3, [r7, #8]
 8009064:	4293      	cmp	r3, r2
 8009066:	bf28      	it	cs
 8009068:	4613      	movcs	r3, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800906e:	893b      	ldrh	r3, [r7, #8]
 8009070:	461a      	mov	r2, r3
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fa5d 	bl	8009534 <USBD_CtlSendData>
 800907a:	e009      	b.n	8009090 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f9e7 	bl	8009452 <USBD_CtlError>
 8009084:	e004      	b.n	8009090 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 faae 	bl	80095e8 <USBD_CtlSendStatus>
 800908c:	e000      	b.n	8009090 <USBD_GetDescriptor+0x2cc>
    return;
 800908e:	bf00      	nop
  }
}
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop

08009098 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	889b      	ldrh	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d131      	bne.n	800910e <USBD_SetAddress+0x76>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	88db      	ldrh	r3, [r3, #6]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d12d      	bne.n	800910e <USBD_SetAddress+0x76>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	885b      	ldrh	r3, [r3, #2]
 80090b6:	2b7f      	cmp	r3, #127	; 0x7f
 80090b8:	d829      	bhi.n	800910e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d104      	bne.n	80090dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9bc 	bl	8009452 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090da:	e01d      	b.n	8009118 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	7bfa      	ldrb	r2, [r7, #15]
 80090e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 feed 	bl	8009ec8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa7a 	bl	80095e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2202      	movs	r2, #2
 80090fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009102:	e009      	b.n	8009118 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910c:	e004      	b.n	8009118 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f99e 	bl	8009452 <USBD_CtlError>
  }
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	885b      	ldrh	r3, [r3, #2]
 8009132:	b2da      	uxtb	r2, r3
 8009134:	4b4e      	ldr	r3, [pc, #312]	; (8009270 <USBD_SetConfig+0x150>)
 8009136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009138:	4b4d      	ldr	r3, [pc, #308]	; (8009270 <USBD_SetConfig+0x150>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d905      	bls.n	800914c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f985 	bl	8009452 <USBD_CtlError>
    return USBD_FAIL;
 8009148:	2303      	movs	r3, #3
 800914a:	e08c      	b.n	8009266 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b02      	cmp	r3, #2
 8009156:	d002      	beq.n	800915e <USBD_SetConfig+0x3e>
 8009158:	2b03      	cmp	r3, #3
 800915a:	d029      	beq.n	80091b0 <USBD_SetConfig+0x90>
 800915c:	e075      	b.n	800924a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800915e:	4b44      	ldr	r3, [pc, #272]	; (8009270 <USBD_SetConfig+0x150>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d020      	beq.n	80091a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009166:	4b42      	ldr	r3, [pc, #264]	; (8009270 <USBD_SetConfig+0x150>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009170:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <USBD_SetConfig+0x150>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fe ffe7 	bl	800814a <USBD_SetClassConfig>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d008      	beq.n	8009198 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f962 	bl	8009452 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009196:	e065      	b.n	8009264 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fa25 	bl	80095e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2203      	movs	r2, #3
 80091a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091a6:	e05d      	b.n	8009264 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa1d 	bl	80095e8 <USBD_CtlSendStatus>
      break;
 80091ae:	e059      	b.n	8009264 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091b0:	4b2f      	ldr	r3, [pc, #188]	; (8009270 <USBD_SetConfig+0x150>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d112      	bne.n	80091de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091c0:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <USBD_SetConfig+0x150>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ca:	4b29      	ldr	r3, [pc, #164]	; (8009270 <USBD_SetConfig+0x150>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7fe ffd6 	bl	8008182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa06 	bl	80095e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091dc:	e042      	b.n	8009264 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80091de:	4b24      	ldr	r3, [pc, #144]	; (8009270 <USBD_SetConfig+0x150>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d02a      	beq.n	8009242 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fe ffc4 	bl	8008182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091fa:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <USBD_SetConfig+0x150>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009204:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <USBD_SetConfig+0x150>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fe ff9d 	bl	800814a <USBD_SetClassConfig>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00f      	beq.n	800923a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f918 	bl	8009452 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7fe ffa9 	bl	8008182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009238:	e014      	b.n	8009264 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f9d4 	bl	80095e8 <USBD_CtlSendStatus>
      break;
 8009240:	e010      	b.n	8009264 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f9d0 	bl	80095e8 <USBD_CtlSendStatus>
      break;
 8009248:	e00c      	b.n	8009264 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f900 	bl	8009452 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009252:	4b07      	ldr	r3, [pc, #28]	; (8009270 <USBD_SetConfig+0x150>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7fe ff92 	bl	8008182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800925e:	2303      	movs	r3, #3
 8009260:	73fb      	strb	r3, [r7, #15]
      break;
 8009262:	bf00      	nop
  }

  return ret;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20000860 	.word	0x20000860

08009274 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d004      	beq.n	8009290 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8e2 	bl	8009452 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800928e:	e023      	b.n	80092d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	dc02      	bgt.n	80092a2 <USBD_GetConfig+0x2e>
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc03      	bgt.n	80092a8 <USBD_GetConfig+0x34>
 80092a0:	e015      	b.n	80092ce <USBD_GetConfig+0x5a>
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d00b      	beq.n	80092be <USBD_GetConfig+0x4a>
 80092a6:	e012      	b.n	80092ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3308      	adds	r3, #8
 80092b2:	2201      	movs	r2, #1
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f93c 	bl	8009534 <USBD_CtlSendData>
        break;
 80092bc:	e00c      	b.n	80092d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	2201      	movs	r2, #1
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f934 	bl	8009534 <USBD_CtlSendData>
        break;
 80092cc:	e004      	b.n	80092d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8be 	bl	8009452 <USBD_CtlError>
        break;
 80092d6:	bf00      	nop
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d81e      	bhi.n	8009336 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	88db      	ldrh	r3, [r3, #6]
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d004      	beq.n	800930a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8a5 	bl	8009452 <USBD_CtlError>
        break;
 8009308:	e01a      	b.n	8009340 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f043 0202 	orr.w	r2, r3, #2
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	330c      	adds	r3, #12
 800932a:	2202      	movs	r2, #2
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f900 	bl	8009534 <USBD_CtlSendData>
      break;
 8009334:	e004      	b.n	8009340 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f88a 	bl	8009452 <USBD_CtlError>
      break;
 800933e:	bf00      	nop
  }
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	885b      	ldrh	r3, [r3, #2]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d107      	bne.n	800936a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f940 	bl	80095e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009368:	e013      	b.n	8009392 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	885b      	ldrh	r3, [r3, #2]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d10b      	bne.n	800938a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	889b      	ldrh	r3, [r3, #4]
 8009376:	0a1b      	lsrs	r3, r3, #8
 8009378:	b29b      	uxth	r3, r3
 800937a:	b2da      	uxtb	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f930 	bl	80095e8 <USBD_CtlSendStatus>
}
 8009388:	e003      	b.n	8009392 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f860 	bl	8009452 <USBD_CtlError>
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d80b      	bhi.n	80093ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d10c      	bne.n	80093d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f910 	bl	80095e8 <USBD_CtlSendStatus>
      }
      break;
 80093c8:	e004      	b.n	80093d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f840 	bl	8009452 <USBD_CtlError>
      break;
 80093d2:	e000      	b.n	80093d6 <USBD_ClrFeature+0x3c>
      break;
 80093d4:	bf00      	nop
  }
}
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff fa41 	bl	8008890 <SWAPBYTE>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fa34 	bl	8008890 <SWAPBYTE>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff fa27 	bl	8008890 <SWAPBYTE>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	80da      	strh	r2, [r3, #6]
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800945c:	2180      	movs	r1, #128	; 0x80
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fcc8 	bl	8009df4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009464:	2100      	movs	r1, #0
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fcc4 	bl	8009df4 <USBD_LL_StallEP>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d036      	beq.n	80094f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800948e:	6938      	ldr	r0, [r7, #16]
 8009490:	f000 f836 	bl	8009500 <USBD_GetLen>
 8009494:	4603      	mov	r3, r0
 8009496:	3301      	adds	r3, #1
 8009498:	b29b      	uxth	r3, r3
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	4413      	add	r3, r2
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	7812      	ldrb	r2, [r2, #0]
 80094ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	3301      	adds	r3, #1
 80094b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	4413      	add	r3, r2
 80094ba:	2203      	movs	r2, #3
 80094bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	3301      	adds	r3, #1
 80094c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094c4:	e013      	b.n	80094ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	4413      	add	r3, r2
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	7812      	ldrb	r2, [r2, #0]
 80094d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	3301      	adds	r3, #1
 80094d6:	613b      	str	r3, [r7, #16]
    idx++;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	3301      	adds	r3, #1
 80094dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	4413      	add	r3, r2
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	3301      	adds	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e7      	bne.n	80094c6 <USBD_GetString+0x52>
 80094f6:	e000      	b.n	80094fa <USBD_GetString+0x86>
    return;
 80094f8:	bf00      	nop
  }
}
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009510:	e005      	b.n	800951e <USBD_GetLen+0x1e>
  {
    len++;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	3301      	adds	r3, #1
 8009516:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	3301      	adds	r3, #1
 800951c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1f5      	bne.n	8009512 <USBD_GetLen+0x12>
  }

  return len;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2202      	movs	r2, #2
 8009544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	2100      	movs	r1, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fcd3 	bl	8009f06 <USBD_LL_Transmit>

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	2100      	movs	r1, #0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 fcc2 	bl	8009f06 <USBD_LL_Transmit>

  return USBD_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2203      	movs	r2, #3
 800959c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	2100      	movs	r1, #0
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 fcc6 	bl	8009f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	2100      	movs	r1, #0
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fcb5 	bl	8009f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2204      	movs	r2, #4
 80095f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095f8:	2300      	movs	r3, #0
 80095fa:	2200      	movs	r2, #0
 80095fc:	2100      	movs	r1, #0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fc81 	bl	8009f06 <USBD_LL_Transmit>

  return USBD_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2205      	movs	r2, #5
 800961a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800961e:	2300      	movs	r3, #0
 8009620:	2200      	movs	r2, #0
 8009622:	2100      	movs	r1, #0
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fc8f 	bl	8009f48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009638:	2200      	movs	r2, #0
 800963a:	4912      	ldr	r1, [pc, #72]	; (8009684 <MX_USB_DEVICE_Init+0x50>)
 800963c:	4812      	ldr	r0, [pc, #72]	; (8009688 <MX_USB_DEVICE_Init+0x54>)
 800963e:	f7fe fd07 	bl	8008050 <USBD_Init>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009648:	f7f8 f920 	bl	800188c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800964c:	490f      	ldr	r1, [pc, #60]	; (800968c <MX_USB_DEVICE_Init+0x58>)
 800964e:	480e      	ldr	r0, [pc, #56]	; (8009688 <MX_USB_DEVICE_Init+0x54>)
 8009650:	f7fe fd2e 	bl	80080b0 <USBD_RegisterClass>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800965a:	f7f8 f917 	bl	800188c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800965e:	490c      	ldr	r1, [pc, #48]	; (8009690 <MX_USB_DEVICE_Init+0x5c>)
 8009660:	4809      	ldr	r0, [pc, #36]	; (8009688 <MX_USB_DEVICE_Init+0x54>)
 8009662:	f7fe fc65 	bl	8007f30 <USBD_CDC_RegisterInterface>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800966c:	f7f8 f90e 	bl	800188c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009670:	4805      	ldr	r0, [pc, #20]	; (8009688 <MX_USB_DEVICE_Init+0x54>)
 8009672:	f7fe fd53 	bl	800811c <USBD_Start>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800967c:	f7f8 f906 	bl	800188c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009680:	bf00      	nop
 8009682:	bd80      	pop	{r7, pc}
 8009684:	200000bc 	.word	0x200000bc
 8009688:	20000864 	.word	0x20000864
 800968c:	20000028 	.word	0x20000028
 8009690:	200000a8 	.word	0x200000a8

08009694 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009698:	2200      	movs	r2, #0
 800969a:	4905      	ldr	r1, [pc, #20]	; (80096b0 <CDC_Init_FS+0x1c>)
 800969c:	4805      	ldr	r0, [pc, #20]	; (80096b4 <CDC_Init_FS+0x20>)
 800969e:	f7fe fc61 	bl	8007f64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096a2:	4905      	ldr	r1, [pc, #20]	; (80096b8 <CDC_Init_FS+0x24>)
 80096a4:	4803      	ldr	r0, [pc, #12]	; (80096b4 <CDC_Init_FS+0x20>)
 80096a6:	f7fe fc7f 	bl	8007fa8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	20001340 	.word	0x20001340
 80096b4:	20000864 	.word	0x20000864
 80096b8:	20000b40 	.word	0x20000b40

080096bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	6039      	str	r1, [r7, #0]
 80096d6:	71fb      	strb	r3, [r7, #7]
 80096d8:	4613      	mov	r3, r2
 80096da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b23      	cmp	r3, #35	; 0x23
 80096e0:	d84a      	bhi.n	8009778 <CDC_Control_FS+0xac>
 80096e2:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <CDC_Control_FS+0x1c>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009779 	.word	0x08009779
 80096ec:	08009779 	.word	0x08009779
 80096f0:	08009779 	.word	0x08009779
 80096f4:	08009779 	.word	0x08009779
 80096f8:	08009779 	.word	0x08009779
 80096fc:	08009779 	.word	0x08009779
 8009700:	08009779 	.word	0x08009779
 8009704:	08009779 	.word	0x08009779
 8009708:	08009779 	.word	0x08009779
 800970c:	08009779 	.word	0x08009779
 8009710:	08009779 	.word	0x08009779
 8009714:	08009779 	.word	0x08009779
 8009718:	08009779 	.word	0x08009779
 800971c:	08009779 	.word	0x08009779
 8009720:	08009779 	.word	0x08009779
 8009724:	08009779 	.word	0x08009779
 8009728:	08009779 	.word	0x08009779
 800972c:	08009779 	.word	0x08009779
 8009730:	08009779 	.word	0x08009779
 8009734:	08009779 	.word	0x08009779
 8009738:	08009779 	.word	0x08009779
 800973c:	08009779 	.word	0x08009779
 8009740:	08009779 	.word	0x08009779
 8009744:	08009779 	.word	0x08009779
 8009748:	08009779 	.word	0x08009779
 800974c:	08009779 	.word	0x08009779
 8009750:	08009779 	.word	0x08009779
 8009754:	08009779 	.word	0x08009779
 8009758:	08009779 	.word	0x08009779
 800975c:	08009779 	.word	0x08009779
 8009760:	08009779 	.word	0x08009779
 8009764:	08009779 	.word	0x08009779
 8009768:	08009779 	.word	0x08009779
 800976c:	08009779 	.word	0x08009779
 8009770:	08009779 	.word	0x08009779
 8009774:	08009779 	.word	0x08009779
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009778:	bf00      	nop
  }

  return (USBD_OK);
 800977a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4805      	ldr	r0, [pc, #20]	; (80097ac <CDC_Receive_FS+0x24>)
 8009796:	f7fe fc07 	bl	8007fa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800979a:	4804      	ldr	r0, [pc, #16]	; (80097ac <CDC_Receive_FS+0x24>)
 800979c:	f7fe fc22 	bl	8007fe4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000864 	.word	0x20000864

080097b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2212      	movs	r2, #18
 80097e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097e6:	4b03      	ldr	r3, [pc, #12]	; (80097f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	200000d8 	.word	0x200000d8

080097f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2204      	movs	r2, #4
 8009808:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800980a:	4b03      	ldr	r3, [pc, #12]	; (8009818 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	200000ec 	.word	0x200000ec

0800981c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	6039      	str	r1, [r7, #0]
 8009826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d105      	bne.n	800983a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4907      	ldr	r1, [pc, #28]	; (8009850 <USBD_FS_ProductStrDescriptor+0x34>)
 8009832:	4808      	ldr	r0, [pc, #32]	; (8009854 <USBD_FS_ProductStrDescriptor+0x38>)
 8009834:	f7ff fe1e 	bl	8009474 <USBD_GetString>
 8009838:	e004      	b.n	8009844 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	4904      	ldr	r1, [pc, #16]	; (8009850 <USBD_FS_ProductStrDescriptor+0x34>)
 800983e:	4805      	ldr	r0, [pc, #20]	; (8009854 <USBD_FS_ProductStrDescriptor+0x38>)
 8009840:	f7ff fe18 	bl	8009474 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009844:	4b02      	ldr	r3, [pc, #8]	; (8009850 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20001b40 	.word	0x20001b40
 8009854:	0800e9cc 	.word	0x0800e9cc

08009858 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	6039      	str	r1, [r7, #0]
 8009862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	4904      	ldr	r1, [pc, #16]	; (8009878 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009868:	4804      	ldr	r0, [pc, #16]	; (800987c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800986a:	f7ff fe03 	bl	8009474 <USBD_GetString>
  return USBD_StrDesc;
 800986e:	4b02      	ldr	r3, [pc, #8]	; (8009878 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20001b40 	.word	0x20001b40
 800987c:	0800e9e4 	.word	0x0800e9e4

08009880 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	221a      	movs	r2, #26
 8009890:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009892:	f000 f843 	bl	800991c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009896:	4b02      	ldr	r3, [pc, #8]	; (80098a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009898:	4618      	mov	r0, r3
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	200000f0 	.word	0x200000f0

080098a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d105      	bne.n	80098c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	4907      	ldr	r1, [pc, #28]	; (80098d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098ba:	4808      	ldr	r0, [pc, #32]	; (80098dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80098bc:	f7ff fdda 	bl	8009474 <USBD_GetString>
 80098c0:	e004      	b.n	80098cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4904      	ldr	r1, [pc, #16]	; (80098d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098c6:	4805      	ldr	r0, [pc, #20]	; (80098dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80098c8:	f7ff fdd4 	bl	8009474 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098cc:	4b02      	ldr	r3, [pc, #8]	; (80098d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20001b40 	.word	0x20001b40
 80098dc:	0800e9f8 	.word	0x0800e9f8

080098e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d105      	bne.n	80098fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	4907      	ldr	r1, [pc, #28]	; (8009914 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098f6:	4808      	ldr	r0, [pc, #32]	; (8009918 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098f8:	f7ff fdbc 	bl	8009474 <USBD_GetString>
 80098fc:	e004      	b.n	8009908 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4904      	ldr	r1, [pc, #16]	; (8009914 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009902:	4805      	ldr	r0, [pc, #20]	; (8009918 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009904:	f7ff fdb6 	bl	8009474 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009908:	4b02      	ldr	r3, [pc, #8]	; (8009914 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20001b40 	.word	0x20001b40
 8009918:	0800ea04 	.word	0x0800ea04

0800991c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <Get_SerialNum+0x44>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009928:	4b0e      	ldr	r3, [pc, #56]	; (8009964 <Get_SerialNum+0x48>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800992e:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <Get_SerialNum+0x4c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4413      	add	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009942:	2208      	movs	r2, #8
 8009944:	4909      	ldr	r1, [pc, #36]	; (800996c <Get_SerialNum+0x50>)
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 f814 	bl	8009974 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800994c:	2204      	movs	r2, #4
 800994e:	4908      	ldr	r1, [pc, #32]	; (8009970 <Get_SerialNum+0x54>)
 8009950:	68b8      	ldr	r0, [r7, #8]
 8009952:	f000 f80f 	bl	8009974 <IntToUnicode>
  }
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	1fff7a10 	.word	0x1fff7a10
 8009964:	1fff7a14 	.word	0x1fff7a14
 8009968:	1fff7a18 	.word	0x1fff7a18
 800996c:	200000f2 	.word	0x200000f2
 8009970:	20000102 	.word	0x20000102

08009974 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
 800998a:	e027      	b.n	80099dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	0f1b      	lsrs	r3, r3, #28
 8009990:	2b09      	cmp	r3, #9
 8009992:	d80b      	bhi.n	80099ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	0f1b      	lsrs	r3, r3, #28
 8009998:	b2da      	uxtb	r2, r3
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4619      	mov	r1, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	440b      	add	r3, r1
 80099a4:	3230      	adds	r2, #48	; 0x30
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	e00a      	b.n	80099c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	0f1b      	lsrs	r3, r3, #28
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	4619      	mov	r1, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	440b      	add	r3, r1
 80099bc:	3237      	adds	r2, #55	; 0x37
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	3301      	adds	r3, #1
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	4413      	add	r3, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	3301      	adds	r3, #1
 80099da:	75fb      	strb	r3, [r7, #23]
 80099dc:	7dfa      	ldrb	r2, [r7, #23]
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d3d3      	bcc.n	800998c <IntToUnicode+0x18>
  }
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	; 0x28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	2200      	movs	r2, #0
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	605a      	str	r2, [r3, #4]
 8009a06:	609a      	str	r2, [r3, #8]
 8009a08:	60da      	str	r2, [r3, #12]
 8009a0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a14:	d147      	bne.n	8009aa6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
 8009a1a:	4b25      	ldr	r3, [pc, #148]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	4a24      	ldr	r2, [pc, #144]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a20:	f043 0301 	orr.w	r3, r3, #1
 8009a24:	6313      	str	r3, [r2, #48]	; 0x30
 8009a26:	4b22      	ldr	r3, [pc, #136]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4619      	mov	r1, r3
 8009a46:	481b      	ldr	r0, [pc, #108]	; (8009ab4 <HAL_PCD_MspInit+0xc0>)
 8009a48:	f7f8 fdcc 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009a4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a52:	2302      	movs	r3, #2
 8009a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a5e:	230a      	movs	r3, #10
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a62:	f107 0314 	add.w	r3, r7, #20
 8009a66:	4619      	mov	r1, r3
 8009a68:	4812      	ldr	r0, [pc, #72]	; (8009ab4 <HAL_PCD_MspInit+0xc0>)
 8009a6a:	f7f8 fdbb 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a6e:	4b10      	ldr	r3, [pc, #64]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a72:	4a0f      	ldr	r2, [pc, #60]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a78:	6353      	str	r3, [r2, #52]	; 0x34
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	4a0b      	ldr	r2, [pc, #44]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a88:	6453      	str	r3, [r2, #68]	; 0x44
 8009a8a:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <HAL_PCD_MspInit+0xbc>)
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	2043      	movs	r0, #67	; 0x43
 8009a9c:	f7f8 fd6b 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009aa0:	2043      	movs	r0, #67	; 0x43
 8009aa2:	f7f8 fd84 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009aa6:	bf00      	nop
 8009aa8:	3728      	adds	r7, #40	; 0x28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	40023800 	.word	0x40023800
 8009ab4:	40020000 	.word	0x40020000

08009ab8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f7fe fb71 	bl	80081b6 <USBD_LL_SetupStage>
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4613      	mov	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	440b      	add	r3, r1
 8009afc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	78fb      	ldrb	r3, [r7, #3]
 8009b04:	4619      	mov	r1, r3
 8009b06:	f7fe fbab 	bl	8008260 <USBD_LL_DataOutStage>
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b24:	78fa      	ldrb	r2, [r7, #3]
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	440b      	add	r3, r1
 8009b32:	334c      	adds	r3, #76	; 0x4c
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f7fe fc44 	bl	80083c6 <USBD_LL_DataInStage>
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fd78 	bl	800864a <USBD_LL_SOF>
}
 8009b5a:	bf00      	nop
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
 8009b7a:	e008      	b.n	8009b8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d102      	bne.n	8009b8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009b84:	2301      	movs	r3, #1
 8009b86:	73fb      	strb	r3, [r7, #15]
 8009b88:	e001      	b.n	8009b8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009b8a:	f7f7 fe7f 	bl	800188c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b94:	7bfa      	ldrb	r2, [r7, #15]
 8009b96:	4611      	mov	r1, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fd18 	bl	80085ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe fcc0 	bl	800852a <USBD_LL_Reset>
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe fd13 	bl	80085ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bda:	f043 0301 	orr.w	r3, r3, #1
 8009bde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d005      	beq.n	8009bf4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be8:	4b04      	ldr	r3, [pc, #16]	; (8009bfc <HAL_PCD_SuspendCallback+0x48>)
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	4a03      	ldr	r2, [pc, #12]	; (8009bfc <HAL_PCD_SuspendCallback+0x48>)
 8009bee:	f043 0306 	orr.w	r3, r3, #6
 8009bf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	e000ed00 	.word	0xe000ed00

08009c00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fd03 	bl	800861a <USBD_LL_Resume>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	4611      	mov	r1, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fd5b 	bl	80086ee <USBD_LL_IsoOUTIncomplete>
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c52:	78fa      	ldrb	r2, [r7, #3]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe fd17 	bl	800868a <USBD_LL_IsoINIncomplete>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fd6d 	bl	8008752 <USBD_LL_DevConnected>
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fd6a 	bl	8008768 <USBD_LL_DevDisconnected>
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d13c      	bne.n	8009d26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009cac:	4a20      	ldr	r2, [pc, #128]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a1e      	ldr	r2, [pc, #120]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cb8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cbc:	4b1c      	ldr	r3, [pc, #112]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009cc4:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cca:	4b19      	ldr	r3, [pc, #100]	; (8009d30 <USBD_LL_Init+0x94>)
 8009ccc:	2202      	movs	r2, #2
 8009cce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cd0:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cd8:	2202      	movs	r2, #2
 8009cda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cdc:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ce2:	4b13      	ldr	r3, [pc, #76]	; (8009d30 <USBD_LL_Init+0x94>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cfa:	480d      	ldr	r0, [pc, #52]	; (8009d30 <USBD_LL_Init+0x94>)
 8009cfc:	f7f9 fc24 	bl	8003548 <HAL_PCD_Init>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d06:	f7f7 fdc1 	bl	800188c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d0a:	2180      	movs	r1, #128	; 0x80
 8009d0c:	4808      	ldr	r0, [pc, #32]	; (8009d30 <USBD_LL_Init+0x94>)
 8009d0e:	f7fa fe7c 	bl	8004a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d12:	2240      	movs	r2, #64	; 0x40
 8009d14:	2100      	movs	r1, #0
 8009d16:	4806      	ldr	r0, [pc, #24]	; (8009d30 <USBD_LL_Init+0x94>)
 8009d18:	f7fa fe30 	bl	800497c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d1c:	2280      	movs	r2, #128	; 0x80
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4803      	ldr	r0, [pc, #12]	; (8009d30 <USBD_LL_Init+0x94>)
 8009d22:	f7fa fe2b 	bl	800497c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20001d40 	.word	0x20001d40

08009d34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f9 fd19 	bl	8003782 <HAL_PCD_Start>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f942 	bl	8009fe0 <USBD_Get_USB_Status>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	4608      	mov	r0, r1
 8009d74:	4611      	mov	r1, r2
 8009d76:	461a      	mov	r2, r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	70fb      	strb	r3, [r7, #3]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70bb      	strb	r3, [r7, #2]
 8009d80:	4613      	mov	r3, r2
 8009d82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d92:	78bb      	ldrb	r3, [r7, #2]
 8009d94:	883a      	ldrh	r2, [r7, #0]
 8009d96:	78f9      	ldrb	r1, [r7, #3]
 8009d98:	f7fa f9ea 	bl	8004170 <HAL_PCD_EP_Open>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 f91c 	bl	8009fe0 <USBD_Get_USB_Status>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fa fa33 	bl	8004240 <HAL_PCD_EP_Close>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f8fd 	bl	8009fe0 <USBD_Get_USB_Status>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fa fb0b 	bl	800442e <HAL_PCD_EP_SetStall>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f8de 	bl	8009fe0 <USBD_Get_USB_Status>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fa fb50 	bl	80044f6 <HAL_PCD_EP_ClrStall>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 f8bf 	bl	8009fe0 <USBD_Get_USB_Status>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da0b      	bge.n	8009ea4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e92:	68f9      	ldr	r1, [r7, #12]
 8009e94:	4613      	mov	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	333e      	adds	r3, #62	; 0x3e
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	e00b      	b.n	8009ebc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	4613      	mov	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009eba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fa f91d 	bl	8004126 <HAL_PCD_SetAddress>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f874 	bl	8009fe0 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
 8009f12:	460b      	mov	r3, r1
 8009f14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f24:	7af9      	ldrb	r1, [r7, #11]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f7fa fa36 	bl	800439a <HAL_PCD_EP_Transmit>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 f853 	bl	8009fe0 <USBD_Get_USB_Status>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	607a      	str	r2, [r7, #4]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	460b      	mov	r3, r1
 8009f56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f66:	7af9      	ldrb	r1, [r7, #11]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	f7fa f9b2 	bl	80042d4 <HAL_PCD_EP_Receive>
 8009f70:	4603      	mov	r3, r0
 8009f72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f832 	bl	8009fe0 <USBD_Get_USB_Status>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f80:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fa f9e2 	bl	800436a <HAL_PCD_EP_GetRxCount>
 8009fa6:	4603      	mov	r3, r0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fb8:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <USBD_static_malloc+0x18>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	2000224c 	.word	0x2000224c

08009fcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]

}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d817      	bhi.n	800a024 <USBD_Get_USB_Status+0x44>
 8009ff4:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <USBD_Get_USB_Status+0x1c>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a00d 	.word	0x0800a00d
 800a000:	0800a013 	.word	0x0800a013
 800a004:	0800a019 	.word	0x0800a019
 800a008:	0800a01f 	.word	0x0800a01f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]
    break;
 800a010:	e00b      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	73fb      	strb	r3, [r7, #15]
    break;
 800a016:	e008      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a018:	2301      	movs	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
    break;
 800a01c:	e005      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a01e:	2303      	movs	r3, #3
 800a020:	73fb      	strb	r3, [r7, #15]
    break;
 800a022:	e002      	b.n	800a02a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a024:	2303      	movs	r3, #3
 800a026:	73fb      	strb	r3, [r7, #15]
    break;
 800a028:	bf00      	nop
  }
  return usb_status;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <__errno>:
 800a038:	4b01      	ldr	r3, [pc, #4]	; (800a040 <__errno+0x8>)
 800a03a:	6818      	ldr	r0, [r3, #0]
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	2000010c 	.word	0x2000010c

0800a044 <__libc_init_array>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	4d0d      	ldr	r5, [pc, #52]	; (800a07c <__libc_init_array+0x38>)
 800a048:	4c0d      	ldr	r4, [pc, #52]	; (800a080 <__libc_init_array+0x3c>)
 800a04a:	1b64      	subs	r4, r4, r5
 800a04c:	10a4      	asrs	r4, r4, #2
 800a04e:	2600      	movs	r6, #0
 800a050:	42a6      	cmp	r6, r4
 800a052:	d109      	bne.n	800a068 <__libc_init_array+0x24>
 800a054:	4d0b      	ldr	r5, [pc, #44]	; (800a084 <__libc_init_array+0x40>)
 800a056:	4c0c      	ldr	r4, [pc, #48]	; (800a088 <__libc_init_array+0x44>)
 800a058:	f004 fc90 	bl	800e97c <_init>
 800a05c:	1b64      	subs	r4, r4, r5
 800a05e:	10a4      	asrs	r4, r4, #2
 800a060:	2600      	movs	r6, #0
 800a062:	42a6      	cmp	r6, r4
 800a064:	d105      	bne.n	800a072 <__libc_init_array+0x2e>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06c:	4798      	blx	r3
 800a06e:	3601      	adds	r6, #1
 800a070:	e7ee      	b.n	800a050 <__libc_init_array+0xc>
 800a072:	f855 3b04 	ldr.w	r3, [r5], #4
 800a076:	4798      	blx	r3
 800a078:	3601      	adds	r6, #1
 800a07a:	e7f2      	b.n	800a062 <__libc_init_array+0x1e>
 800a07c:	080103a4 	.word	0x080103a4
 800a080:	080103a4 	.word	0x080103a4
 800a084:	080103a4 	.word	0x080103a4
 800a088:	080103a8 	.word	0x080103a8

0800a08c <memcpy>:
 800a08c:	440a      	add	r2, r1
 800a08e:	4291      	cmp	r1, r2
 800a090:	f100 33ff 	add.w	r3, r0, #4294967295
 800a094:	d100      	bne.n	800a098 <memcpy+0xc>
 800a096:	4770      	bx	lr
 800a098:	b510      	push	{r4, lr}
 800a09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a2:	4291      	cmp	r1, r2
 800a0a4:	d1f9      	bne.n	800a09a <memcpy+0xe>
 800a0a6:	bd10      	pop	{r4, pc}

0800a0a8 <memmove>:
 800a0a8:	4288      	cmp	r0, r1
 800a0aa:	b510      	push	{r4, lr}
 800a0ac:	eb01 0402 	add.w	r4, r1, r2
 800a0b0:	d902      	bls.n	800a0b8 <memmove+0x10>
 800a0b2:	4284      	cmp	r4, r0
 800a0b4:	4623      	mov	r3, r4
 800a0b6:	d807      	bhi.n	800a0c8 <memmove+0x20>
 800a0b8:	1e43      	subs	r3, r0, #1
 800a0ba:	42a1      	cmp	r1, r4
 800a0bc:	d008      	beq.n	800a0d0 <memmove+0x28>
 800a0be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0c6:	e7f8      	b.n	800a0ba <memmove+0x12>
 800a0c8:	4402      	add	r2, r0
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	428a      	cmp	r2, r1
 800a0ce:	d100      	bne.n	800a0d2 <memmove+0x2a>
 800a0d0:	bd10      	pop	{r4, pc}
 800a0d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0da:	e7f7      	b.n	800a0cc <memmove+0x24>

0800a0dc <memset>:
 800a0dc:	4402      	add	r2, r0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d100      	bne.n	800a0e6 <memset+0xa>
 800a0e4:	4770      	bx	lr
 800a0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ea:	e7f9      	b.n	800a0e0 <memset+0x4>

0800a0ec <__cvt>:
 800a0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	ec55 4b10 	vmov	r4, r5, d0
 800a0f4:	2d00      	cmp	r5, #0
 800a0f6:	460e      	mov	r6, r1
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	bfbb      	ittet	lt
 800a0fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a102:	461d      	movlt	r5, r3
 800a104:	2300      	movge	r3, #0
 800a106:	232d      	movlt	r3, #45	; 0x2d
 800a108:	700b      	strb	r3, [r1, #0]
 800a10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a10c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a110:	4691      	mov	r9, r2
 800a112:	f023 0820 	bic.w	r8, r3, #32
 800a116:	bfbc      	itt	lt
 800a118:	4622      	movlt	r2, r4
 800a11a:	4614      	movlt	r4, r2
 800a11c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a120:	d005      	beq.n	800a12e <__cvt+0x42>
 800a122:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a126:	d100      	bne.n	800a12a <__cvt+0x3e>
 800a128:	3601      	adds	r6, #1
 800a12a:	2102      	movs	r1, #2
 800a12c:	e000      	b.n	800a130 <__cvt+0x44>
 800a12e:	2103      	movs	r1, #3
 800a130:	ab03      	add	r3, sp, #12
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	ab02      	add	r3, sp, #8
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	ec45 4b10 	vmov	d0, r4, r5
 800a13c:	4653      	mov	r3, sl
 800a13e:	4632      	mov	r2, r6
 800a140:	f001 fdae 	bl	800bca0 <_dtoa_r>
 800a144:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a148:	4607      	mov	r7, r0
 800a14a:	d102      	bne.n	800a152 <__cvt+0x66>
 800a14c:	f019 0f01 	tst.w	r9, #1
 800a150:	d022      	beq.n	800a198 <__cvt+0xac>
 800a152:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a156:	eb07 0906 	add.w	r9, r7, r6
 800a15a:	d110      	bne.n	800a17e <__cvt+0x92>
 800a15c:	783b      	ldrb	r3, [r7, #0]
 800a15e:	2b30      	cmp	r3, #48	; 0x30
 800a160:	d10a      	bne.n	800a178 <__cvt+0x8c>
 800a162:	2200      	movs	r2, #0
 800a164:	2300      	movs	r3, #0
 800a166:	4620      	mov	r0, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	f7f6 fcad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a16e:	b918      	cbnz	r0, 800a178 <__cvt+0x8c>
 800a170:	f1c6 0601 	rsb	r6, r6, #1
 800a174:	f8ca 6000 	str.w	r6, [sl]
 800a178:	f8da 3000 	ldr.w	r3, [sl]
 800a17c:	4499      	add	r9, r3
 800a17e:	2200      	movs	r2, #0
 800a180:	2300      	movs	r3, #0
 800a182:	4620      	mov	r0, r4
 800a184:	4629      	mov	r1, r5
 800a186:	f7f6 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a18a:	b108      	cbz	r0, 800a190 <__cvt+0xa4>
 800a18c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a190:	2230      	movs	r2, #48	; 0x30
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	454b      	cmp	r3, r9
 800a196:	d307      	bcc.n	800a1a8 <__cvt+0xbc>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a19c:	1bdb      	subs	r3, r3, r7
 800a19e:	4638      	mov	r0, r7
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	b004      	add	sp, #16
 800a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a8:	1c59      	adds	r1, r3, #1
 800a1aa:	9103      	str	r1, [sp, #12]
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	e7f0      	b.n	800a192 <__cvt+0xa6>

0800a1b0 <__exponent>:
 800a1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	bfb8      	it	lt
 800a1b8:	4249      	neglt	r1, r1
 800a1ba:	f803 2b02 	strb.w	r2, [r3], #2
 800a1be:	bfb4      	ite	lt
 800a1c0:	222d      	movlt	r2, #45	; 0x2d
 800a1c2:	222b      	movge	r2, #43	; 0x2b
 800a1c4:	2909      	cmp	r1, #9
 800a1c6:	7042      	strb	r2, [r0, #1]
 800a1c8:	dd2a      	ble.n	800a220 <__exponent+0x70>
 800a1ca:	f10d 0407 	add.w	r4, sp, #7
 800a1ce:	46a4      	mov	ip, r4
 800a1d0:	270a      	movs	r7, #10
 800a1d2:	46a6      	mov	lr, r4
 800a1d4:	460a      	mov	r2, r1
 800a1d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1da:	fb07 1516 	mls	r5, r7, r6, r1
 800a1de:	3530      	adds	r5, #48	; 0x30
 800a1e0:	2a63      	cmp	r2, #99	; 0x63
 800a1e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a1e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	dcf1      	bgt.n	800a1d2 <__exponent+0x22>
 800a1ee:	3130      	adds	r1, #48	; 0x30
 800a1f0:	f1ae 0502 	sub.w	r5, lr, #2
 800a1f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1f8:	1c44      	adds	r4, r0, #1
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	4561      	cmp	r1, ip
 800a1fe:	d30a      	bcc.n	800a216 <__exponent+0x66>
 800a200:	f10d 0209 	add.w	r2, sp, #9
 800a204:	eba2 020e 	sub.w	r2, r2, lr
 800a208:	4565      	cmp	r5, ip
 800a20a:	bf88      	it	hi
 800a20c:	2200      	movhi	r2, #0
 800a20e:	4413      	add	r3, r2
 800a210:	1a18      	subs	r0, r3, r0
 800a212:	b003      	add	sp, #12
 800a214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a21e:	e7ed      	b.n	800a1fc <__exponent+0x4c>
 800a220:	2330      	movs	r3, #48	; 0x30
 800a222:	3130      	adds	r1, #48	; 0x30
 800a224:	7083      	strb	r3, [r0, #2]
 800a226:	70c1      	strb	r1, [r0, #3]
 800a228:	1d03      	adds	r3, r0, #4
 800a22a:	e7f1      	b.n	800a210 <__exponent+0x60>

0800a22c <_printf_float>:
 800a22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a230:	ed2d 8b02 	vpush	{d8}
 800a234:	b08d      	sub	sp, #52	; 0x34
 800a236:	460c      	mov	r4, r1
 800a238:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a23c:	4616      	mov	r6, r2
 800a23e:	461f      	mov	r7, r3
 800a240:	4605      	mov	r5, r0
 800a242:	f002 fe8b 	bl	800cf5c <_localeconv_r>
 800a246:	f8d0 a000 	ldr.w	sl, [r0]
 800a24a:	4650      	mov	r0, sl
 800a24c:	f7f5 ffc0 	bl	80001d0 <strlen>
 800a250:	2300      	movs	r3, #0
 800a252:	930a      	str	r3, [sp, #40]	; 0x28
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	f8d8 3000 	ldr.w	r3, [r8]
 800a25c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a260:	3307      	adds	r3, #7
 800a262:	f023 0307 	bic.w	r3, r3, #7
 800a266:	f103 0208 	add.w	r2, r3, #8
 800a26a:	f8c8 2000 	str.w	r2, [r8]
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a276:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a27a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a27e:	9307      	str	r3, [sp, #28]
 800a280:	f8cd 8018 	str.w	r8, [sp, #24]
 800a284:	ee08 0a10 	vmov	s16, r0
 800a288:	4b9f      	ldr	r3, [pc, #636]	; (800a508 <_printf_float+0x2dc>)
 800a28a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295
 800a292:	f7f6 fc4b 	bl	8000b2c <__aeabi_dcmpun>
 800a296:	bb88      	cbnz	r0, 800a2fc <_printf_float+0xd0>
 800a298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a29c:	4b9a      	ldr	r3, [pc, #616]	; (800a508 <_printf_float+0x2dc>)
 800a29e:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a2:	f7f6 fc25 	bl	8000af0 <__aeabi_dcmple>
 800a2a6:	bb48      	cbnz	r0, 800a2fc <_printf_float+0xd0>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	f7f6 fc14 	bl	8000adc <__aeabi_dcmplt>
 800a2b4:	b110      	cbz	r0, 800a2bc <_printf_float+0x90>
 800a2b6:	232d      	movs	r3, #45	; 0x2d
 800a2b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2bc:	4b93      	ldr	r3, [pc, #588]	; (800a50c <_printf_float+0x2e0>)
 800a2be:	4894      	ldr	r0, [pc, #592]	; (800a510 <_printf_float+0x2e4>)
 800a2c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2c4:	bf94      	ite	ls
 800a2c6:	4698      	movls	r8, r3
 800a2c8:	4680      	movhi	r8, r0
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	9b05      	ldr	r3, [sp, #20]
 800a2d0:	f023 0204 	bic.w	r2, r3, #4
 800a2d4:	6022      	str	r2, [r4, #0]
 800a2d6:	f04f 0900 	mov.w	r9, #0
 800a2da:	9700      	str	r7, [sp, #0]
 800a2dc:	4633      	mov	r3, r6
 800a2de:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 f9d8 	bl	800a698 <_printf_common>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	f040 8090 	bne.w	800a40e <_printf_float+0x1e2>
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	b00d      	add	sp, #52	; 0x34
 800a2f4:	ecbd 8b02 	vpop	{d8}
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	4642      	mov	r2, r8
 800a2fe:	464b      	mov	r3, r9
 800a300:	4640      	mov	r0, r8
 800a302:	4649      	mov	r1, r9
 800a304:	f7f6 fc12 	bl	8000b2c <__aeabi_dcmpun>
 800a308:	b140      	cbz	r0, 800a31c <_printf_float+0xf0>
 800a30a:	464b      	mov	r3, r9
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bfbc      	itt	lt
 800a310:	232d      	movlt	r3, #45	; 0x2d
 800a312:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a316:	487f      	ldr	r0, [pc, #508]	; (800a514 <_printf_float+0x2e8>)
 800a318:	4b7f      	ldr	r3, [pc, #508]	; (800a518 <_printf_float+0x2ec>)
 800a31a:	e7d1      	b.n	800a2c0 <_printf_float+0x94>
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a322:	9206      	str	r2, [sp, #24]
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	d13f      	bne.n	800a3a8 <_printf_float+0x17c>
 800a328:	2306      	movs	r3, #6
 800a32a:	6063      	str	r3, [r4, #4]
 800a32c:	9b05      	ldr	r3, [sp, #20]
 800a32e:	6861      	ldr	r1, [r4, #4]
 800a330:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a334:	2300      	movs	r3, #0
 800a336:	9303      	str	r3, [sp, #12]
 800a338:	ab0a      	add	r3, sp, #40	; 0x28
 800a33a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a33e:	ab09      	add	r3, sp, #36	; 0x24
 800a340:	ec49 8b10 	vmov	d0, r8, r9
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	6022      	str	r2, [r4, #0]
 800a348:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a34c:	4628      	mov	r0, r5
 800a34e:	f7ff fecd 	bl	800a0ec <__cvt>
 800a352:	9b06      	ldr	r3, [sp, #24]
 800a354:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a356:	2b47      	cmp	r3, #71	; 0x47
 800a358:	4680      	mov	r8, r0
 800a35a:	d108      	bne.n	800a36e <_printf_float+0x142>
 800a35c:	1cc8      	adds	r0, r1, #3
 800a35e:	db02      	blt.n	800a366 <_printf_float+0x13a>
 800a360:	6863      	ldr	r3, [r4, #4]
 800a362:	4299      	cmp	r1, r3
 800a364:	dd41      	ble.n	800a3ea <_printf_float+0x1be>
 800a366:	f1ab 0b02 	sub.w	fp, fp, #2
 800a36a:	fa5f fb8b 	uxtb.w	fp, fp
 800a36e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a372:	d820      	bhi.n	800a3b6 <_printf_float+0x18a>
 800a374:	3901      	subs	r1, #1
 800a376:	465a      	mov	r2, fp
 800a378:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a37c:	9109      	str	r1, [sp, #36]	; 0x24
 800a37e:	f7ff ff17 	bl	800a1b0 <__exponent>
 800a382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a384:	1813      	adds	r3, r2, r0
 800a386:	2a01      	cmp	r2, #1
 800a388:	4681      	mov	r9, r0
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	dc02      	bgt.n	800a394 <_printf_float+0x168>
 800a38e:	6822      	ldr	r2, [r4, #0]
 800a390:	07d2      	lsls	r2, r2, #31
 800a392:	d501      	bpl.n	800a398 <_printf_float+0x16c>
 800a394:	3301      	adds	r3, #1
 800a396:	6123      	str	r3, [r4, #16]
 800a398:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d09c      	beq.n	800a2da <_printf_float+0xae>
 800a3a0:	232d      	movs	r3, #45	; 0x2d
 800a3a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a6:	e798      	b.n	800a2da <_printf_float+0xae>
 800a3a8:	9a06      	ldr	r2, [sp, #24]
 800a3aa:	2a47      	cmp	r2, #71	; 0x47
 800a3ac:	d1be      	bne.n	800a32c <_printf_float+0x100>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1bc      	bne.n	800a32c <_printf_float+0x100>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e7b9      	b.n	800a32a <_printf_float+0xfe>
 800a3b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3ba:	d118      	bne.n	800a3ee <_printf_float+0x1c2>
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	6863      	ldr	r3, [r4, #4]
 800a3c0:	dd0b      	ble.n	800a3da <_printf_float+0x1ae>
 800a3c2:	6121      	str	r1, [r4, #16]
 800a3c4:	b913      	cbnz	r3, 800a3cc <_printf_float+0x1a0>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	07d0      	lsls	r0, r2, #31
 800a3ca:	d502      	bpl.n	800a3d2 <_printf_float+0x1a6>
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	440b      	add	r3, r1
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3d4:	f04f 0900 	mov.w	r9, #0
 800a3d8:	e7de      	b.n	800a398 <_printf_float+0x16c>
 800a3da:	b913      	cbnz	r3, 800a3e2 <_printf_float+0x1b6>
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	07d2      	lsls	r2, r2, #31
 800a3e0:	d501      	bpl.n	800a3e6 <_printf_float+0x1ba>
 800a3e2:	3302      	adds	r3, #2
 800a3e4:	e7f4      	b.n	800a3d0 <_printf_float+0x1a4>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e7f2      	b.n	800a3d0 <_printf_float+0x1a4>
 800a3ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f0:	4299      	cmp	r1, r3
 800a3f2:	db05      	blt.n	800a400 <_printf_float+0x1d4>
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	6121      	str	r1, [r4, #16]
 800a3f8:	07d8      	lsls	r0, r3, #31
 800a3fa:	d5ea      	bpl.n	800a3d2 <_printf_float+0x1a6>
 800a3fc:	1c4b      	adds	r3, r1, #1
 800a3fe:	e7e7      	b.n	800a3d0 <_printf_float+0x1a4>
 800a400:	2900      	cmp	r1, #0
 800a402:	bfd4      	ite	le
 800a404:	f1c1 0202 	rsble	r2, r1, #2
 800a408:	2201      	movgt	r2, #1
 800a40a:	4413      	add	r3, r2
 800a40c:	e7e0      	b.n	800a3d0 <_printf_float+0x1a4>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	055a      	lsls	r2, r3, #21
 800a412:	d407      	bmi.n	800a424 <_printf_float+0x1f8>
 800a414:	6923      	ldr	r3, [r4, #16]
 800a416:	4642      	mov	r2, r8
 800a418:	4631      	mov	r1, r6
 800a41a:	4628      	mov	r0, r5
 800a41c:	47b8      	blx	r7
 800a41e:	3001      	adds	r0, #1
 800a420:	d12c      	bne.n	800a47c <_printf_float+0x250>
 800a422:	e764      	b.n	800a2ee <_printf_float+0xc2>
 800a424:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a428:	f240 80e0 	bls.w	800a5ec <_printf_float+0x3c0>
 800a42c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a430:	2200      	movs	r2, #0
 800a432:	2300      	movs	r3, #0
 800a434:	f7f6 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d034      	beq.n	800a4a6 <_printf_float+0x27a>
 800a43c:	4a37      	ldr	r2, [pc, #220]	; (800a51c <_printf_float+0x2f0>)
 800a43e:	2301      	movs	r3, #1
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	f43f af51 	beq.w	800a2ee <_printf_float+0xc2>
 800a44c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a450:	429a      	cmp	r2, r3
 800a452:	db02      	blt.n	800a45a <_printf_float+0x22e>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	07d8      	lsls	r0, r3, #31
 800a458:	d510      	bpl.n	800a47c <_printf_float+0x250>
 800a45a:	ee18 3a10 	vmov	r3, s16
 800a45e:	4652      	mov	r2, sl
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af41 	beq.w	800a2ee <_printf_float+0xc2>
 800a46c:	f04f 0800 	mov.w	r8, #0
 800a470:	f104 091a 	add.w	r9, r4, #26
 800a474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a476:	3b01      	subs	r3, #1
 800a478:	4543      	cmp	r3, r8
 800a47a:	dc09      	bgt.n	800a490 <_printf_float+0x264>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	079b      	lsls	r3, r3, #30
 800a480:	f100 8105 	bmi.w	800a68e <_printf_float+0x462>
 800a484:	68e0      	ldr	r0, [r4, #12]
 800a486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a488:	4298      	cmp	r0, r3
 800a48a:	bfb8      	it	lt
 800a48c:	4618      	movlt	r0, r3
 800a48e:	e730      	b.n	800a2f2 <_printf_float+0xc6>
 800a490:	2301      	movs	r3, #1
 800a492:	464a      	mov	r2, r9
 800a494:	4631      	mov	r1, r6
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	f43f af27 	beq.w	800a2ee <_printf_float+0xc2>
 800a4a0:	f108 0801 	add.w	r8, r8, #1
 800a4a4:	e7e6      	b.n	800a474 <_printf_float+0x248>
 800a4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dc39      	bgt.n	800a520 <_printf_float+0x2f4>
 800a4ac:	4a1b      	ldr	r2, [pc, #108]	; (800a51c <_printf_float+0x2f0>)
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f af19 	beq.w	800a2ee <_printf_float+0xc2>
 800a4bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	d102      	bne.n	800a4ca <_printf_float+0x29e>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	07d9      	lsls	r1, r3, #31
 800a4c8:	d5d8      	bpl.n	800a47c <_printf_float+0x250>
 800a4ca:	ee18 3a10 	vmov	r3, s16
 800a4ce:	4652      	mov	r2, sl
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af09 	beq.w	800a2ee <_printf_float+0xc2>
 800a4dc:	f04f 0900 	mov.w	r9, #0
 800a4e0:	f104 0a1a 	add.w	sl, r4, #26
 800a4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e6:	425b      	negs	r3, r3
 800a4e8:	454b      	cmp	r3, r9
 800a4ea:	dc01      	bgt.n	800a4f0 <_printf_float+0x2c4>
 800a4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ee:	e792      	b.n	800a416 <_printf_float+0x1ea>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b8      	blx	r7
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	f43f aef7 	beq.w	800a2ee <_printf_float+0xc2>
 800a500:	f109 0901 	add.w	r9, r9, #1
 800a504:	e7ee      	b.n	800a4e4 <_printf_float+0x2b8>
 800a506:	bf00      	nop
 800a508:	7fefffff 	.word	0x7fefffff
 800a50c:	0800fef8 	.word	0x0800fef8
 800a510:	0800fefc 	.word	0x0800fefc
 800a514:	0800ff04 	.word	0x0800ff04
 800a518:	0800ff00 	.word	0x0800ff00
 800a51c:	0800ff08 	.word	0x0800ff08
 800a520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a524:	429a      	cmp	r2, r3
 800a526:	bfa8      	it	ge
 800a528:	461a      	movge	r2, r3
 800a52a:	2a00      	cmp	r2, #0
 800a52c:	4691      	mov	r9, r2
 800a52e:	dc37      	bgt.n	800a5a0 <_printf_float+0x374>
 800a530:	f04f 0b00 	mov.w	fp, #0
 800a534:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a538:	f104 021a 	add.w	r2, r4, #26
 800a53c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a53e:	9305      	str	r3, [sp, #20]
 800a540:	eba3 0309 	sub.w	r3, r3, r9
 800a544:	455b      	cmp	r3, fp
 800a546:	dc33      	bgt.n	800a5b0 <_printf_float+0x384>
 800a548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a54c:	429a      	cmp	r2, r3
 800a54e:	db3b      	blt.n	800a5c8 <_printf_float+0x39c>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	07da      	lsls	r2, r3, #31
 800a554:	d438      	bmi.n	800a5c8 <_printf_float+0x39c>
 800a556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a558:	9a05      	ldr	r2, [sp, #20]
 800a55a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a55c:	1a9a      	subs	r2, r3, r2
 800a55e:	eba3 0901 	sub.w	r9, r3, r1
 800a562:	4591      	cmp	r9, r2
 800a564:	bfa8      	it	ge
 800a566:	4691      	movge	r9, r2
 800a568:	f1b9 0f00 	cmp.w	r9, #0
 800a56c:	dc35      	bgt.n	800a5da <_printf_float+0x3ae>
 800a56e:	f04f 0800 	mov.w	r8, #0
 800a572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a576:	f104 0a1a 	add.w	sl, r4, #26
 800a57a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a57e:	1a9b      	subs	r3, r3, r2
 800a580:	eba3 0309 	sub.w	r3, r3, r9
 800a584:	4543      	cmp	r3, r8
 800a586:	f77f af79 	ble.w	800a47c <_printf_float+0x250>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4652      	mov	r2, sl
 800a58e:	4631      	mov	r1, r6
 800a590:	4628      	mov	r0, r5
 800a592:	47b8      	blx	r7
 800a594:	3001      	adds	r0, #1
 800a596:	f43f aeaa 	beq.w	800a2ee <_printf_float+0xc2>
 800a59a:	f108 0801 	add.w	r8, r8, #1
 800a59e:	e7ec      	b.n	800a57a <_printf_float+0x34e>
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	d1c0      	bne.n	800a530 <_printf_float+0x304>
 800a5ae:	e69e      	b.n	800a2ee <_printf_float+0xc2>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	9205      	str	r2, [sp, #20]
 800a5b8:	47b8      	blx	r7
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	f43f ae97 	beq.w	800a2ee <_printf_float+0xc2>
 800a5c0:	9a05      	ldr	r2, [sp, #20]
 800a5c2:	f10b 0b01 	add.w	fp, fp, #1
 800a5c6:	e7b9      	b.n	800a53c <_printf_float+0x310>
 800a5c8:	ee18 3a10 	vmov	r3, s16
 800a5cc:	4652      	mov	r2, sl
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b8      	blx	r7
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1be      	bne.n	800a556 <_printf_float+0x32a>
 800a5d8:	e689      	b.n	800a2ee <_printf_float+0xc2>
 800a5da:	9a05      	ldr	r2, [sp, #20]
 800a5dc:	464b      	mov	r3, r9
 800a5de:	4442      	add	r2, r8
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	d1c1      	bne.n	800a56e <_printf_float+0x342>
 800a5ea:	e680      	b.n	800a2ee <_printf_float+0xc2>
 800a5ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ee:	2a01      	cmp	r2, #1
 800a5f0:	dc01      	bgt.n	800a5f6 <_printf_float+0x3ca>
 800a5f2:	07db      	lsls	r3, r3, #31
 800a5f4:	d538      	bpl.n	800a668 <_printf_float+0x43c>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f ae74 	beq.w	800a2ee <_printf_float+0xc2>
 800a606:	ee18 3a10 	vmov	r3, s16
 800a60a:	4652      	mov	r2, sl
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f ae6b 	beq.w	800a2ee <_printf_float+0xc2>
 800a618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a61c:	2200      	movs	r2, #0
 800a61e:	2300      	movs	r3, #0
 800a620:	f7f6 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 800a624:	b9d8      	cbnz	r0, 800a65e <_printf_float+0x432>
 800a626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a628:	f108 0201 	add.w	r2, r8, #1
 800a62c:	3b01      	subs	r3, #1
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	d10e      	bne.n	800a656 <_printf_float+0x42a>
 800a638:	e659      	b.n	800a2ee <_printf_float+0xc2>
 800a63a:	2301      	movs	r3, #1
 800a63c:	4652      	mov	r2, sl
 800a63e:	4631      	mov	r1, r6
 800a640:	4628      	mov	r0, r5
 800a642:	47b8      	blx	r7
 800a644:	3001      	adds	r0, #1
 800a646:	f43f ae52 	beq.w	800a2ee <_printf_float+0xc2>
 800a64a:	f108 0801 	add.w	r8, r8, #1
 800a64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a650:	3b01      	subs	r3, #1
 800a652:	4543      	cmp	r3, r8
 800a654:	dcf1      	bgt.n	800a63a <_printf_float+0x40e>
 800a656:	464b      	mov	r3, r9
 800a658:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a65c:	e6dc      	b.n	800a418 <_printf_float+0x1ec>
 800a65e:	f04f 0800 	mov.w	r8, #0
 800a662:	f104 0a1a 	add.w	sl, r4, #26
 800a666:	e7f2      	b.n	800a64e <_printf_float+0x422>
 800a668:	2301      	movs	r3, #1
 800a66a:	4642      	mov	r2, r8
 800a66c:	e7df      	b.n	800a62e <_printf_float+0x402>
 800a66e:	2301      	movs	r3, #1
 800a670:	464a      	mov	r2, r9
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	f43f ae38 	beq.w	800a2ee <_printf_float+0xc2>
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	68e3      	ldr	r3, [r4, #12]
 800a684:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a686:	1a5b      	subs	r3, r3, r1
 800a688:	4543      	cmp	r3, r8
 800a68a:	dcf0      	bgt.n	800a66e <_printf_float+0x442>
 800a68c:	e6fa      	b.n	800a484 <_printf_float+0x258>
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	f104 0919 	add.w	r9, r4, #25
 800a696:	e7f4      	b.n	800a682 <_printf_float+0x456>

0800a698 <_printf_common>:
 800a698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69c:	4616      	mov	r6, r2
 800a69e:	4699      	mov	r9, r3
 800a6a0:	688a      	ldr	r2, [r1, #8]
 800a6a2:	690b      	ldr	r3, [r1, #16]
 800a6a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	bfb8      	it	lt
 800a6ac:	4613      	movlt	r3, r2
 800a6ae:	6033      	str	r3, [r6, #0]
 800a6b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	b10a      	cbz	r2, 800a6be <_printf_common+0x26>
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	6033      	str	r3, [r6, #0]
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	0699      	lsls	r1, r3, #26
 800a6c2:	bf42      	ittt	mi
 800a6c4:	6833      	ldrmi	r3, [r6, #0]
 800a6c6:	3302      	addmi	r3, #2
 800a6c8:	6033      	strmi	r3, [r6, #0]
 800a6ca:	6825      	ldr	r5, [r4, #0]
 800a6cc:	f015 0506 	ands.w	r5, r5, #6
 800a6d0:	d106      	bne.n	800a6e0 <_printf_common+0x48>
 800a6d2:	f104 0a19 	add.w	sl, r4, #25
 800a6d6:	68e3      	ldr	r3, [r4, #12]
 800a6d8:	6832      	ldr	r2, [r6, #0]
 800a6da:	1a9b      	subs	r3, r3, r2
 800a6dc:	42ab      	cmp	r3, r5
 800a6de:	dc26      	bgt.n	800a72e <_printf_common+0x96>
 800a6e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6e4:	1e13      	subs	r3, r2, #0
 800a6e6:	6822      	ldr	r2, [r4, #0]
 800a6e8:	bf18      	it	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	0692      	lsls	r2, r2, #26
 800a6ee:	d42b      	bmi.n	800a748 <_printf_common+0xb0>
 800a6f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	47c0      	blx	r8
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d01e      	beq.n	800a73c <_printf_common+0xa4>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	68e5      	ldr	r5, [r4, #12]
 800a702:	6832      	ldr	r2, [r6, #0]
 800a704:	f003 0306 	and.w	r3, r3, #6
 800a708:	2b04      	cmp	r3, #4
 800a70a:	bf08      	it	eq
 800a70c:	1aad      	subeq	r5, r5, r2
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	6922      	ldr	r2, [r4, #16]
 800a712:	bf0c      	ite	eq
 800a714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a718:	2500      	movne	r5, #0
 800a71a:	4293      	cmp	r3, r2
 800a71c:	bfc4      	itt	gt
 800a71e:	1a9b      	subgt	r3, r3, r2
 800a720:	18ed      	addgt	r5, r5, r3
 800a722:	2600      	movs	r6, #0
 800a724:	341a      	adds	r4, #26
 800a726:	42b5      	cmp	r5, r6
 800a728:	d11a      	bne.n	800a760 <_printf_common+0xc8>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e008      	b.n	800a740 <_printf_common+0xa8>
 800a72e:	2301      	movs	r3, #1
 800a730:	4652      	mov	r2, sl
 800a732:	4649      	mov	r1, r9
 800a734:	4638      	mov	r0, r7
 800a736:	47c0      	blx	r8
 800a738:	3001      	adds	r0, #1
 800a73a:	d103      	bne.n	800a744 <_printf_common+0xac>
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a744:	3501      	adds	r5, #1
 800a746:	e7c6      	b.n	800a6d6 <_printf_common+0x3e>
 800a748:	18e1      	adds	r1, r4, r3
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	2030      	movs	r0, #48	; 0x30
 800a74e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a752:	4422      	add	r2, r4
 800a754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a75c:	3302      	adds	r3, #2
 800a75e:	e7c7      	b.n	800a6f0 <_printf_common+0x58>
 800a760:	2301      	movs	r3, #1
 800a762:	4622      	mov	r2, r4
 800a764:	4649      	mov	r1, r9
 800a766:	4638      	mov	r0, r7
 800a768:	47c0      	blx	r8
 800a76a:	3001      	adds	r0, #1
 800a76c:	d0e6      	beq.n	800a73c <_printf_common+0xa4>
 800a76e:	3601      	adds	r6, #1
 800a770:	e7d9      	b.n	800a726 <_printf_common+0x8e>
	...

0800a774 <_printf_i>:
 800a774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	7e0f      	ldrb	r7, [r1, #24]
 800a77a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a77c:	2f78      	cmp	r7, #120	; 0x78
 800a77e:	4691      	mov	r9, r2
 800a780:	4680      	mov	r8, r0
 800a782:	460c      	mov	r4, r1
 800a784:	469a      	mov	sl, r3
 800a786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a78a:	d807      	bhi.n	800a79c <_printf_i+0x28>
 800a78c:	2f62      	cmp	r7, #98	; 0x62
 800a78e:	d80a      	bhi.n	800a7a6 <_printf_i+0x32>
 800a790:	2f00      	cmp	r7, #0
 800a792:	f000 80d8 	beq.w	800a946 <_printf_i+0x1d2>
 800a796:	2f58      	cmp	r7, #88	; 0x58
 800a798:	f000 80a3 	beq.w	800a8e2 <_printf_i+0x16e>
 800a79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7a4:	e03a      	b.n	800a81c <_printf_i+0xa8>
 800a7a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7aa:	2b15      	cmp	r3, #21
 800a7ac:	d8f6      	bhi.n	800a79c <_printf_i+0x28>
 800a7ae:	a101      	add	r1, pc, #4	; (adr r1, 800a7b4 <_printf_i+0x40>)
 800a7b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b4:	0800a80d 	.word	0x0800a80d
 800a7b8:	0800a821 	.word	0x0800a821
 800a7bc:	0800a79d 	.word	0x0800a79d
 800a7c0:	0800a79d 	.word	0x0800a79d
 800a7c4:	0800a79d 	.word	0x0800a79d
 800a7c8:	0800a79d 	.word	0x0800a79d
 800a7cc:	0800a821 	.word	0x0800a821
 800a7d0:	0800a79d 	.word	0x0800a79d
 800a7d4:	0800a79d 	.word	0x0800a79d
 800a7d8:	0800a79d 	.word	0x0800a79d
 800a7dc:	0800a79d 	.word	0x0800a79d
 800a7e0:	0800a92d 	.word	0x0800a92d
 800a7e4:	0800a851 	.word	0x0800a851
 800a7e8:	0800a90f 	.word	0x0800a90f
 800a7ec:	0800a79d 	.word	0x0800a79d
 800a7f0:	0800a79d 	.word	0x0800a79d
 800a7f4:	0800a94f 	.word	0x0800a94f
 800a7f8:	0800a79d 	.word	0x0800a79d
 800a7fc:	0800a851 	.word	0x0800a851
 800a800:	0800a79d 	.word	0x0800a79d
 800a804:	0800a79d 	.word	0x0800a79d
 800a808:	0800a917 	.word	0x0800a917
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	1d1a      	adds	r2, r3, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	602a      	str	r2, [r5, #0]
 800a814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a81c:	2301      	movs	r3, #1
 800a81e:	e0a3      	b.n	800a968 <_printf_i+0x1f4>
 800a820:	6820      	ldr	r0, [r4, #0]
 800a822:	6829      	ldr	r1, [r5, #0]
 800a824:	0606      	lsls	r6, r0, #24
 800a826:	f101 0304 	add.w	r3, r1, #4
 800a82a:	d50a      	bpl.n	800a842 <_printf_i+0xce>
 800a82c:	680e      	ldr	r6, [r1, #0]
 800a82e:	602b      	str	r3, [r5, #0]
 800a830:	2e00      	cmp	r6, #0
 800a832:	da03      	bge.n	800a83c <_printf_i+0xc8>
 800a834:	232d      	movs	r3, #45	; 0x2d
 800a836:	4276      	negs	r6, r6
 800a838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a83c:	485e      	ldr	r0, [pc, #376]	; (800a9b8 <_printf_i+0x244>)
 800a83e:	230a      	movs	r3, #10
 800a840:	e019      	b.n	800a876 <_printf_i+0x102>
 800a842:	680e      	ldr	r6, [r1, #0]
 800a844:	602b      	str	r3, [r5, #0]
 800a846:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a84a:	bf18      	it	ne
 800a84c:	b236      	sxthne	r6, r6
 800a84e:	e7ef      	b.n	800a830 <_printf_i+0xbc>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	1d19      	adds	r1, r3, #4
 800a856:	6029      	str	r1, [r5, #0]
 800a858:	0601      	lsls	r1, r0, #24
 800a85a:	d501      	bpl.n	800a860 <_printf_i+0xec>
 800a85c:	681e      	ldr	r6, [r3, #0]
 800a85e:	e002      	b.n	800a866 <_printf_i+0xf2>
 800a860:	0646      	lsls	r6, r0, #25
 800a862:	d5fb      	bpl.n	800a85c <_printf_i+0xe8>
 800a864:	881e      	ldrh	r6, [r3, #0]
 800a866:	4854      	ldr	r0, [pc, #336]	; (800a9b8 <_printf_i+0x244>)
 800a868:	2f6f      	cmp	r7, #111	; 0x6f
 800a86a:	bf0c      	ite	eq
 800a86c:	2308      	moveq	r3, #8
 800a86e:	230a      	movne	r3, #10
 800a870:	2100      	movs	r1, #0
 800a872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a876:	6865      	ldr	r5, [r4, #4]
 800a878:	60a5      	str	r5, [r4, #8]
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	bfa2      	ittt	ge
 800a87e:	6821      	ldrge	r1, [r4, #0]
 800a880:	f021 0104 	bicge.w	r1, r1, #4
 800a884:	6021      	strge	r1, [r4, #0]
 800a886:	b90e      	cbnz	r6, 800a88c <_printf_i+0x118>
 800a888:	2d00      	cmp	r5, #0
 800a88a:	d04d      	beq.n	800a928 <_printf_i+0x1b4>
 800a88c:	4615      	mov	r5, r2
 800a88e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a892:	fb03 6711 	mls	r7, r3, r1, r6
 800a896:	5dc7      	ldrb	r7, [r0, r7]
 800a898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a89c:	4637      	mov	r7, r6
 800a89e:	42bb      	cmp	r3, r7
 800a8a0:	460e      	mov	r6, r1
 800a8a2:	d9f4      	bls.n	800a88e <_printf_i+0x11a>
 800a8a4:	2b08      	cmp	r3, #8
 800a8a6:	d10b      	bne.n	800a8c0 <_printf_i+0x14c>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	07de      	lsls	r6, r3, #31
 800a8ac:	d508      	bpl.n	800a8c0 <_printf_i+0x14c>
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	6861      	ldr	r1, [r4, #4]
 800a8b2:	4299      	cmp	r1, r3
 800a8b4:	bfde      	ittt	le
 800a8b6:	2330      	movle	r3, #48	; 0x30
 800a8b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8c0:	1b52      	subs	r2, r2, r5
 800a8c2:	6122      	str	r2, [r4, #16]
 800a8c4:	f8cd a000 	str.w	sl, [sp]
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	aa03      	add	r2, sp, #12
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f7ff fee2 	bl	800a698 <_printf_common>
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d14c      	bne.n	800a972 <_printf_i+0x1fe>
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	b004      	add	sp, #16
 800a8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e2:	4835      	ldr	r0, [pc, #212]	; (800a9b8 <_printf_i+0x244>)
 800a8e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8e8:	6829      	ldr	r1, [r5, #0]
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8f0:	6029      	str	r1, [r5, #0]
 800a8f2:	061d      	lsls	r5, r3, #24
 800a8f4:	d514      	bpl.n	800a920 <_printf_i+0x1ac>
 800a8f6:	07df      	lsls	r7, r3, #31
 800a8f8:	bf44      	itt	mi
 800a8fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a8fe:	6023      	strmi	r3, [r4, #0]
 800a900:	b91e      	cbnz	r6, 800a90a <_printf_i+0x196>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	f023 0320 	bic.w	r3, r3, #32
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	2310      	movs	r3, #16
 800a90c:	e7b0      	b.n	800a870 <_printf_i+0xfc>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	f043 0320 	orr.w	r3, r3, #32
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	2378      	movs	r3, #120	; 0x78
 800a918:	4828      	ldr	r0, [pc, #160]	; (800a9bc <_printf_i+0x248>)
 800a91a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a91e:	e7e3      	b.n	800a8e8 <_printf_i+0x174>
 800a920:	0659      	lsls	r1, r3, #25
 800a922:	bf48      	it	mi
 800a924:	b2b6      	uxthmi	r6, r6
 800a926:	e7e6      	b.n	800a8f6 <_printf_i+0x182>
 800a928:	4615      	mov	r5, r2
 800a92a:	e7bb      	b.n	800a8a4 <_printf_i+0x130>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	6826      	ldr	r6, [r4, #0]
 800a930:	6961      	ldr	r1, [r4, #20]
 800a932:	1d18      	adds	r0, r3, #4
 800a934:	6028      	str	r0, [r5, #0]
 800a936:	0635      	lsls	r5, r6, #24
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	d501      	bpl.n	800a940 <_printf_i+0x1cc>
 800a93c:	6019      	str	r1, [r3, #0]
 800a93e:	e002      	b.n	800a946 <_printf_i+0x1d2>
 800a940:	0670      	lsls	r0, r6, #25
 800a942:	d5fb      	bpl.n	800a93c <_printf_i+0x1c8>
 800a944:	8019      	strh	r1, [r3, #0]
 800a946:	2300      	movs	r3, #0
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	4615      	mov	r5, r2
 800a94c:	e7ba      	b.n	800a8c4 <_printf_i+0x150>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	1d1a      	adds	r2, r3, #4
 800a952:	602a      	str	r2, [r5, #0]
 800a954:	681d      	ldr	r5, [r3, #0]
 800a956:	6862      	ldr	r2, [r4, #4]
 800a958:	2100      	movs	r1, #0
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7f5 fc40 	bl	80001e0 <memchr>
 800a960:	b108      	cbz	r0, 800a966 <_printf_i+0x1f2>
 800a962:	1b40      	subs	r0, r0, r5
 800a964:	6060      	str	r0, [r4, #4]
 800a966:	6863      	ldr	r3, [r4, #4]
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	2300      	movs	r3, #0
 800a96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a970:	e7a8      	b.n	800a8c4 <_printf_i+0x150>
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	462a      	mov	r2, r5
 800a976:	4649      	mov	r1, r9
 800a978:	4640      	mov	r0, r8
 800a97a:	47d0      	blx	sl
 800a97c:	3001      	adds	r0, #1
 800a97e:	d0ab      	beq.n	800a8d8 <_printf_i+0x164>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	079b      	lsls	r3, r3, #30
 800a984:	d413      	bmi.n	800a9ae <_printf_i+0x23a>
 800a986:	68e0      	ldr	r0, [r4, #12]
 800a988:	9b03      	ldr	r3, [sp, #12]
 800a98a:	4298      	cmp	r0, r3
 800a98c:	bfb8      	it	lt
 800a98e:	4618      	movlt	r0, r3
 800a990:	e7a4      	b.n	800a8dc <_printf_i+0x168>
 800a992:	2301      	movs	r3, #1
 800a994:	4632      	mov	r2, r6
 800a996:	4649      	mov	r1, r9
 800a998:	4640      	mov	r0, r8
 800a99a:	47d0      	blx	sl
 800a99c:	3001      	adds	r0, #1
 800a99e:	d09b      	beq.n	800a8d8 <_printf_i+0x164>
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	68e3      	ldr	r3, [r4, #12]
 800a9a4:	9903      	ldr	r1, [sp, #12]
 800a9a6:	1a5b      	subs	r3, r3, r1
 800a9a8:	42ab      	cmp	r3, r5
 800a9aa:	dcf2      	bgt.n	800a992 <_printf_i+0x21e>
 800a9ac:	e7eb      	b.n	800a986 <_printf_i+0x212>
 800a9ae:	2500      	movs	r5, #0
 800a9b0:	f104 0619 	add.w	r6, r4, #25
 800a9b4:	e7f5      	b.n	800a9a2 <_printf_i+0x22e>
 800a9b6:	bf00      	nop
 800a9b8:	0800ff0a 	.word	0x0800ff0a
 800a9bc:	0800ff1b 	.word	0x0800ff1b

0800a9c0 <_scanf_float>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	b087      	sub	sp, #28
 800a9c6:	4617      	mov	r7, r2
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	688b      	ldr	r3, [r1, #8]
 800a9cc:	1e5a      	subs	r2, r3, #1
 800a9ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9d2:	bf83      	ittte	hi
 800a9d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9d8:	195b      	addhi	r3, r3, r5
 800a9da:	9302      	strhi	r3, [sp, #8]
 800a9dc:	2300      	movls	r3, #0
 800a9de:	bf86      	itte	hi
 800a9e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a9e4:	608b      	strhi	r3, [r1, #8]
 800a9e6:	9302      	strls	r3, [sp, #8]
 800a9e8:	680b      	ldr	r3, [r1, #0]
 800a9ea:	468b      	mov	fp, r1
 800a9ec:	2500      	movs	r5, #0
 800a9ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a9f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800a9f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	465e      	mov	r6, fp
 800aa00:	46aa      	mov	sl, r5
 800aa02:	46a9      	mov	r9, r5
 800aa04:	9501      	str	r5, [sp, #4]
 800aa06:	68a2      	ldr	r2, [r4, #8]
 800aa08:	b152      	cbz	r2, 800aa20 <_scanf_float+0x60>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b4e      	cmp	r3, #78	; 0x4e
 800aa10:	d864      	bhi.n	800aadc <_scanf_float+0x11c>
 800aa12:	2b40      	cmp	r3, #64	; 0x40
 800aa14:	d83c      	bhi.n	800aa90 <_scanf_float+0xd0>
 800aa16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa1a:	b2c8      	uxtb	r0, r1
 800aa1c:	280e      	cmp	r0, #14
 800aa1e:	d93a      	bls.n	800aa96 <_scanf_float+0xd6>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	d003      	beq.n	800aa2e <_scanf_float+0x6e>
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa32:	f1ba 0f01 	cmp.w	sl, #1
 800aa36:	f200 8113 	bhi.w	800ac60 <_scanf_float+0x2a0>
 800aa3a:	455e      	cmp	r6, fp
 800aa3c:	f200 8105 	bhi.w	800ac4a <_scanf_float+0x28a>
 800aa40:	2501      	movs	r5, #1
 800aa42:	4628      	mov	r0, r5
 800aa44:	b007      	add	sp, #28
 800aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aa4e:	2a0d      	cmp	r2, #13
 800aa50:	d8e6      	bhi.n	800aa20 <_scanf_float+0x60>
 800aa52:	a101      	add	r1, pc, #4	; (adr r1, 800aa58 <_scanf_float+0x98>)
 800aa54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa58:	0800ab97 	.word	0x0800ab97
 800aa5c:	0800aa21 	.word	0x0800aa21
 800aa60:	0800aa21 	.word	0x0800aa21
 800aa64:	0800aa21 	.word	0x0800aa21
 800aa68:	0800abf7 	.word	0x0800abf7
 800aa6c:	0800abcf 	.word	0x0800abcf
 800aa70:	0800aa21 	.word	0x0800aa21
 800aa74:	0800aa21 	.word	0x0800aa21
 800aa78:	0800aba5 	.word	0x0800aba5
 800aa7c:	0800aa21 	.word	0x0800aa21
 800aa80:	0800aa21 	.word	0x0800aa21
 800aa84:	0800aa21 	.word	0x0800aa21
 800aa88:	0800aa21 	.word	0x0800aa21
 800aa8c:	0800ab5d 	.word	0x0800ab5d
 800aa90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aa94:	e7db      	b.n	800aa4e <_scanf_float+0x8e>
 800aa96:	290e      	cmp	r1, #14
 800aa98:	d8c2      	bhi.n	800aa20 <_scanf_float+0x60>
 800aa9a:	a001      	add	r0, pc, #4	; (adr r0, 800aaa0 <_scanf_float+0xe0>)
 800aa9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aaa0:	0800ab4f 	.word	0x0800ab4f
 800aaa4:	0800aa21 	.word	0x0800aa21
 800aaa8:	0800ab4f 	.word	0x0800ab4f
 800aaac:	0800abe3 	.word	0x0800abe3
 800aab0:	0800aa21 	.word	0x0800aa21
 800aab4:	0800aafd 	.word	0x0800aafd
 800aab8:	0800ab39 	.word	0x0800ab39
 800aabc:	0800ab39 	.word	0x0800ab39
 800aac0:	0800ab39 	.word	0x0800ab39
 800aac4:	0800ab39 	.word	0x0800ab39
 800aac8:	0800ab39 	.word	0x0800ab39
 800aacc:	0800ab39 	.word	0x0800ab39
 800aad0:	0800ab39 	.word	0x0800ab39
 800aad4:	0800ab39 	.word	0x0800ab39
 800aad8:	0800ab39 	.word	0x0800ab39
 800aadc:	2b6e      	cmp	r3, #110	; 0x6e
 800aade:	d809      	bhi.n	800aaf4 <_scanf_float+0x134>
 800aae0:	2b60      	cmp	r3, #96	; 0x60
 800aae2:	d8b2      	bhi.n	800aa4a <_scanf_float+0x8a>
 800aae4:	2b54      	cmp	r3, #84	; 0x54
 800aae6:	d077      	beq.n	800abd8 <_scanf_float+0x218>
 800aae8:	2b59      	cmp	r3, #89	; 0x59
 800aaea:	d199      	bne.n	800aa20 <_scanf_float+0x60>
 800aaec:	2d07      	cmp	r5, #7
 800aaee:	d197      	bne.n	800aa20 <_scanf_float+0x60>
 800aaf0:	2508      	movs	r5, #8
 800aaf2:	e029      	b.n	800ab48 <_scanf_float+0x188>
 800aaf4:	2b74      	cmp	r3, #116	; 0x74
 800aaf6:	d06f      	beq.n	800abd8 <_scanf_float+0x218>
 800aaf8:	2b79      	cmp	r3, #121	; 0x79
 800aafa:	e7f6      	b.n	800aaea <_scanf_float+0x12a>
 800aafc:	6821      	ldr	r1, [r4, #0]
 800aafe:	05c8      	lsls	r0, r1, #23
 800ab00:	d51a      	bpl.n	800ab38 <_scanf_float+0x178>
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab08:	6021      	str	r1, [r4, #0]
 800ab0a:	f109 0901 	add.w	r9, r9, #1
 800ab0e:	b11b      	cbz	r3, 800ab18 <_scanf_float+0x158>
 800ab10:	3b01      	subs	r3, #1
 800ab12:	3201      	adds	r2, #1
 800ab14:	9302      	str	r3, [sp, #8]
 800ab16:	60a2      	str	r2, [r4, #8]
 800ab18:	68a3      	ldr	r3, [r4, #8]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	60a3      	str	r3, [r4, #8]
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	3301      	adds	r3, #1
 800ab22:	6123      	str	r3, [r4, #16]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	607b      	str	r3, [r7, #4]
 800ab2c:	f340 8084 	ble.w	800ac38 <_scanf_float+0x278>
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	603b      	str	r3, [r7, #0]
 800ab36:	e766      	b.n	800aa06 <_scanf_float+0x46>
 800ab38:	eb1a 0f05 	cmn.w	sl, r5
 800ab3c:	f47f af70 	bne.w	800aa20 <_scanf_float+0x60>
 800ab40:	6822      	ldr	r2, [r4, #0]
 800ab42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ab46:	6022      	str	r2, [r4, #0]
 800ab48:	f806 3b01 	strb.w	r3, [r6], #1
 800ab4c:	e7e4      	b.n	800ab18 <_scanf_float+0x158>
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	0610      	lsls	r0, r2, #24
 800ab52:	f57f af65 	bpl.w	800aa20 <_scanf_float+0x60>
 800ab56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab5a:	e7f4      	b.n	800ab46 <_scanf_float+0x186>
 800ab5c:	f1ba 0f00 	cmp.w	sl, #0
 800ab60:	d10e      	bne.n	800ab80 <_scanf_float+0x1c0>
 800ab62:	f1b9 0f00 	cmp.w	r9, #0
 800ab66:	d10e      	bne.n	800ab86 <_scanf_float+0x1c6>
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab72:	d108      	bne.n	800ab86 <_scanf_float+0x1c6>
 800ab74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab78:	6022      	str	r2, [r4, #0]
 800ab7a:	f04f 0a01 	mov.w	sl, #1
 800ab7e:	e7e3      	b.n	800ab48 <_scanf_float+0x188>
 800ab80:	f1ba 0f02 	cmp.w	sl, #2
 800ab84:	d055      	beq.n	800ac32 <_scanf_float+0x272>
 800ab86:	2d01      	cmp	r5, #1
 800ab88:	d002      	beq.n	800ab90 <_scanf_float+0x1d0>
 800ab8a:	2d04      	cmp	r5, #4
 800ab8c:	f47f af48 	bne.w	800aa20 <_scanf_float+0x60>
 800ab90:	3501      	adds	r5, #1
 800ab92:	b2ed      	uxtb	r5, r5
 800ab94:	e7d8      	b.n	800ab48 <_scanf_float+0x188>
 800ab96:	f1ba 0f01 	cmp.w	sl, #1
 800ab9a:	f47f af41 	bne.w	800aa20 <_scanf_float+0x60>
 800ab9e:	f04f 0a02 	mov.w	sl, #2
 800aba2:	e7d1      	b.n	800ab48 <_scanf_float+0x188>
 800aba4:	b97d      	cbnz	r5, 800abc6 <_scanf_float+0x206>
 800aba6:	f1b9 0f00 	cmp.w	r9, #0
 800abaa:	f47f af3c 	bne.w	800aa26 <_scanf_float+0x66>
 800abae:	6822      	ldr	r2, [r4, #0]
 800abb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abb8:	f47f af39 	bne.w	800aa2e <_scanf_float+0x6e>
 800abbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	2501      	movs	r5, #1
 800abc4:	e7c0      	b.n	800ab48 <_scanf_float+0x188>
 800abc6:	2d03      	cmp	r5, #3
 800abc8:	d0e2      	beq.n	800ab90 <_scanf_float+0x1d0>
 800abca:	2d05      	cmp	r5, #5
 800abcc:	e7de      	b.n	800ab8c <_scanf_float+0x1cc>
 800abce:	2d02      	cmp	r5, #2
 800abd0:	f47f af26 	bne.w	800aa20 <_scanf_float+0x60>
 800abd4:	2503      	movs	r5, #3
 800abd6:	e7b7      	b.n	800ab48 <_scanf_float+0x188>
 800abd8:	2d06      	cmp	r5, #6
 800abda:	f47f af21 	bne.w	800aa20 <_scanf_float+0x60>
 800abde:	2507      	movs	r5, #7
 800abe0:	e7b2      	b.n	800ab48 <_scanf_float+0x188>
 800abe2:	6822      	ldr	r2, [r4, #0]
 800abe4:	0591      	lsls	r1, r2, #22
 800abe6:	f57f af1b 	bpl.w	800aa20 <_scanf_float+0x60>
 800abea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800abee:	6022      	str	r2, [r4, #0]
 800abf0:	f8cd 9004 	str.w	r9, [sp, #4]
 800abf4:	e7a8      	b.n	800ab48 <_scanf_float+0x188>
 800abf6:	6822      	ldr	r2, [r4, #0]
 800abf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800abfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac00:	d006      	beq.n	800ac10 <_scanf_float+0x250>
 800ac02:	0550      	lsls	r0, r2, #21
 800ac04:	f57f af0c 	bpl.w	800aa20 <_scanf_float+0x60>
 800ac08:	f1b9 0f00 	cmp.w	r9, #0
 800ac0c:	f43f af0f 	beq.w	800aa2e <_scanf_float+0x6e>
 800ac10:	0591      	lsls	r1, r2, #22
 800ac12:	bf58      	it	pl
 800ac14:	9901      	ldrpl	r1, [sp, #4]
 800ac16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac1a:	bf58      	it	pl
 800ac1c:	eba9 0101 	subpl.w	r1, r9, r1
 800ac20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac24:	bf58      	it	pl
 800ac26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac2a:	6022      	str	r2, [r4, #0]
 800ac2c:	f04f 0900 	mov.w	r9, #0
 800ac30:	e78a      	b.n	800ab48 <_scanf_float+0x188>
 800ac32:	f04f 0a03 	mov.w	sl, #3
 800ac36:	e787      	b.n	800ab48 <_scanf_float+0x188>
 800ac38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	4640      	mov	r0, r8
 800ac40:	4798      	blx	r3
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f43f aedf 	beq.w	800aa06 <_scanf_float+0x46>
 800ac48:	e6ea      	b.n	800aa20 <_scanf_float+0x60>
 800ac4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac52:	463a      	mov	r2, r7
 800ac54:	4640      	mov	r0, r8
 800ac56:	4798      	blx	r3
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	6123      	str	r3, [r4, #16]
 800ac5e:	e6ec      	b.n	800aa3a <_scanf_float+0x7a>
 800ac60:	1e6b      	subs	r3, r5, #1
 800ac62:	2b06      	cmp	r3, #6
 800ac64:	d825      	bhi.n	800acb2 <_scanf_float+0x2f2>
 800ac66:	2d02      	cmp	r5, #2
 800ac68:	d836      	bhi.n	800acd8 <_scanf_float+0x318>
 800ac6a:	455e      	cmp	r6, fp
 800ac6c:	f67f aee8 	bls.w	800aa40 <_scanf_float+0x80>
 800ac70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac78:	463a      	mov	r2, r7
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4798      	blx	r3
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	6123      	str	r3, [r4, #16]
 800ac84:	e7f1      	b.n	800ac6a <_scanf_float+0x2aa>
 800ac86:	9802      	ldr	r0, [sp, #8]
 800ac88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ac90:	9002      	str	r0, [sp, #8]
 800ac92:	463a      	mov	r2, r7
 800ac94:	4640      	mov	r0, r8
 800ac96:	4798      	blx	r3
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aca2:	fa5f fa8a 	uxtb.w	sl, sl
 800aca6:	f1ba 0f02 	cmp.w	sl, #2
 800acaa:	d1ec      	bne.n	800ac86 <_scanf_float+0x2c6>
 800acac:	3d03      	subs	r5, #3
 800acae:	b2ed      	uxtb	r5, r5
 800acb0:	1b76      	subs	r6, r6, r5
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	05da      	lsls	r2, r3, #23
 800acb6:	d52f      	bpl.n	800ad18 <_scanf_float+0x358>
 800acb8:	055b      	lsls	r3, r3, #21
 800acba:	d510      	bpl.n	800acde <_scanf_float+0x31e>
 800acbc:	455e      	cmp	r6, fp
 800acbe:	f67f aebf 	bls.w	800aa40 <_scanf_float+0x80>
 800acc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acca:	463a      	mov	r2, r7
 800accc:	4640      	mov	r0, r8
 800acce:	4798      	blx	r3
 800acd0:	6923      	ldr	r3, [r4, #16]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	e7f1      	b.n	800acbc <_scanf_float+0x2fc>
 800acd8:	46aa      	mov	sl, r5
 800acda:	9602      	str	r6, [sp, #8]
 800acdc:	e7df      	b.n	800ac9e <_scanf_float+0x2de>
 800acde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ace2:	6923      	ldr	r3, [r4, #16]
 800ace4:	2965      	cmp	r1, #101	; 0x65
 800ace6:	f103 33ff 	add.w	r3, r3, #4294967295
 800acea:	f106 35ff 	add.w	r5, r6, #4294967295
 800acee:	6123      	str	r3, [r4, #16]
 800acf0:	d00c      	beq.n	800ad0c <_scanf_float+0x34c>
 800acf2:	2945      	cmp	r1, #69	; 0x45
 800acf4:	d00a      	beq.n	800ad0c <_scanf_float+0x34c>
 800acf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acfa:	463a      	mov	r2, r7
 800acfc:	4640      	mov	r0, r8
 800acfe:	4798      	blx	r3
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	1eb5      	subs	r5, r6, #2
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad10:	463a      	mov	r2, r7
 800ad12:	4640      	mov	r0, r8
 800ad14:	4798      	blx	r3
 800ad16:	462e      	mov	r6, r5
 800ad18:	6825      	ldr	r5, [r4, #0]
 800ad1a:	f015 0510 	ands.w	r5, r5, #16
 800ad1e:	d159      	bne.n	800add4 <_scanf_float+0x414>
 800ad20:	7035      	strb	r5, [r6, #0]
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad2c:	d11b      	bne.n	800ad66 <_scanf_float+0x3a6>
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	454b      	cmp	r3, r9
 800ad32:	eba3 0209 	sub.w	r2, r3, r9
 800ad36:	d123      	bne.n	800ad80 <_scanf_float+0x3c0>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4659      	mov	r1, fp
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	f000 fe99 	bl	800ba74 <_strtod_r>
 800ad42:	6822      	ldr	r2, [r4, #0]
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	f012 0f02 	tst.w	r2, #2
 800ad4a:	ec57 6b10 	vmov	r6, r7, d0
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	d021      	beq.n	800ad96 <_scanf_float+0x3d6>
 800ad52:	9903      	ldr	r1, [sp, #12]
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	600a      	str	r2, [r1, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	e9c3 6700 	strd	r6, r7, [r3]
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	3301      	adds	r3, #1
 800ad62:	60e3      	str	r3, [r4, #12]
 800ad64:	e66d      	b.n	800aa42 <_scanf_float+0x82>
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0e5      	beq.n	800ad38 <_scanf_float+0x378>
 800ad6c:	9905      	ldr	r1, [sp, #20]
 800ad6e:	230a      	movs	r3, #10
 800ad70:	462a      	mov	r2, r5
 800ad72:	3101      	adds	r1, #1
 800ad74:	4640      	mov	r0, r8
 800ad76:	f000 ff05 	bl	800bb84 <_strtol_r>
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	9e05      	ldr	r6, [sp, #20]
 800ad7e:	1ac2      	subs	r2, r0, r3
 800ad80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ad84:	429e      	cmp	r6, r3
 800ad86:	bf28      	it	cs
 800ad88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ad8c:	4912      	ldr	r1, [pc, #72]	; (800add8 <_scanf_float+0x418>)
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f000 f82c 	bl	800adec <siprintf>
 800ad94:	e7d0      	b.n	800ad38 <_scanf_float+0x378>
 800ad96:	9903      	ldr	r1, [sp, #12]
 800ad98:	f012 0f04 	tst.w	r2, #4
 800ad9c:	f103 0204 	add.w	r2, r3, #4
 800ada0:	600a      	str	r2, [r1, #0]
 800ada2:	d1d9      	bne.n	800ad58 <_scanf_float+0x398>
 800ada4:	f8d3 8000 	ldr.w	r8, [r3]
 800ada8:	ee10 2a10 	vmov	r2, s0
 800adac:	ee10 0a10 	vmov	r0, s0
 800adb0:	463b      	mov	r3, r7
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 feba 	bl	8000b2c <__aeabi_dcmpun>
 800adb8:	b128      	cbz	r0, 800adc6 <_scanf_float+0x406>
 800adba:	4808      	ldr	r0, [pc, #32]	; (800addc <_scanf_float+0x41c>)
 800adbc:	f000 f810 	bl	800ade0 <nanf>
 800adc0:	ed88 0a00 	vstr	s0, [r8]
 800adc4:	e7cb      	b.n	800ad5e <_scanf_float+0x39e>
 800adc6:	4630      	mov	r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	f7f5 ff0d 	bl	8000be8 <__aeabi_d2f>
 800adce:	f8c8 0000 	str.w	r0, [r8]
 800add2:	e7c4      	b.n	800ad5e <_scanf_float+0x39e>
 800add4:	2500      	movs	r5, #0
 800add6:	e634      	b.n	800aa42 <_scanf_float+0x82>
 800add8:	0800ff2c 	.word	0x0800ff2c
 800addc:	08010338 	.word	0x08010338

0800ade0 <nanf>:
 800ade0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ade8 <nanf+0x8>
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	7fc00000 	.word	0x7fc00000

0800adec <siprintf>:
 800adec:	b40e      	push	{r1, r2, r3}
 800adee:	b500      	push	{lr}
 800adf0:	b09c      	sub	sp, #112	; 0x70
 800adf2:	ab1d      	add	r3, sp, #116	; 0x74
 800adf4:	9002      	str	r0, [sp, #8]
 800adf6:	9006      	str	r0, [sp, #24]
 800adf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800adfc:	4809      	ldr	r0, [pc, #36]	; (800ae24 <siprintf+0x38>)
 800adfe:	9107      	str	r1, [sp, #28]
 800ae00:	9104      	str	r1, [sp, #16]
 800ae02:	4909      	ldr	r1, [pc, #36]	; (800ae28 <siprintf+0x3c>)
 800ae04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae08:	9105      	str	r1, [sp, #20]
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	a902      	add	r1, sp, #8
 800ae10:	f002 fed6 	bl	800dbc0 <_svfiprintf_r>
 800ae14:	9b02      	ldr	r3, [sp, #8]
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	b01c      	add	sp, #112	; 0x70
 800ae1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae20:	b003      	add	sp, #12
 800ae22:	4770      	bx	lr
 800ae24:	2000010c 	.word	0x2000010c
 800ae28:	ffff0208 	.word	0xffff0208

0800ae2c <sulp>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4604      	mov	r4, r0
 800ae30:	460d      	mov	r5, r1
 800ae32:	ec45 4b10 	vmov	d0, r4, r5
 800ae36:	4616      	mov	r6, r2
 800ae38:	f002 fc20 	bl	800d67c <__ulp>
 800ae3c:	ec51 0b10 	vmov	r0, r1, d0
 800ae40:	b17e      	cbz	r6, 800ae62 <sulp+0x36>
 800ae42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dd09      	ble.n	800ae62 <sulp+0x36>
 800ae4e:	051b      	lsls	r3, r3, #20
 800ae50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae54:	2400      	movs	r4, #0
 800ae56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	462b      	mov	r3, r5
 800ae5e:	f7f5 fbcb 	bl	80005f8 <__aeabi_dmul>
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	0000      	movs	r0, r0
	...

0800ae68 <_strtod_l>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ed2d 8b02 	vpush	{d8}
 800ae70:	b09d      	sub	sp, #116	; 0x74
 800ae72:	461f      	mov	r7, r3
 800ae74:	2300      	movs	r3, #0
 800ae76:	9318      	str	r3, [sp, #96]	; 0x60
 800ae78:	4ba2      	ldr	r3, [pc, #648]	; (800b104 <_strtod_l+0x29c>)
 800ae7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9305      	str	r3, [sp, #20]
 800ae80:	4604      	mov	r4, r0
 800ae82:	4618      	mov	r0, r3
 800ae84:	4688      	mov	r8, r1
 800ae86:	f7f5 f9a3 	bl	80001d0 <strlen>
 800ae8a:	f04f 0a00 	mov.w	sl, #0
 800ae8e:	4605      	mov	r5, r0
 800ae90:	f04f 0b00 	mov.w	fp, #0
 800ae94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae9a:	781a      	ldrb	r2, [r3, #0]
 800ae9c:	2a2b      	cmp	r2, #43	; 0x2b
 800ae9e:	d04e      	beq.n	800af3e <_strtod_l+0xd6>
 800aea0:	d83b      	bhi.n	800af1a <_strtod_l+0xb2>
 800aea2:	2a0d      	cmp	r2, #13
 800aea4:	d834      	bhi.n	800af10 <_strtod_l+0xa8>
 800aea6:	2a08      	cmp	r2, #8
 800aea8:	d834      	bhi.n	800af14 <_strtod_l+0xac>
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	d03e      	beq.n	800af2c <_strtod_l+0xc4>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	930a      	str	r3, [sp, #40]	; 0x28
 800aeb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aeb4:	7833      	ldrb	r3, [r6, #0]
 800aeb6:	2b30      	cmp	r3, #48	; 0x30
 800aeb8:	f040 80b0 	bne.w	800b01c <_strtod_l+0x1b4>
 800aebc:	7873      	ldrb	r3, [r6, #1]
 800aebe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aec2:	2b58      	cmp	r3, #88	; 0x58
 800aec4:	d168      	bne.n	800af98 <_strtod_l+0x130>
 800aec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec8:	9301      	str	r3, [sp, #4]
 800aeca:	ab18      	add	r3, sp, #96	; 0x60
 800aecc:	9702      	str	r7, [sp, #8]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4a8d      	ldr	r2, [pc, #564]	; (800b108 <_strtod_l+0x2a0>)
 800aed2:	ab19      	add	r3, sp, #100	; 0x64
 800aed4:	a917      	add	r1, sp, #92	; 0x5c
 800aed6:	4620      	mov	r0, r4
 800aed8:	f001 fd38 	bl	800c94c <__gethex>
 800aedc:	f010 0707 	ands.w	r7, r0, #7
 800aee0:	4605      	mov	r5, r0
 800aee2:	d005      	beq.n	800aef0 <_strtod_l+0x88>
 800aee4:	2f06      	cmp	r7, #6
 800aee6:	d12c      	bne.n	800af42 <_strtod_l+0xda>
 800aee8:	3601      	adds	r6, #1
 800aeea:	2300      	movs	r3, #0
 800aeec:	9617      	str	r6, [sp, #92]	; 0x5c
 800aeee:	930a      	str	r3, [sp, #40]	; 0x28
 800aef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f040 8590 	bne.w	800ba18 <_strtod_l+0xbb0>
 800aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefa:	b1eb      	cbz	r3, 800af38 <_strtod_l+0xd0>
 800aefc:	4652      	mov	r2, sl
 800aefe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af02:	ec43 2b10 	vmov	d0, r2, r3
 800af06:	b01d      	add	sp, #116	; 0x74
 800af08:	ecbd 8b02 	vpop	{d8}
 800af0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af10:	2a20      	cmp	r2, #32
 800af12:	d1cc      	bne.n	800aeae <_strtod_l+0x46>
 800af14:	3301      	adds	r3, #1
 800af16:	9317      	str	r3, [sp, #92]	; 0x5c
 800af18:	e7be      	b.n	800ae98 <_strtod_l+0x30>
 800af1a:	2a2d      	cmp	r2, #45	; 0x2d
 800af1c:	d1c7      	bne.n	800aeae <_strtod_l+0x46>
 800af1e:	2201      	movs	r2, #1
 800af20:	920a      	str	r2, [sp, #40]	; 0x28
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	9217      	str	r2, [sp, #92]	; 0x5c
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1c2      	bne.n	800aeb2 <_strtod_l+0x4a>
 800af2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af32:	2b00      	cmp	r3, #0
 800af34:	f040 856e 	bne.w	800ba14 <_strtod_l+0xbac>
 800af38:	4652      	mov	r2, sl
 800af3a:	465b      	mov	r3, fp
 800af3c:	e7e1      	b.n	800af02 <_strtod_l+0x9a>
 800af3e:	2200      	movs	r2, #0
 800af40:	e7ee      	b.n	800af20 <_strtod_l+0xb8>
 800af42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af44:	b13a      	cbz	r2, 800af56 <_strtod_l+0xee>
 800af46:	2135      	movs	r1, #53	; 0x35
 800af48:	a81a      	add	r0, sp, #104	; 0x68
 800af4a:	f002 fca2 	bl	800d892 <__copybits>
 800af4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af50:	4620      	mov	r0, r4
 800af52:	f002 f861 	bl	800d018 <_Bfree>
 800af56:	3f01      	subs	r7, #1
 800af58:	2f04      	cmp	r7, #4
 800af5a:	d806      	bhi.n	800af6a <_strtod_l+0x102>
 800af5c:	e8df f007 	tbb	[pc, r7]
 800af60:	1714030a 	.word	0x1714030a
 800af64:	0a          	.byte	0x0a
 800af65:	00          	.byte	0x00
 800af66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800af6a:	0728      	lsls	r0, r5, #28
 800af6c:	d5c0      	bpl.n	800aef0 <_strtod_l+0x88>
 800af6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800af72:	e7bd      	b.n	800aef0 <_strtod_l+0x88>
 800af74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800af78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af86:	e7f0      	b.n	800af6a <_strtod_l+0x102>
 800af88:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b10c <_strtod_l+0x2a4>
 800af8c:	e7ed      	b.n	800af6a <_strtod_l+0x102>
 800af8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800af92:	f04f 3aff 	mov.w	sl, #4294967295
 800af96:	e7e8      	b.n	800af6a <_strtod_l+0x102>
 800af98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af9a:	1c5a      	adds	r2, r3, #1
 800af9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800af9e:	785b      	ldrb	r3, [r3, #1]
 800afa0:	2b30      	cmp	r3, #48	; 0x30
 800afa2:	d0f9      	beq.n	800af98 <_strtod_l+0x130>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d0a3      	beq.n	800aef0 <_strtod_l+0x88>
 800afa8:	2301      	movs	r3, #1
 800afaa:	f04f 0900 	mov.w	r9, #0
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afb2:	9308      	str	r3, [sp, #32]
 800afb4:	f8cd 901c 	str.w	r9, [sp, #28]
 800afb8:	464f      	mov	r7, r9
 800afba:	220a      	movs	r2, #10
 800afbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800afbe:	7806      	ldrb	r6, [r0, #0]
 800afc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afc4:	b2d9      	uxtb	r1, r3
 800afc6:	2909      	cmp	r1, #9
 800afc8:	d92a      	bls.n	800b020 <_strtod_l+0x1b8>
 800afca:	9905      	ldr	r1, [sp, #20]
 800afcc:	462a      	mov	r2, r5
 800afce:	f002 ff0f 	bl	800ddf0 <strncmp>
 800afd2:	b398      	cbz	r0, 800b03c <_strtod_l+0x1d4>
 800afd4:	2000      	movs	r0, #0
 800afd6:	4632      	mov	r2, r6
 800afd8:	463d      	mov	r5, r7
 800afda:	9005      	str	r0, [sp, #20]
 800afdc:	4603      	mov	r3, r0
 800afde:	2a65      	cmp	r2, #101	; 0x65
 800afe0:	d001      	beq.n	800afe6 <_strtod_l+0x17e>
 800afe2:	2a45      	cmp	r2, #69	; 0x45
 800afe4:	d118      	bne.n	800b018 <_strtod_l+0x1b0>
 800afe6:	b91d      	cbnz	r5, 800aff0 <_strtod_l+0x188>
 800afe8:	9a04      	ldr	r2, [sp, #16]
 800afea:	4302      	orrs	r2, r0
 800afec:	d09e      	beq.n	800af2c <_strtod_l+0xc4>
 800afee:	2500      	movs	r5, #0
 800aff0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aff4:	f108 0201 	add.w	r2, r8, #1
 800aff8:	9217      	str	r2, [sp, #92]	; 0x5c
 800affa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800affe:	2a2b      	cmp	r2, #43	; 0x2b
 800b000:	d075      	beq.n	800b0ee <_strtod_l+0x286>
 800b002:	2a2d      	cmp	r2, #45	; 0x2d
 800b004:	d07b      	beq.n	800b0fe <_strtod_l+0x296>
 800b006:	f04f 0c00 	mov.w	ip, #0
 800b00a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b00e:	2909      	cmp	r1, #9
 800b010:	f240 8082 	bls.w	800b118 <_strtod_l+0x2b0>
 800b014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b018:	2600      	movs	r6, #0
 800b01a:	e09d      	b.n	800b158 <_strtod_l+0x2f0>
 800b01c:	2300      	movs	r3, #0
 800b01e:	e7c4      	b.n	800afaa <_strtod_l+0x142>
 800b020:	2f08      	cmp	r7, #8
 800b022:	bfd8      	it	le
 800b024:	9907      	ldrle	r1, [sp, #28]
 800b026:	f100 0001 	add.w	r0, r0, #1
 800b02a:	bfda      	itte	le
 800b02c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b030:	9307      	strle	r3, [sp, #28]
 800b032:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b036:	3701      	adds	r7, #1
 800b038:	9017      	str	r0, [sp, #92]	; 0x5c
 800b03a:	e7bf      	b.n	800afbc <_strtod_l+0x154>
 800b03c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b03e:	195a      	adds	r2, r3, r5
 800b040:	9217      	str	r2, [sp, #92]	; 0x5c
 800b042:	5d5a      	ldrb	r2, [r3, r5]
 800b044:	2f00      	cmp	r7, #0
 800b046:	d037      	beq.n	800b0b8 <_strtod_l+0x250>
 800b048:	9005      	str	r0, [sp, #20]
 800b04a:	463d      	mov	r5, r7
 800b04c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b050:	2b09      	cmp	r3, #9
 800b052:	d912      	bls.n	800b07a <_strtod_l+0x212>
 800b054:	2301      	movs	r3, #1
 800b056:	e7c2      	b.n	800afde <_strtod_l+0x176>
 800b058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b05e:	785a      	ldrb	r2, [r3, #1]
 800b060:	3001      	adds	r0, #1
 800b062:	2a30      	cmp	r2, #48	; 0x30
 800b064:	d0f8      	beq.n	800b058 <_strtod_l+0x1f0>
 800b066:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	f200 84d9 	bhi.w	800ba22 <_strtod_l+0xbba>
 800b070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b072:	9005      	str	r0, [sp, #20]
 800b074:	2000      	movs	r0, #0
 800b076:	9308      	str	r3, [sp, #32]
 800b078:	4605      	mov	r5, r0
 800b07a:	3a30      	subs	r2, #48	; 0x30
 800b07c:	f100 0301 	add.w	r3, r0, #1
 800b080:	d014      	beq.n	800b0ac <_strtod_l+0x244>
 800b082:	9905      	ldr	r1, [sp, #20]
 800b084:	4419      	add	r1, r3
 800b086:	9105      	str	r1, [sp, #20]
 800b088:	462b      	mov	r3, r5
 800b08a:	eb00 0e05 	add.w	lr, r0, r5
 800b08e:	210a      	movs	r1, #10
 800b090:	4573      	cmp	r3, lr
 800b092:	d113      	bne.n	800b0bc <_strtod_l+0x254>
 800b094:	182b      	adds	r3, r5, r0
 800b096:	2b08      	cmp	r3, #8
 800b098:	f105 0501 	add.w	r5, r5, #1
 800b09c:	4405      	add	r5, r0
 800b09e:	dc1c      	bgt.n	800b0da <_strtod_l+0x272>
 800b0a0:	9907      	ldr	r1, [sp, #28]
 800b0a2:	230a      	movs	r3, #10
 800b0a4:	fb03 2301 	mla	r3, r3, r1, r2
 800b0a8:	9307      	str	r3, [sp, #28]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0ae:	1c51      	adds	r1, r2, #1
 800b0b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800b0b2:	7852      	ldrb	r2, [r2, #1]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	e7c9      	b.n	800b04c <_strtod_l+0x1e4>
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	e7d2      	b.n	800b062 <_strtod_l+0x1fa>
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	dc04      	bgt.n	800b0ca <_strtod_l+0x262>
 800b0c0:	9e07      	ldr	r6, [sp, #28]
 800b0c2:	434e      	muls	r6, r1
 800b0c4:	9607      	str	r6, [sp, #28]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	e7e2      	b.n	800b090 <_strtod_l+0x228>
 800b0ca:	f103 0c01 	add.w	ip, r3, #1
 800b0ce:	f1bc 0f10 	cmp.w	ip, #16
 800b0d2:	bfd8      	it	le
 800b0d4:	fb01 f909 	mulle.w	r9, r1, r9
 800b0d8:	e7f5      	b.n	800b0c6 <_strtod_l+0x25e>
 800b0da:	2d10      	cmp	r5, #16
 800b0dc:	bfdc      	itt	le
 800b0de:	230a      	movle	r3, #10
 800b0e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b0e4:	e7e1      	b.n	800b0aa <_strtod_l+0x242>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e77c      	b.n	800afe8 <_strtod_l+0x180>
 800b0ee:	f04f 0c00 	mov.w	ip, #0
 800b0f2:	f108 0202 	add.w	r2, r8, #2
 800b0f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b0fc:	e785      	b.n	800b00a <_strtod_l+0x1a2>
 800b0fe:	f04f 0c01 	mov.w	ip, #1
 800b102:	e7f6      	b.n	800b0f2 <_strtod_l+0x28a>
 800b104:	08010180 	.word	0x08010180
 800b108:	0800ff34 	.word	0x0800ff34
 800b10c:	7ff00000 	.word	0x7ff00000
 800b110:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b112:	1c51      	adds	r1, r2, #1
 800b114:	9117      	str	r1, [sp, #92]	; 0x5c
 800b116:	7852      	ldrb	r2, [r2, #1]
 800b118:	2a30      	cmp	r2, #48	; 0x30
 800b11a:	d0f9      	beq.n	800b110 <_strtod_l+0x2a8>
 800b11c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b120:	2908      	cmp	r1, #8
 800b122:	f63f af79 	bhi.w	800b018 <_strtod_l+0x1b0>
 800b126:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b12a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b12c:	9206      	str	r2, [sp, #24]
 800b12e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b130:	1c51      	adds	r1, r2, #1
 800b132:	9117      	str	r1, [sp, #92]	; 0x5c
 800b134:	7852      	ldrb	r2, [r2, #1]
 800b136:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b13a:	2e09      	cmp	r6, #9
 800b13c:	d937      	bls.n	800b1ae <_strtod_l+0x346>
 800b13e:	9e06      	ldr	r6, [sp, #24]
 800b140:	1b89      	subs	r1, r1, r6
 800b142:	2908      	cmp	r1, #8
 800b144:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b148:	dc02      	bgt.n	800b150 <_strtod_l+0x2e8>
 800b14a:	4576      	cmp	r6, lr
 800b14c:	bfa8      	it	ge
 800b14e:	4676      	movge	r6, lr
 800b150:	f1bc 0f00 	cmp.w	ip, #0
 800b154:	d000      	beq.n	800b158 <_strtod_l+0x2f0>
 800b156:	4276      	negs	r6, r6
 800b158:	2d00      	cmp	r5, #0
 800b15a:	d14d      	bne.n	800b1f8 <_strtod_l+0x390>
 800b15c:	9904      	ldr	r1, [sp, #16]
 800b15e:	4301      	orrs	r1, r0
 800b160:	f47f aec6 	bne.w	800aef0 <_strtod_l+0x88>
 800b164:	2b00      	cmp	r3, #0
 800b166:	f47f aee1 	bne.w	800af2c <_strtod_l+0xc4>
 800b16a:	2a69      	cmp	r2, #105	; 0x69
 800b16c:	d027      	beq.n	800b1be <_strtod_l+0x356>
 800b16e:	dc24      	bgt.n	800b1ba <_strtod_l+0x352>
 800b170:	2a49      	cmp	r2, #73	; 0x49
 800b172:	d024      	beq.n	800b1be <_strtod_l+0x356>
 800b174:	2a4e      	cmp	r2, #78	; 0x4e
 800b176:	f47f aed9 	bne.w	800af2c <_strtod_l+0xc4>
 800b17a:	499f      	ldr	r1, [pc, #636]	; (800b3f8 <_strtod_l+0x590>)
 800b17c:	a817      	add	r0, sp, #92	; 0x5c
 800b17e:	f001 fe3d 	bl	800cdfc <__match>
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f aed2 	beq.w	800af2c <_strtod_l+0xc4>
 800b188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	2b28      	cmp	r3, #40	; 0x28
 800b18e:	d12d      	bne.n	800b1ec <_strtod_l+0x384>
 800b190:	499a      	ldr	r1, [pc, #616]	; (800b3fc <_strtod_l+0x594>)
 800b192:	aa1a      	add	r2, sp, #104	; 0x68
 800b194:	a817      	add	r0, sp, #92	; 0x5c
 800b196:	f001 fe45 	bl	800ce24 <__hexnan>
 800b19a:	2805      	cmp	r0, #5
 800b19c:	d126      	bne.n	800b1ec <_strtod_l+0x384>
 800b19e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b1a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b1a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b1ac:	e6a0      	b.n	800aef0 <_strtod_l+0x88>
 800b1ae:	210a      	movs	r1, #10
 800b1b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b1b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1b8:	e7b9      	b.n	800b12e <_strtod_l+0x2c6>
 800b1ba:	2a6e      	cmp	r2, #110	; 0x6e
 800b1bc:	e7db      	b.n	800b176 <_strtod_l+0x30e>
 800b1be:	4990      	ldr	r1, [pc, #576]	; (800b400 <_strtod_l+0x598>)
 800b1c0:	a817      	add	r0, sp, #92	; 0x5c
 800b1c2:	f001 fe1b 	bl	800cdfc <__match>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	f43f aeb0 	beq.w	800af2c <_strtod_l+0xc4>
 800b1cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ce:	498d      	ldr	r1, [pc, #564]	; (800b404 <_strtod_l+0x59c>)
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	a817      	add	r0, sp, #92	; 0x5c
 800b1d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b1d6:	f001 fe11 	bl	800cdfc <__match>
 800b1da:	b910      	cbnz	r0, 800b1e2 <_strtod_l+0x37a>
 800b1dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1de:	3301      	adds	r3, #1
 800b1e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b1e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b414 <_strtod_l+0x5ac>
 800b1e6:	f04f 0a00 	mov.w	sl, #0
 800b1ea:	e681      	b.n	800aef0 <_strtod_l+0x88>
 800b1ec:	4886      	ldr	r0, [pc, #536]	; (800b408 <_strtod_l+0x5a0>)
 800b1ee:	f002 fde7 	bl	800ddc0 <nan>
 800b1f2:	ec5b ab10 	vmov	sl, fp, d0
 800b1f6:	e67b      	b.n	800aef0 <_strtod_l+0x88>
 800b1f8:	9b05      	ldr	r3, [sp, #20]
 800b1fa:	9807      	ldr	r0, [sp, #28]
 800b1fc:	1af3      	subs	r3, r6, r3
 800b1fe:	2f00      	cmp	r7, #0
 800b200:	bf08      	it	eq
 800b202:	462f      	moveq	r7, r5
 800b204:	2d10      	cmp	r5, #16
 800b206:	9306      	str	r3, [sp, #24]
 800b208:	46a8      	mov	r8, r5
 800b20a:	bfa8      	it	ge
 800b20c:	f04f 0810 	movge.w	r8, #16
 800b210:	f7f5 f978 	bl	8000504 <__aeabi_ui2d>
 800b214:	2d09      	cmp	r5, #9
 800b216:	4682      	mov	sl, r0
 800b218:	468b      	mov	fp, r1
 800b21a:	dd13      	ble.n	800b244 <_strtod_l+0x3dc>
 800b21c:	4b7b      	ldr	r3, [pc, #492]	; (800b40c <_strtod_l+0x5a4>)
 800b21e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b222:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b226:	f7f5 f9e7 	bl	80005f8 <__aeabi_dmul>
 800b22a:	4682      	mov	sl, r0
 800b22c:	4648      	mov	r0, r9
 800b22e:	468b      	mov	fp, r1
 800b230:	f7f5 f968 	bl	8000504 <__aeabi_ui2d>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4650      	mov	r0, sl
 800b23a:	4659      	mov	r1, fp
 800b23c:	f7f5 f826 	bl	800028c <__adddf3>
 800b240:	4682      	mov	sl, r0
 800b242:	468b      	mov	fp, r1
 800b244:	2d0f      	cmp	r5, #15
 800b246:	dc38      	bgt.n	800b2ba <_strtod_l+0x452>
 800b248:	9b06      	ldr	r3, [sp, #24]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f43f ae50 	beq.w	800aef0 <_strtod_l+0x88>
 800b250:	dd24      	ble.n	800b29c <_strtod_l+0x434>
 800b252:	2b16      	cmp	r3, #22
 800b254:	dc0b      	bgt.n	800b26e <_strtod_l+0x406>
 800b256:	496d      	ldr	r1, [pc, #436]	; (800b40c <_strtod_l+0x5a4>)
 800b258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b260:	4652      	mov	r2, sl
 800b262:	465b      	mov	r3, fp
 800b264:	f7f5 f9c8 	bl	80005f8 <__aeabi_dmul>
 800b268:	4682      	mov	sl, r0
 800b26a:	468b      	mov	fp, r1
 800b26c:	e640      	b.n	800aef0 <_strtod_l+0x88>
 800b26e:	9a06      	ldr	r2, [sp, #24]
 800b270:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b274:	4293      	cmp	r3, r2
 800b276:	db20      	blt.n	800b2ba <_strtod_l+0x452>
 800b278:	4c64      	ldr	r4, [pc, #400]	; (800b40c <_strtod_l+0x5a4>)
 800b27a:	f1c5 050f 	rsb	r5, r5, #15
 800b27e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b282:	4652      	mov	r2, sl
 800b284:	465b      	mov	r3, fp
 800b286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28a:	f7f5 f9b5 	bl	80005f8 <__aeabi_dmul>
 800b28e:	9b06      	ldr	r3, [sp, #24]
 800b290:	1b5d      	subs	r5, r3, r5
 800b292:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b296:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b29a:	e7e3      	b.n	800b264 <_strtod_l+0x3fc>
 800b29c:	9b06      	ldr	r3, [sp, #24]
 800b29e:	3316      	adds	r3, #22
 800b2a0:	db0b      	blt.n	800b2ba <_strtod_l+0x452>
 800b2a2:	9b05      	ldr	r3, [sp, #20]
 800b2a4:	1b9e      	subs	r6, r3, r6
 800b2a6:	4b59      	ldr	r3, [pc, #356]	; (800b40c <_strtod_l+0x5a4>)
 800b2a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b2ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	4659      	mov	r1, fp
 800b2b4:	f7f5 faca 	bl	800084c <__aeabi_ddiv>
 800b2b8:	e7d6      	b.n	800b268 <_strtod_l+0x400>
 800b2ba:	9b06      	ldr	r3, [sp, #24]
 800b2bc:	eba5 0808 	sub.w	r8, r5, r8
 800b2c0:	4498      	add	r8, r3
 800b2c2:	f1b8 0f00 	cmp.w	r8, #0
 800b2c6:	dd74      	ble.n	800b3b2 <_strtod_l+0x54a>
 800b2c8:	f018 030f 	ands.w	r3, r8, #15
 800b2cc:	d00a      	beq.n	800b2e4 <_strtod_l+0x47c>
 800b2ce:	494f      	ldr	r1, [pc, #316]	; (800b40c <_strtod_l+0x5a4>)
 800b2d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2d4:	4652      	mov	r2, sl
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2dc:	f7f5 f98c 	bl	80005f8 <__aeabi_dmul>
 800b2e0:	4682      	mov	sl, r0
 800b2e2:	468b      	mov	fp, r1
 800b2e4:	f038 080f 	bics.w	r8, r8, #15
 800b2e8:	d04f      	beq.n	800b38a <_strtod_l+0x522>
 800b2ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b2ee:	dd22      	ble.n	800b336 <_strtod_l+0x4ce>
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	462e      	mov	r6, r5
 800b2f4:	9507      	str	r5, [sp, #28]
 800b2f6:	9505      	str	r5, [sp, #20]
 800b2f8:	2322      	movs	r3, #34	; 0x22
 800b2fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b414 <_strtod_l+0x5ac>
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	f04f 0a00 	mov.w	sl, #0
 800b304:	9b07      	ldr	r3, [sp, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f43f adf2 	beq.w	800aef0 <_strtod_l+0x88>
 800b30c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 fe82 	bl	800d018 <_Bfree>
 800b314:	9905      	ldr	r1, [sp, #20]
 800b316:	4620      	mov	r0, r4
 800b318:	f001 fe7e 	bl	800d018 <_Bfree>
 800b31c:	4631      	mov	r1, r6
 800b31e:	4620      	mov	r0, r4
 800b320:	f001 fe7a 	bl	800d018 <_Bfree>
 800b324:	9907      	ldr	r1, [sp, #28]
 800b326:	4620      	mov	r0, r4
 800b328:	f001 fe76 	bl	800d018 <_Bfree>
 800b32c:	4629      	mov	r1, r5
 800b32e:	4620      	mov	r0, r4
 800b330:	f001 fe72 	bl	800d018 <_Bfree>
 800b334:	e5dc      	b.n	800aef0 <_strtod_l+0x88>
 800b336:	4b36      	ldr	r3, [pc, #216]	; (800b410 <_strtod_l+0x5a8>)
 800b338:	9304      	str	r3, [sp, #16]
 800b33a:	2300      	movs	r3, #0
 800b33c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b340:	4650      	mov	r0, sl
 800b342:	4659      	mov	r1, fp
 800b344:	4699      	mov	r9, r3
 800b346:	f1b8 0f01 	cmp.w	r8, #1
 800b34a:	dc21      	bgt.n	800b390 <_strtod_l+0x528>
 800b34c:	b10b      	cbz	r3, 800b352 <_strtod_l+0x4ea>
 800b34e:	4682      	mov	sl, r0
 800b350:	468b      	mov	fp, r1
 800b352:	4b2f      	ldr	r3, [pc, #188]	; (800b410 <_strtod_l+0x5a8>)
 800b354:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b358:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b35c:	4652      	mov	r2, sl
 800b35e:	465b      	mov	r3, fp
 800b360:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b364:	f7f5 f948 	bl	80005f8 <__aeabi_dmul>
 800b368:	4b2a      	ldr	r3, [pc, #168]	; (800b414 <_strtod_l+0x5ac>)
 800b36a:	460a      	mov	r2, r1
 800b36c:	400b      	ands	r3, r1
 800b36e:	492a      	ldr	r1, [pc, #168]	; (800b418 <_strtod_l+0x5b0>)
 800b370:	428b      	cmp	r3, r1
 800b372:	4682      	mov	sl, r0
 800b374:	d8bc      	bhi.n	800b2f0 <_strtod_l+0x488>
 800b376:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b37a:	428b      	cmp	r3, r1
 800b37c:	bf86      	itte	hi
 800b37e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b41c <_strtod_l+0x5b4>
 800b382:	f04f 3aff 	movhi.w	sl, #4294967295
 800b386:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b38a:	2300      	movs	r3, #0
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	e084      	b.n	800b49a <_strtod_l+0x632>
 800b390:	f018 0f01 	tst.w	r8, #1
 800b394:	d005      	beq.n	800b3a2 <_strtod_l+0x53a>
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f5 f92c 	bl	80005f8 <__aeabi_dmul>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	9a04      	ldr	r2, [sp, #16]
 800b3a4:	3208      	adds	r2, #8
 800b3a6:	f109 0901 	add.w	r9, r9, #1
 800b3aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3ae:	9204      	str	r2, [sp, #16]
 800b3b0:	e7c9      	b.n	800b346 <_strtod_l+0x4de>
 800b3b2:	d0ea      	beq.n	800b38a <_strtod_l+0x522>
 800b3b4:	f1c8 0800 	rsb	r8, r8, #0
 800b3b8:	f018 020f 	ands.w	r2, r8, #15
 800b3bc:	d00a      	beq.n	800b3d4 <_strtod_l+0x56c>
 800b3be:	4b13      	ldr	r3, [pc, #76]	; (800b40c <_strtod_l+0x5a4>)
 800b3c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f5 fa3e 	bl	800084c <__aeabi_ddiv>
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	468b      	mov	fp, r1
 800b3d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b3d8:	d0d7      	beq.n	800b38a <_strtod_l+0x522>
 800b3da:	f1b8 0f1f 	cmp.w	r8, #31
 800b3de:	dd1f      	ble.n	800b420 <_strtod_l+0x5b8>
 800b3e0:	2500      	movs	r5, #0
 800b3e2:	462e      	mov	r6, r5
 800b3e4:	9507      	str	r5, [sp, #28]
 800b3e6:	9505      	str	r5, [sp, #20]
 800b3e8:	2322      	movs	r3, #34	; 0x22
 800b3ea:	f04f 0a00 	mov.w	sl, #0
 800b3ee:	f04f 0b00 	mov.w	fp, #0
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	e786      	b.n	800b304 <_strtod_l+0x49c>
 800b3f6:	bf00      	nop
 800b3f8:	0800ff05 	.word	0x0800ff05
 800b3fc:	0800ff48 	.word	0x0800ff48
 800b400:	0800fefd 	.word	0x0800fefd
 800b404:	0801008c 	.word	0x0801008c
 800b408:	08010338 	.word	0x08010338
 800b40c:	08010218 	.word	0x08010218
 800b410:	080101f0 	.word	0x080101f0
 800b414:	7ff00000 	.word	0x7ff00000
 800b418:	7ca00000 	.word	0x7ca00000
 800b41c:	7fefffff 	.word	0x7fefffff
 800b420:	f018 0310 	ands.w	r3, r8, #16
 800b424:	bf18      	it	ne
 800b426:	236a      	movne	r3, #106	; 0x6a
 800b428:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b7d8 <_strtod_l+0x970>
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	4650      	mov	r0, sl
 800b430:	4659      	mov	r1, fp
 800b432:	2300      	movs	r3, #0
 800b434:	f018 0f01 	tst.w	r8, #1
 800b438:	d004      	beq.n	800b444 <_strtod_l+0x5dc>
 800b43a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b43e:	f7f5 f8db 	bl	80005f8 <__aeabi_dmul>
 800b442:	2301      	movs	r3, #1
 800b444:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b448:	f109 0908 	add.w	r9, r9, #8
 800b44c:	d1f2      	bne.n	800b434 <_strtod_l+0x5cc>
 800b44e:	b10b      	cbz	r3, 800b454 <_strtod_l+0x5ec>
 800b450:	4682      	mov	sl, r0
 800b452:	468b      	mov	fp, r1
 800b454:	9b04      	ldr	r3, [sp, #16]
 800b456:	b1c3      	cbz	r3, 800b48a <_strtod_l+0x622>
 800b458:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b45c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b460:	2b00      	cmp	r3, #0
 800b462:	4659      	mov	r1, fp
 800b464:	dd11      	ble.n	800b48a <_strtod_l+0x622>
 800b466:	2b1f      	cmp	r3, #31
 800b468:	f340 8124 	ble.w	800b6b4 <_strtod_l+0x84c>
 800b46c:	2b34      	cmp	r3, #52	; 0x34
 800b46e:	bfde      	ittt	le
 800b470:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b474:	f04f 33ff 	movle.w	r3, #4294967295
 800b478:	fa03 f202 	lslle.w	r2, r3, r2
 800b47c:	f04f 0a00 	mov.w	sl, #0
 800b480:	bfcc      	ite	gt
 800b482:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b486:	ea02 0b01 	andle.w	fp, r2, r1
 800b48a:	2200      	movs	r2, #0
 800b48c:	2300      	movs	r3, #0
 800b48e:	4650      	mov	r0, sl
 800b490:	4659      	mov	r1, fp
 800b492:	f7f5 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b496:	2800      	cmp	r0, #0
 800b498:	d1a2      	bne.n	800b3e0 <_strtod_l+0x578>
 800b49a:	9b07      	ldr	r3, [sp, #28]
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	9908      	ldr	r1, [sp, #32]
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	463a      	mov	r2, r7
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f001 fe1f 	bl	800d0e8 <__s2b>
 800b4aa:	9007      	str	r0, [sp, #28]
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f43f af1f 	beq.w	800b2f0 <_strtod_l+0x488>
 800b4b2:	9b05      	ldr	r3, [sp, #20]
 800b4b4:	1b9e      	subs	r6, r3, r6
 800b4b6:	9b06      	ldr	r3, [sp, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	bfb4      	ite	lt
 800b4bc:	4633      	movlt	r3, r6
 800b4be:	2300      	movge	r3, #0
 800b4c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4c2:	9b06      	ldr	r3, [sp, #24]
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b4ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b4cc:	462e      	mov	r6, r5
 800b4ce:	9b07      	ldr	r3, [sp, #28]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	6859      	ldr	r1, [r3, #4]
 800b4d4:	f001 fd60 	bl	800cf98 <_Balloc>
 800b4d8:	9005      	str	r0, [sp, #20]
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	f43f af0c 	beq.w	800b2f8 <_strtod_l+0x490>
 800b4e0:	9b07      	ldr	r3, [sp, #28]
 800b4e2:	691a      	ldr	r2, [r3, #16]
 800b4e4:	3202      	adds	r2, #2
 800b4e6:	f103 010c 	add.w	r1, r3, #12
 800b4ea:	0092      	lsls	r2, r2, #2
 800b4ec:	300c      	adds	r0, #12
 800b4ee:	f7fe fdcd 	bl	800a08c <memcpy>
 800b4f2:	ec4b ab10 	vmov	d0, sl, fp
 800b4f6:	aa1a      	add	r2, sp, #104	; 0x68
 800b4f8:	a919      	add	r1, sp, #100	; 0x64
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f002 f93a 	bl	800d774 <__d2b>
 800b500:	ec4b ab18 	vmov	d8, sl, fp
 800b504:	9018      	str	r0, [sp, #96]	; 0x60
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f aef6 	beq.w	800b2f8 <_strtod_l+0x490>
 800b50c:	2101      	movs	r1, #1
 800b50e:	4620      	mov	r0, r4
 800b510:	f001 fe84 	bl	800d21c <__i2b>
 800b514:	4606      	mov	r6, r0
 800b516:	2800      	cmp	r0, #0
 800b518:	f43f aeee 	beq.w	800b2f8 <_strtod_l+0x490>
 800b51c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b51e:	9904      	ldr	r1, [sp, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	bfab      	itete	ge
 800b524:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b526:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b528:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b52a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b52e:	bfac      	ite	ge
 800b530:	eb03 0902 	addge.w	r9, r3, r2
 800b534:	1ad7      	sublt	r7, r2, r3
 800b536:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b538:	eba3 0801 	sub.w	r8, r3, r1
 800b53c:	4490      	add	r8, r2
 800b53e:	4ba1      	ldr	r3, [pc, #644]	; (800b7c4 <_strtod_l+0x95c>)
 800b540:	f108 38ff 	add.w	r8, r8, #4294967295
 800b544:	4598      	cmp	r8, r3
 800b546:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b54a:	f280 80c7 	bge.w	800b6dc <_strtod_l+0x874>
 800b54e:	eba3 0308 	sub.w	r3, r3, r8
 800b552:	2b1f      	cmp	r3, #31
 800b554:	eba2 0203 	sub.w	r2, r2, r3
 800b558:	f04f 0101 	mov.w	r1, #1
 800b55c:	f300 80b1 	bgt.w	800b6c2 <_strtod_l+0x85a>
 800b560:	fa01 f303 	lsl.w	r3, r1, r3
 800b564:	930d      	str	r3, [sp, #52]	; 0x34
 800b566:	2300      	movs	r3, #0
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	eb09 0802 	add.w	r8, r9, r2
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	45c1      	cmp	r9, r8
 800b572:	4417      	add	r7, r2
 800b574:	441f      	add	r7, r3
 800b576:	464b      	mov	r3, r9
 800b578:	bfa8      	it	ge
 800b57a:	4643      	movge	r3, r8
 800b57c:	42bb      	cmp	r3, r7
 800b57e:	bfa8      	it	ge
 800b580:	463b      	movge	r3, r7
 800b582:	2b00      	cmp	r3, #0
 800b584:	bfc2      	ittt	gt
 800b586:	eba8 0803 	subgt.w	r8, r8, r3
 800b58a:	1aff      	subgt	r7, r7, r3
 800b58c:	eba9 0903 	subgt.w	r9, r9, r3
 800b590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b592:	2b00      	cmp	r3, #0
 800b594:	dd17      	ble.n	800b5c6 <_strtod_l+0x75e>
 800b596:	4631      	mov	r1, r6
 800b598:	461a      	mov	r2, r3
 800b59a:	4620      	mov	r0, r4
 800b59c:	f001 fefe 	bl	800d39c <__pow5mult>
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f43f aea8 	beq.w	800b2f8 <_strtod_l+0x490>
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f001 fe4b 	bl	800d248 <__multiply>
 800b5b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f43f ae9f 	beq.w	800b2f8 <_strtod_l+0x490>
 800b5ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f001 fd2b 	bl	800d018 <_Bfree>
 800b5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5c4:	9318      	str	r3, [sp, #96]	; 0x60
 800b5c6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ca:	f300 808c 	bgt.w	800b6e6 <_strtod_l+0x87e>
 800b5ce:	9b06      	ldr	r3, [sp, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	dd08      	ble.n	800b5e6 <_strtod_l+0x77e>
 800b5d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5d6:	9905      	ldr	r1, [sp, #20]
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f001 fedf 	bl	800d39c <__pow5mult>
 800b5de:	9005      	str	r0, [sp, #20]
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f ae89 	beq.w	800b2f8 <_strtod_l+0x490>
 800b5e6:	2f00      	cmp	r7, #0
 800b5e8:	dd08      	ble.n	800b5fc <_strtod_l+0x794>
 800b5ea:	9905      	ldr	r1, [sp, #20]
 800b5ec:	463a      	mov	r2, r7
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f001 ff2e 	bl	800d450 <__lshift>
 800b5f4:	9005      	str	r0, [sp, #20]
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f43f ae7e 	beq.w	800b2f8 <_strtod_l+0x490>
 800b5fc:	f1b9 0f00 	cmp.w	r9, #0
 800b600:	dd08      	ble.n	800b614 <_strtod_l+0x7ac>
 800b602:	4631      	mov	r1, r6
 800b604:	464a      	mov	r2, r9
 800b606:	4620      	mov	r0, r4
 800b608:	f001 ff22 	bl	800d450 <__lshift>
 800b60c:	4606      	mov	r6, r0
 800b60e:	2800      	cmp	r0, #0
 800b610:	f43f ae72 	beq.w	800b2f8 <_strtod_l+0x490>
 800b614:	9a05      	ldr	r2, [sp, #20]
 800b616:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b618:	4620      	mov	r0, r4
 800b61a:	f001 ffa5 	bl	800d568 <__mdiff>
 800b61e:	4605      	mov	r5, r0
 800b620:	2800      	cmp	r0, #0
 800b622:	f43f ae69 	beq.w	800b2f8 <_strtod_l+0x490>
 800b626:	68c3      	ldr	r3, [r0, #12]
 800b628:	930b      	str	r3, [sp, #44]	; 0x2c
 800b62a:	2300      	movs	r3, #0
 800b62c:	60c3      	str	r3, [r0, #12]
 800b62e:	4631      	mov	r1, r6
 800b630:	f001 ff7e 	bl	800d530 <__mcmp>
 800b634:	2800      	cmp	r0, #0
 800b636:	da60      	bge.n	800b6fa <_strtod_l+0x892>
 800b638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b63a:	ea53 030a 	orrs.w	r3, r3, sl
 800b63e:	f040 8082 	bne.w	800b746 <_strtod_l+0x8de>
 800b642:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b646:	2b00      	cmp	r3, #0
 800b648:	d17d      	bne.n	800b746 <_strtod_l+0x8de>
 800b64a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b64e:	0d1b      	lsrs	r3, r3, #20
 800b650:	051b      	lsls	r3, r3, #20
 800b652:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b656:	d976      	bls.n	800b746 <_strtod_l+0x8de>
 800b658:	696b      	ldr	r3, [r5, #20]
 800b65a:	b913      	cbnz	r3, 800b662 <_strtod_l+0x7fa>
 800b65c:	692b      	ldr	r3, [r5, #16]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	dd71      	ble.n	800b746 <_strtod_l+0x8de>
 800b662:	4629      	mov	r1, r5
 800b664:	2201      	movs	r2, #1
 800b666:	4620      	mov	r0, r4
 800b668:	f001 fef2 	bl	800d450 <__lshift>
 800b66c:	4631      	mov	r1, r6
 800b66e:	4605      	mov	r5, r0
 800b670:	f001 ff5e 	bl	800d530 <__mcmp>
 800b674:	2800      	cmp	r0, #0
 800b676:	dd66      	ble.n	800b746 <_strtod_l+0x8de>
 800b678:	9904      	ldr	r1, [sp, #16]
 800b67a:	4a53      	ldr	r2, [pc, #332]	; (800b7c8 <_strtod_l+0x960>)
 800b67c:	465b      	mov	r3, fp
 800b67e:	2900      	cmp	r1, #0
 800b680:	f000 8081 	beq.w	800b786 <_strtod_l+0x91e>
 800b684:	ea02 010b 	and.w	r1, r2, fp
 800b688:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b68c:	dc7b      	bgt.n	800b786 <_strtod_l+0x91e>
 800b68e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b692:	f77f aea9 	ble.w	800b3e8 <_strtod_l+0x580>
 800b696:	4b4d      	ldr	r3, [pc, #308]	; (800b7cc <_strtod_l+0x964>)
 800b698:	4650      	mov	r0, sl
 800b69a:	4659      	mov	r1, fp
 800b69c:	2200      	movs	r2, #0
 800b69e:	f7f4 ffab 	bl	80005f8 <__aeabi_dmul>
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4303      	orrs	r3, r0
 800b6a6:	bf08      	it	eq
 800b6a8:	2322      	moveq	r3, #34	; 0x22
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	468b      	mov	fp, r1
 800b6ae:	bf08      	it	eq
 800b6b0:	6023      	streq	r3, [r4, #0]
 800b6b2:	e62b      	b.n	800b30c <_strtod_l+0x4a4>
 800b6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6bc:	ea03 0a0a 	and.w	sl, r3, sl
 800b6c0:	e6e3      	b.n	800b48a <_strtod_l+0x622>
 800b6c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b6c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b6ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b6ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b6d2:	fa01 f308 	lsl.w	r3, r1, r8
 800b6d6:	9308      	str	r3, [sp, #32]
 800b6d8:	910d      	str	r1, [sp, #52]	; 0x34
 800b6da:	e746      	b.n	800b56a <_strtod_l+0x702>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9308      	str	r3, [sp, #32]
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6e4:	e741      	b.n	800b56a <_strtod_l+0x702>
 800b6e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f001 feb0 	bl	800d450 <__lshift>
 800b6f0:	9018      	str	r0, [sp, #96]	; 0x60
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	f47f af6b 	bne.w	800b5ce <_strtod_l+0x766>
 800b6f8:	e5fe      	b.n	800b2f8 <_strtod_l+0x490>
 800b6fa:	465f      	mov	r7, fp
 800b6fc:	d16e      	bne.n	800b7dc <_strtod_l+0x974>
 800b6fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b704:	b342      	cbz	r2, 800b758 <_strtod_l+0x8f0>
 800b706:	4a32      	ldr	r2, [pc, #200]	; (800b7d0 <_strtod_l+0x968>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d128      	bne.n	800b75e <_strtod_l+0x8f6>
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	4651      	mov	r1, sl
 800b710:	b1eb      	cbz	r3, 800b74e <_strtod_l+0x8e6>
 800b712:	4b2d      	ldr	r3, [pc, #180]	; (800b7c8 <_strtod_l+0x960>)
 800b714:	403b      	ands	r3, r7
 800b716:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b71a:	f04f 32ff 	mov.w	r2, #4294967295
 800b71e:	d819      	bhi.n	800b754 <_strtod_l+0x8ec>
 800b720:	0d1b      	lsrs	r3, r3, #20
 800b722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b726:	fa02 f303 	lsl.w	r3, r2, r3
 800b72a:	4299      	cmp	r1, r3
 800b72c:	d117      	bne.n	800b75e <_strtod_l+0x8f6>
 800b72e:	4b29      	ldr	r3, [pc, #164]	; (800b7d4 <_strtod_l+0x96c>)
 800b730:	429f      	cmp	r7, r3
 800b732:	d102      	bne.n	800b73a <_strtod_l+0x8d2>
 800b734:	3101      	adds	r1, #1
 800b736:	f43f addf 	beq.w	800b2f8 <_strtod_l+0x490>
 800b73a:	4b23      	ldr	r3, [pc, #140]	; (800b7c8 <_strtod_l+0x960>)
 800b73c:	403b      	ands	r3, r7
 800b73e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b742:	f04f 0a00 	mov.w	sl, #0
 800b746:	9b04      	ldr	r3, [sp, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1a4      	bne.n	800b696 <_strtod_l+0x82e>
 800b74c:	e5de      	b.n	800b30c <_strtod_l+0x4a4>
 800b74e:	f04f 33ff 	mov.w	r3, #4294967295
 800b752:	e7ea      	b.n	800b72a <_strtod_l+0x8c2>
 800b754:	4613      	mov	r3, r2
 800b756:	e7e8      	b.n	800b72a <_strtod_l+0x8c2>
 800b758:	ea53 030a 	orrs.w	r3, r3, sl
 800b75c:	d08c      	beq.n	800b678 <_strtod_l+0x810>
 800b75e:	9b08      	ldr	r3, [sp, #32]
 800b760:	b1db      	cbz	r3, 800b79a <_strtod_l+0x932>
 800b762:	423b      	tst	r3, r7
 800b764:	d0ef      	beq.n	800b746 <_strtod_l+0x8de>
 800b766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b768:	9a04      	ldr	r2, [sp, #16]
 800b76a:	4650      	mov	r0, sl
 800b76c:	4659      	mov	r1, fp
 800b76e:	b1c3      	cbz	r3, 800b7a2 <_strtod_l+0x93a>
 800b770:	f7ff fb5c 	bl	800ae2c <sulp>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	ec51 0b18 	vmov	r0, r1, d8
 800b77c:	f7f4 fd86 	bl	800028c <__adddf3>
 800b780:	4682      	mov	sl, r0
 800b782:	468b      	mov	fp, r1
 800b784:	e7df      	b.n	800b746 <_strtod_l+0x8de>
 800b786:	4013      	ands	r3, r2
 800b788:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b78c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b790:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b794:	f04f 3aff 	mov.w	sl, #4294967295
 800b798:	e7d5      	b.n	800b746 <_strtod_l+0x8de>
 800b79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b79c:	ea13 0f0a 	tst.w	r3, sl
 800b7a0:	e7e0      	b.n	800b764 <_strtod_l+0x8fc>
 800b7a2:	f7ff fb43 	bl	800ae2c <sulp>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	ec51 0b18 	vmov	r0, r1, d8
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	4682      	mov	sl, r0
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	f7f5 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d0c1      	beq.n	800b746 <_strtod_l+0x8de>
 800b7c2:	e611      	b.n	800b3e8 <_strtod_l+0x580>
 800b7c4:	fffffc02 	.word	0xfffffc02
 800b7c8:	7ff00000 	.word	0x7ff00000
 800b7cc:	39500000 	.word	0x39500000
 800b7d0:	000fffff 	.word	0x000fffff
 800b7d4:	7fefffff 	.word	0x7fefffff
 800b7d8:	0800ff60 	.word	0x0800ff60
 800b7dc:	4631      	mov	r1, r6
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f002 f824 	bl	800d82c <__ratio>
 800b7e4:	ec59 8b10 	vmov	r8, r9, d0
 800b7e8:	ee10 0a10 	vmov	r0, s0
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	f7f5 f97c 	bl	8000af0 <__aeabi_dcmple>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d07a      	beq.n	800b8f2 <_strtod_l+0xa8a>
 800b7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d04a      	beq.n	800b898 <_strtod_l+0xa30>
 800b802:	4b95      	ldr	r3, [pc, #596]	; (800ba58 <_strtod_l+0xbf0>)
 800b804:	2200      	movs	r2, #0
 800b806:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b80a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ba58 <_strtod_l+0xbf0>
 800b80e:	f04f 0800 	mov.w	r8, #0
 800b812:	4b92      	ldr	r3, [pc, #584]	; (800ba5c <_strtod_l+0xbf4>)
 800b814:	403b      	ands	r3, r7
 800b816:	930d      	str	r3, [sp, #52]	; 0x34
 800b818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b81a:	4b91      	ldr	r3, [pc, #580]	; (800ba60 <_strtod_l+0xbf8>)
 800b81c:	429a      	cmp	r2, r3
 800b81e:	f040 80b0 	bne.w	800b982 <_strtod_l+0xb1a>
 800b822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b826:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b82a:	ec4b ab10 	vmov	d0, sl, fp
 800b82e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b832:	f001 ff23 	bl	800d67c <__ulp>
 800b836:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b83a:	ec53 2b10 	vmov	r2, r3, d0
 800b83e:	f7f4 fedb 	bl	80005f8 <__aeabi_dmul>
 800b842:	4652      	mov	r2, sl
 800b844:	465b      	mov	r3, fp
 800b846:	f7f4 fd21 	bl	800028c <__adddf3>
 800b84a:	460b      	mov	r3, r1
 800b84c:	4983      	ldr	r1, [pc, #524]	; (800ba5c <_strtod_l+0xbf4>)
 800b84e:	4a85      	ldr	r2, [pc, #532]	; (800ba64 <_strtod_l+0xbfc>)
 800b850:	4019      	ands	r1, r3
 800b852:	4291      	cmp	r1, r2
 800b854:	4682      	mov	sl, r0
 800b856:	d960      	bls.n	800b91a <_strtod_l+0xab2>
 800b858:	ee18 3a90 	vmov	r3, s17
 800b85c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b860:	4293      	cmp	r3, r2
 800b862:	d104      	bne.n	800b86e <_strtod_l+0xa06>
 800b864:	ee18 3a10 	vmov	r3, s16
 800b868:	3301      	adds	r3, #1
 800b86a:	f43f ad45 	beq.w	800b2f8 <_strtod_l+0x490>
 800b86e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ba70 <_strtod_l+0xc08>
 800b872:	f04f 3aff 	mov.w	sl, #4294967295
 800b876:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b878:	4620      	mov	r0, r4
 800b87a:	f001 fbcd 	bl	800d018 <_Bfree>
 800b87e:	9905      	ldr	r1, [sp, #20]
 800b880:	4620      	mov	r0, r4
 800b882:	f001 fbc9 	bl	800d018 <_Bfree>
 800b886:	4631      	mov	r1, r6
 800b888:	4620      	mov	r0, r4
 800b88a:	f001 fbc5 	bl	800d018 <_Bfree>
 800b88e:	4629      	mov	r1, r5
 800b890:	4620      	mov	r0, r4
 800b892:	f001 fbc1 	bl	800d018 <_Bfree>
 800b896:	e61a      	b.n	800b4ce <_strtod_l+0x666>
 800b898:	f1ba 0f00 	cmp.w	sl, #0
 800b89c:	d11b      	bne.n	800b8d6 <_strtod_l+0xa6e>
 800b89e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8a2:	b9f3      	cbnz	r3, 800b8e2 <_strtod_l+0xa7a>
 800b8a4:	4b6c      	ldr	r3, [pc, #432]	; (800ba58 <_strtod_l+0xbf0>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	4649      	mov	r1, r9
 800b8ac:	f7f5 f916 	bl	8000adc <__aeabi_dcmplt>
 800b8b0:	b9d0      	cbnz	r0, 800b8e8 <_strtod_l+0xa80>
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	4b6c      	ldr	r3, [pc, #432]	; (800ba68 <_strtod_l+0xc00>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f7f4 fe9d 	bl	80005f8 <__aeabi_dmul>
 800b8be:	4680      	mov	r8, r0
 800b8c0:	4689      	mov	r9, r1
 800b8c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b8ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b8cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b8d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8d4:	e79d      	b.n	800b812 <_strtod_l+0x9aa>
 800b8d6:	f1ba 0f01 	cmp.w	sl, #1
 800b8da:	d102      	bne.n	800b8e2 <_strtod_l+0xa7a>
 800b8dc:	2f00      	cmp	r7, #0
 800b8de:	f43f ad83 	beq.w	800b3e8 <_strtod_l+0x580>
 800b8e2:	4b62      	ldr	r3, [pc, #392]	; (800ba6c <_strtod_l+0xc04>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	e78e      	b.n	800b806 <_strtod_l+0x99e>
 800b8e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ba68 <_strtod_l+0xc00>
 800b8ec:	f04f 0800 	mov.w	r8, #0
 800b8f0:	e7e7      	b.n	800b8c2 <_strtod_l+0xa5a>
 800b8f2:	4b5d      	ldr	r3, [pc, #372]	; (800ba68 <_strtod_l+0xc00>)
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f7f4 fe7d 	bl	80005f8 <__aeabi_dmul>
 800b8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b900:	4680      	mov	r8, r0
 800b902:	4689      	mov	r9, r1
 800b904:	b933      	cbnz	r3, 800b914 <_strtod_l+0xaac>
 800b906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b90a:	900e      	str	r0, [sp, #56]	; 0x38
 800b90c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b90e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b912:	e7dd      	b.n	800b8d0 <_strtod_l+0xa68>
 800b914:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b918:	e7f9      	b.n	800b90e <_strtod_l+0xaa6>
 800b91a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1a8      	bne.n	800b876 <_strtod_l+0xa0e>
 800b924:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b92a:	0d1b      	lsrs	r3, r3, #20
 800b92c:	051b      	lsls	r3, r3, #20
 800b92e:	429a      	cmp	r2, r3
 800b930:	d1a1      	bne.n	800b876 <_strtod_l+0xa0e>
 800b932:	4640      	mov	r0, r8
 800b934:	4649      	mov	r1, r9
 800b936:	f7f5 f9bf 	bl	8000cb8 <__aeabi_d2lz>
 800b93a:	f7f4 fe2f 	bl	800059c <__aeabi_l2d>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	f7f4 fc9f 	bl	8000288 <__aeabi_dsub>
 800b94a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b94c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b950:	ea43 030a 	orr.w	r3, r3, sl
 800b954:	4313      	orrs	r3, r2
 800b956:	4680      	mov	r8, r0
 800b958:	4689      	mov	r9, r1
 800b95a:	d055      	beq.n	800ba08 <_strtod_l+0xba0>
 800b95c:	a336      	add	r3, pc, #216	; (adr r3, 800ba38 <_strtod_l+0xbd0>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f5 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800b966:	2800      	cmp	r0, #0
 800b968:	f47f acd0 	bne.w	800b30c <_strtod_l+0x4a4>
 800b96c:	a334      	add	r3, pc, #208	; (adr r3, 800ba40 <_strtod_l+0xbd8>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	4640      	mov	r0, r8
 800b974:	4649      	mov	r1, r9
 800b976:	f7f5 f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f43f af7b 	beq.w	800b876 <_strtod_l+0xa0e>
 800b980:	e4c4      	b.n	800b30c <_strtod_l+0x4a4>
 800b982:	9b04      	ldr	r3, [sp, #16]
 800b984:	b333      	cbz	r3, 800b9d4 <_strtod_l+0xb6c>
 800b986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b988:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b98c:	d822      	bhi.n	800b9d4 <_strtod_l+0xb6c>
 800b98e:	a32e      	add	r3, pc, #184	; (adr r3, 800ba48 <_strtod_l+0xbe0>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	4640      	mov	r0, r8
 800b996:	4649      	mov	r1, r9
 800b998:	f7f5 f8aa 	bl	8000af0 <__aeabi_dcmple>
 800b99c:	b1a0      	cbz	r0, 800b9c8 <_strtod_l+0xb60>
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	f7f5 f901 	bl	8000ba8 <__aeabi_d2uiz>
 800b9a6:	2801      	cmp	r0, #1
 800b9a8:	bf38      	it	cc
 800b9aa:	2001      	movcc	r0, #1
 800b9ac:	f7f4 fdaa 	bl	8000504 <__aeabi_ui2d>
 800b9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	bb23      	cbnz	r3, 800ba02 <_strtod_l+0xb9a>
 800b9b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9bc:	9010      	str	r0, [sp, #64]	; 0x40
 800b9be:	9311      	str	r3, [sp, #68]	; 0x44
 800b9c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9d0:	1a9b      	subs	r3, r3, r2
 800b9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b9dc:	eef0 0a68 	vmov.f32	s1, s17
 800b9e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9e4:	f001 fe4a 	bl	800d67c <__ulp>
 800b9e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9ec:	ec53 2b10 	vmov	r2, r3, d0
 800b9f0:	f7f4 fe02 	bl	80005f8 <__aeabi_dmul>
 800b9f4:	ec53 2b18 	vmov	r2, r3, d8
 800b9f8:	f7f4 fc48 	bl	800028c <__adddf3>
 800b9fc:	4682      	mov	sl, r0
 800b9fe:	468b      	mov	fp, r1
 800ba00:	e78d      	b.n	800b91e <_strtod_l+0xab6>
 800ba02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ba06:	e7db      	b.n	800b9c0 <_strtod_l+0xb58>
 800ba08:	a311      	add	r3, pc, #68	; (adr r3, 800ba50 <_strtod_l+0xbe8>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	f7f5 f865 	bl	8000adc <__aeabi_dcmplt>
 800ba12:	e7b2      	b.n	800b97a <_strtod_l+0xb12>
 800ba14:	2300      	movs	r3, #0
 800ba16:	930a      	str	r3, [sp, #40]	; 0x28
 800ba18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	f7ff ba6b 	b.w	800aef8 <_strtod_l+0x90>
 800ba22:	2a65      	cmp	r2, #101	; 0x65
 800ba24:	f43f ab5f 	beq.w	800b0e6 <_strtod_l+0x27e>
 800ba28:	2a45      	cmp	r2, #69	; 0x45
 800ba2a:	f43f ab5c 	beq.w	800b0e6 <_strtod_l+0x27e>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f7ff bb94 	b.w	800b15c <_strtod_l+0x2f4>
 800ba34:	f3af 8000 	nop.w
 800ba38:	94a03595 	.word	0x94a03595
 800ba3c:	3fdfffff 	.word	0x3fdfffff
 800ba40:	35afe535 	.word	0x35afe535
 800ba44:	3fe00000 	.word	0x3fe00000
 800ba48:	ffc00000 	.word	0xffc00000
 800ba4c:	41dfffff 	.word	0x41dfffff
 800ba50:	94a03595 	.word	0x94a03595
 800ba54:	3fcfffff 	.word	0x3fcfffff
 800ba58:	3ff00000 	.word	0x3ff00000
 800ba5c:	7ff00000 	.word	0x7ff00000
 800ba60:	7fe00000 	.word	0x7fe00000
 800ba64:	7c9fffff 	.word	0x7c9fffff
 800ba68:	3fe00000 	.word	0x3fe00000
 800ba6c:	bff00000 	.word	0xbff00000
 800ba70:	7fefffff 	.word	0x7fefffff

0800ba74 <_strtod_r>:
 800ba74:	4b01      	ldr	r3, [pc, #4]	; (800ba7c <_strtod_r+0x8>)
 800ba76:	f7ff b9f7 	b.w	800ae68 <_strtod_l>
 800ba7a:	bf00      	nop
 800ba7c:	20000174 	.word	0x20000174

0800ba80 <_strtol_l.constprop.0>:
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba86:	d001      	beq.n	800ba8c <_strtol_l.constprop.0+0xc>
 800ba88:	2b24      	cmp	r3, #36	; 0x24
 800ba8a:	d906      	bls.n	800ba9a <_strtol_l.constprop.0+0x1a>
 800ba8c:	f7fe fad4 	bl	800a038 <__errno>
 800ba90:	2316      	movs	r3, #22
 800ba92:	6003      	str	r3, [r0, #0]
 800ba94:	2000      	movs	r0, #0
 800ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb80 <_strtol_l.constprop.0+0x100>
 800ba9e:	460d      	mov	r5, r1
 800baa0:	462e      	mov	r6, r5
 800baa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baa6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800baaa:	f017 0708 	ands.w	r7, r7, #8
 800baae:	d1f7      	bne.n	800baa0 <_strtol_l.constprop.0+0x20>
 800bab0:	2c2d      	cmp	r4, #45	; 0x2d
 800bab2:	d132      	bne.n	800bb1a <_strtol_l.constprop.0+0x9a>
 800bab4:	782c      	ldrb	r4, [r5, #0]
 800bab6:	2701      	movs	r7, #1
 800bab8:	1cb5      	adds	r5, r6, #2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d05b      	beq.n	800bb76 <_strtol_l.constprop.0+0xf6>
 800babe:	2b10      	cmp	r3, #16
 800bac0:	d109      	bne.n	800bad6 <_strtol_l.constprop.0+0x56>
 800bac2:	2c30      	cmp	r4, #48	; 0x30
 800bac4:	d107      	bne.n	800bad6 <_strtol_l.constprop.0+0x56>
 800bac6:	782c      	ldrb	r4, [r5, #0]
 800bac8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bacc:	2c58      	cmp	r4, #88	; 0x58
 800bace:	d14d      	bne.n	800bb6c <_strtol_l.constprop.0+0xec>
 800bad0:	786c      	ldrb	r4, [r5, #1]
 800bad2:	2310      	movs	r3, #16
 800bad4:	3502      	adds	r5, #2
 800bad6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bada:	f108 38ff 	add.w	r8, r8, #4294967295
 800bade:	f04f 0c00 	mov.w	ip, #0
 800bae2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bae6:	4666      	mov	r6, ip
 800bae8:	fb03 8a19 	mls	sl, r3, r9, r8
 800baec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800baf0:	f1be 0f09 	cmp.w	lr, #9
 800baf4:	d816      	bhi.n	800bb24 <_strtol_l.constprop.0+0xa4>
 800baf6:	4674      	mov	r4, lr
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	dd24      	ble.n	800bb46 <_strtol_l.constprop.0+0xc6>
 800bafc:	f1bc 0f00 	cmp.w	ip, #0
 800bb00:	db1e      	blt.n	800bb40 <_strtol_l.constprop.0+0xc0>
 800bb02:	45b1      	cmp	r9, r6
 800bb04:	d31c      	bcc.n	800bb40 <_strtol_l.constprop.0+0xc0>
 800bb06:	d101      	bne.n	800bb0c <_strtol_l.constprop.0+0x8c>
 800bb08:	45a2      	cmp	sl, r4
 800bb0a:	db19      	blt.n	800bb40 <_strtol_l.constprop.0+0xc0>
 800bb0c:	fb06 4603 	mla	r6, r6, r3, r4
 800bb10:	f04f 0c01 	mov.w	ip, #1
 800bb14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb18:	e7e8      	b.n	800baec <_strtol_l.constprop.0+0x6c>
 800bb1a:	2c2b      	cmp	r4, #43	; 0x2b
 800bb1c:	bf04      	itt	eq
 800bb1e:	782c      	ldrbeq	r4, [r5, #0]
 800bb20:	1cb5      	addeq	r5, r6, #2
 800bb22:	e7ca      	b.n	800baba <_strtol_l.constprop.0+0x3a>
 800bb24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bb28:	f1be 0f19 	cmp.w	lr, #25
 800bb2c:	d801      	bhi.n	800bb32 <_strtol_l.constprop.0+0xb2>
 800bb2e:	3c37      	subs	r4, #55	; 0x37
 800bb30:	e7e2      	b.n	800baf8 <_strtol_l.constprop.0+0x78>
 800bb32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bb36:	f1be 0f19 	cmp.w	lr, #25
 800bb3a:	d804      	bhi.n	800bb46 <_strtol_l.constprop.0+0xc6>
 800bb3c:	3c57      	subs	r4, #87	; 0x57
 800bb3e:	e7db      	b.n	800baf8 <_strtol_l.constprop.0+0x78>
 800bb40:	f04f 3cff 	mov.w	ip, #4294967295
 800bb44:	e7e6      	b.n	800bb14 <_strtol_l.constprop.0+0x94>
 800bb46:	f1bc 0f00 	cmp.w	ip, #0
 800bb4a:	da05      	bge.n	800bb58 <_strtol_l.constprop.0+0xd8>
 800bb4c:	2322      	movs	r3, #34	; 0x22
 800bb4e:	6003      	str	r3, [r0, #0]
 800bb50:	4646      	mov	r6, r8
 800bb52:	b942      	cbnz	r2, 800bb66 <_strtol_l.constprop.0+0xe6>
 800bb54:	4630      	mov	r0, r6
 800bb56:	e79e      	b.n	800ba96 <_strtol_l.constprop.0+0x16>
 800bb58:	b107      	cbz	r7, 800bb5c <_strtol_l.constprop.0+0xdc>
 800bb5a:	4276      	negs	r6, r6
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	d0f9      	beq.n	800bb54 <_strtol_l.constprop.0+0xd4>
 800bb60:	f1bc 0f00 	cmp.w	ip, #0
 800bb64:	d000      	beq.n	800bb68 <_strtol_l.constprop.0+0xe8>
 800bb66:	1e69      	subs	r1, r5, #1
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	e7f3      	b.n	800bb54 <_strtol_l.constprop.0+0xd4>
 800bb6c:	2430      	movs	r4, #48	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1b1      	bne.n	800bad6 <_strtol_l.constprop.0+0x56>
 800bb72:	2308      	movs	r3, #8
 800bb74:	e7af      	b.n	800bad6 <_strtol_l.constprop.0+0x56>
 800bb76:	2c30      	cmp	r4, #48	; 0x30
 800bb78:	d0a5      	beq.n	800bac6 <_strtol_l.constprop.0+0x46>
 800bb7a:	230a      	movs	r3, #10
 800bb7c:	e7ab      	b.n	800bad6 <_strtol_l.constprop.0+0x56>
 800bb7e:	bf00      	nop
 800bb80:	0800ff89 	.word	0x0800ff89

0800bb84 <_strtol_r>:
 800bb84:	f7ff bf7c 	b.w	800ba80 <_strtol_l.constprop.0>

0800bb88 <quorem>:
 800bb88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	6903      	ldr	r3, [r0, #16]
 800bb8e:	690c      	ldr	r4, [r1, #16]
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	4607      	mov	r7, r0
 800bb94:	f2c0 8081 	blt.w	800bc9a <quorem+0x112>
 800bb98:	3c01      	subs	r4, #1
 800bb9a:	f101 0814 	add.w	r8, r1, #20
 800bb9e:	f100 0514 	add.w	r5, r0, #20
 800bba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbc0:	d331      	bcc.n	800bc26 <quorem+0x9e>
 800bbc2:	f04f 0e00 	mov.w	lr, #0
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	46ac      	mov	ip, r5
 800bbca:	46f2      	mov	sl, lr
 800bbcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbd0:	b293      	uxth	r3, r2
 800bbd2:	fb06 e303 	mla	r3, r6, r3, lr
 800bbd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	ebaa 0303 	sub.w	r3, sl, r3
 800bbe0:	f8dc a000 	ldr.w	sl, [ip]
 800bbe4:	0c12      	lsrs	r2, r2, #16
 800bbe6:	fa13 f38a 	uxtah	r3, r3, sl
 800bbea:	fb06 e202 	mla	r2, r6, r2, lr
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	9b00      	ldr	r3, [sp, #0]
 800bbf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbf6:	b292      	uxth	r2, r2
 800bbf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc00:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc04:	4581      	cmp	r9, r0
 800bc06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc0a:	f84c 3b04 	str.w	r3, [ip], #4
 800bc0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc12:	d2db      	bcs.n	800bbcc <quorem+0x44>
 800bc14:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc18:	b92b      	cbnz	r3, 800bc26 <quorem+0x9e>
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	3b04      	subs	r3, #4
 800bc1e:	429d      	cmp	r5, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	d32e      	bcc.n	800bc82 <quorem+0xfa>
 800bc24:	613c      	str	r4, [r7, #16]
 800bc26:	4638      	mov	r0, r7
 800bc28:	f001 fc82 	bl	800d530 <__mcmp>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	db24      	blt.n	800bc7a <quorem+0xf2>
 800bc30:	3601      	adds	r6, #1
 800bc32:	4628      	mov	r0, r5
 800bc34:	f04f 0c00 	mov.w	ip, #0
 800bc38:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc3c:	f8d0 e000 	ldr.w	lr, [r0]
 800bc40:	b293      	uxth	r3, r2
 800bc42:	ebac 0303 	sub.w	r3, ip, r3
 800bc46:	0c12      	lsrs	r2, r2, #16
 800bc48:	fa13 f38e 	uxtah	r3, r3, lr
 800bc4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc5a:	45c1      	cmp	r9, r8
 800bc5c:	f840 3b04 	str.w	r3, [r0], #4
 800bc60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc64:	d2e8      	bcs.n	800bc38 <quorem+0xb0>
 800bc66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6e:	b922      	cbnz	r2, 800bc7a <quorem+0xf2>
 800bc70:	3b04      	subs	r3, #4
 800bc72:	429d      	cmp	r5, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	d30a      	bcc.n	800bc8e <quorem+0x106>
 800bc78:	613c      	str	r4, [r7, #16]
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	b003      	add	sp, #12
 800bc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc82:	6812      	ldr	r2, [r2, #0]
 800bc84:	3b04      	subs	r3, #4
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	d1cc      	bne.n	800bc24 <quorem+0x9c>
 800bc8a:	3c01      	subs	r4, #1
 800bc8c:	e7c7      	b.n	800bc1e <quorem+0x96>
 800bc8e:	6812      	ldr	r2, [r2, #0]
 800bc90:	3b04      	subs	r3, #4
 800bc92:	2a00      	cmp	r2, #0
 800bc94:	d1f0      	bne.n	800bc78 <quorem+0xf0>
 800bc96:	3c01      	subs	r4, #1
 800bc98:	e7eb      	b.n	800bc72 <quorem+0xea>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	e7ee      	b.n	800bc7c <quorem+0xf4>
	...

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	ed2d 8b04 	vpush	{d8-d9}
 800bca8:	ec57 6b10 	vmov	r6, r7, d0
 800bcac:	b093      	sub	sp, #76	; 0x4c
 800bcae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcb4:	9106      	str	r1, [sp, #24]
 800bcb6:	ee10 aa10 	vmov	sl, s0
 800bcba:	4604      	mov	r4, r0
 800bcbc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcbe:	930c      	str	r3, [sp, #48]	; 0x30
 800bcc0:	46bb      	mov	fp, r7
 800bcc2:	b975      	cbnz	r5, 800bce2 <_dtoa_r+0x42>
 800bcc4:	2010      	movs	r0, #16
 800bcc6:	f001 f94d 	bl	800cf64 <malloc>
 800bcca:	4602      	mov	r2, r0
 800bccc:	6260      	str	r0, [r4, #36]	; 0x24
 800bcce:	b920      	cbnz	r0, 800bcda <_dtoa_r+0x3a>
 800bcd0:	4ba7      	ldr	r3, [pc, #668]	; (800bf70 <_dtoa_r+0x2d0>)
 800bcd2:	21ea      	movs	r1, #234	; 0xea
 800bcd4:	48a7      	ldr	r0, [pc, #668]	; (800bf74 <_dtoa_r+0x2d4>)
 800bcd6:	f002 f8ad 	bl	800de34 <__assert_func>
 800bcda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcde:	6005      	str	r5, [r0, #0]
 800bce0:	60c5      	str	r5, [r0, #12]
 800bce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce4:	6819      	ldr	r1, [r3, #0]
 800bce6:	b151      	cbz	r1, 800bcfe <_dtoa_r+0x5e>
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	604a      	str	r2, [r1, #4]
 800bcec:	2301      	movs	r3, #1
 800bcee:	4093      	lsls	r3, r2
 800bcf0:	608b      	str	r3, [r1, #8]
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f001 f990 	bl	800d018 <_Bfree>
 800bcf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	1e3b      	subs	r3, r7, #0
 800bd00:	bfaa      	itet	ge
 800bd02:	2300      	movge	r3, #0
 800bd04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd08:	f8c8 3000 	strge.w	r3, [r8]
 800bd0c:	4b9a      	ldr	r3, [pc, #616]	; (800bf78 <_dtoa_r+0x2d8>)
 800bd0e:	bfbc      	itt	lt
 800bd10:	2201      	movlt	r2, #1
 800bd12:	f8c8 2000 	strlt.w	r2, [r8]
 800bd16:	ea33 030b 	bics.w	r3, r3, fp
 800bd1a:	d11b      	bne.n	800bd54 <_dtoa_r+0xb4>
 800bd1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd1e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd28:	4333      	orrs	r3, r6
 800bd2a:	f000 8592 	beq.w	800c852 <_dtoa_r+0xbb2>
 800bd2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd30:	b963      	cbnz	r3, 800bd4c <_dtoa_r+0xac>
 800bd32:	4b92      	ldr	r3, [pc, #584]	; (800bf7c <_dtoa_r+0x2dc>)
 800bd34:	e022      	b.n	800bd7c <_dtoa_r+0xdc>
 800bd36:	4b92      	ldr	r3, [pc, #584]	; (800bf80 <_dtoa_r+0x2e0>)
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd3e:	6013      	str	r3, [r2, #0]
 800bd40:	9801      	ldr	r0, [sp, #4]
 800bd42:	b013      	add	sp, #76	; 0x4c
 800bd44:	ecbd 8b04 	vpop	{d8-d9}
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4c:	4b8b      	ldr	r3, [pc, #556]	; (800bf7c <_dtoa_r+0x2dc>)
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	3303      	adds	r3, #3
 800bd52:	e7f3      	b.n	800bd3c <_dtoa_r+0x9c>
 800bd54:	2200      	movs	r2, #0
 800bd56:	2300      	movs	r3, #0
 800bd58:	4650      	mov	r0, sl
 800bd5a:	4659      	mov	r1, fp
 800bd5c:	f7f4 feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd60:	ec4b ab19 	vmov	d9, sl, fp
 800bd64:	4680      	mov	r8, r0
 800bd66:	b158      	cbz	r0, 800bd80 <_dtoa_r+0xe0>
 800bd68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	6013      	str	r3, [r2, #0]
 800bd6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 856b 	beq.w	800c84c <_dtoa_r+0xbac>
 800bd76:	4883      	ldr	r0, [pc, #524]	; (800bf84 <_dtoa_r+0x2e4>)
 800bd78:	6018      	str	r0, [r3, #0]
 800bd7a:	1e43      	subs	r3, r0, #1
 800bd7c:	9301      	str	r3, [sp, #4]
 800bd7e:	e7df      	b.n	800bd40 <_dtoa_r+0xa0>
 800bd80:	ec4b ab10 	vmov	d0, sl, fp
 800bd84:	aa10      	add	r2, sp, #64	; 0x40
 800bd86:	a911      	add	r1, sp, #68	; 0x44
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f001 fcf3 	bl	800d774 <__d2b>
 800bd8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bd92:	ee08 0a10 	vmov	s16, r0
 800bd96:	2d00      	cmp	r5, #0
 800bd98:	f000 8084 	beq.w	800bea4 <_dtoa_r+0x204>
 800bd9c:	ee19 3a90 	vmov	r3, s19
 800bda0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bda8:	4656      	mov	r6, sl
 800bdaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bdae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bdb6:	4b74      	ldr	r3, [pc, #464]	; (800bf88 <_dtoa_r+0x2e8>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 fa63 	bl	8000288 <__aeabi_dsub>
 800bdc2:	a365      	add	r3, pc, #404	; (adr r3, 800bf58 <_dtoa_r+0x2b8>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fc16 	bl	80005f8 <__aeabi_dmul>
 800bdcc:	a364      	add	r3, pc, #400	; (adr r3, 800bf60 <_dtoa_r+0x2c0>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fa5b 	bl	800028c <__adddf3>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	4628      	mov	r0, r5
 800bdda:	460f      	mov	r7, r1
 800bddc:	f7f4 fba2 	bl	8000524 <__aeabi_i2d>
 800bde0:	a361      	add	r3, pc, #388	; (adr r3, 800bf68 <_dtoa_r+0x2c8>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fc07 	bl	80005f8 <__aeabi_dmul>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4630      	mov	r0, r6
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	f7f4 fa4b 	bl	800028c <__adddf3>
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	f7f4 fead 	bl	8000b58 <__aeabi_d2iz>
 800bdfe:	2200      	movs	r2, #0
 800be00:	9000      	str	r0, [sp, #0]
 800be02:	2300      	movs	r3, #0
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fe68 	bl	8000adc <__aeabi_dcmplt>
 800be0c:	b150      	cbz	r0, 800be24 <_dtoa_r+0x184>
 800be0e:	9800      	ldr	r0, [sp, #0]
 800be10:	f7f4 fb88 	bl	8000524 <__aeabi_i2d>
 800be14:	4632      	mov	r2, r6
 800be16:	463b      	mov	r3, r7
 800be18:	f7f4 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 800be1c:	b910      	cbnz	r0, 800be24 <_dtoa_r+0x184>
 800be1e:	9b00      	ldr	r3, [sp, #0]
 800be20:	3b01      	subs	r3, #1
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	9b00      	ldr	r3, [sp, #0]
 800be26:	2b16      	cmp	r3, #22
 800be28:	d85a      	bhi.n	800bee0 <_dtoa_r+0x240>
 800be2a:	9a00      	ldr	r2, [sp, #0]
 800be2c:	4b57      	ldr	r3, [pc, #348]	; (800bf8c <_dtoa_r+0x2ec>)
 800be2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	ec51 0b19 	vmov	r0, r1, d9
 800be3a:	f7f4 fe4f 	bl	8000adc <__aeabi_dcmplt>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d050      	beq.n	800bee4 <_dtoa_r+0x244>
 800be42:	9b00      	ldr	r3, [sp, #0]
 800be44:	3b01      	subs	r3, #1
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	2300      	movs	r3, #0
 800be4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be4e:	1b5d      	subs	r5, r3, r5
 800be50:	1e6b      	subs	r3, r5, #1
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	bf45      	ittet	mi
 800be56:	f1c5 0301 	rsbmi	r3, r5, #1
 800be5a:	9304      	strmi	r3, [sp, #16]
 800be5c:	2300      	movpl	r3, #0
 800be5e:	2300      	movmi	r3, #0
 800be60:	bf4c      	ite	mi
 800be62:	9305      	strmi	r3, [sp, #20]
 800be64:	9304      	strpl	r3, [sp, #16]
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	db3d      	blt.n	800bee8 <_dtoa_r+0x248>
 800be6c:	9b05      	ldr	r3, [sp, #20]
 800be6e:	9a00      	ldr	r2, [sp, #0]
 800be70:	920a      	str	r2, [sp, #40]	; 0x28
 800be72:	4413      	add	r3, r2
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	2300      	movs	r3, #0
 800be78:	9307      	str	r3, [sp, #28]
 800be7a:	9b06      	ldr	r3, [sp, #24]
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	f200 8089 	bhi.w	800bf94 <_dtoa_r+0x2f4>
 800be82:	2b05      	cmp	r3, #5
 800be84:	bfc4      	itt	gt
 800be86:	3b04      	subgt	r3, #4
 800be88:	9306      	strgt	r3, [sp, #24]
 800be8a:	9b06      	ldr	r3, [sp, #24]
 800be8c:	f1a3 0302 	sub.w	r3, r3, #2
 800be90:	bfcc      	ite	gt
 800be92:	2500      	movgt	r5, #0
 800be94:	2501      	movle	r5, #1
 800be96:	2b03      	cmp	r3, #3
 800be98:	f200 8087 	bhi.w	800bfaa <_dtoa_r+0x30a>
 800be9c:	e8df f003 	tbb	[pc, r3]
 800bea0:	59383a2d 	.word	0x59383a2d
 800bea4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bea8:	441d      	add	r5, r3
 800beaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800beae:	2b20      	cmp	r3, #32
 800beb0:	bfc1      	itttt	gt
 800beb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800beb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800beba:	fa0b f303 	lslgt.w	r3, fp, r3
 800bebe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bec2:	bfda      	itte	le
 800bec4:	f1c3 0320 	rsble	r3, r3, #32
 800bec8:	fa06 f003 	lslle.w	r0, r6, r3
 800becc:	4318      	orrgt	r0, r3
 800bece:	f7f4 fb19 	bl	8000504 <__aeabi_ui2d>
 800bed2:	2301      	movs	r3, #1
 800bed4:	4606      	mov	r6, r0
 800bed6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800beda:	3d01      	subs	r5, #1
 800bedc:	930e      	str	r3, [sp, #56]	; 0x38
 800bede:	e76a      	b.n	800bdb6 <_dtoa_r+0x116>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e7b2      	b.n	800be4a <_dtoa_r+0x1aa>
 800bee4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bee6:	e7b1      	b.n	800be4c <_dtoa_r+0x1ac>
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	9a00      	ldr	r2, [sp, #0]
 800beec:	1a9b      	subs	r3, r3, r2
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	4253      	negs	r3, r2
 800bef2:	9307      	str	r3, [sp, #28]
 800bef4:	2300      	movs	r3, #0
 800bef6:	930a      	str	r3, [sp, #40]	; 0x28
 800bef8:	e7bf      	b.n	800be7a <_dtoa_r+0x1da>
 800befa:	2300      	movs	r3, #0
 800befc:	9308      	str	r3, [sp, #32]
 800befe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	dc55      	bgt.n	800bfb0 <_dtoa_r+0x310>
 800bf04:	2301      	movs	r3, #1
 800bf06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf0e:	e00c      	b.n	800bf2a <_dtoa_r+0x28a>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e7f3      	b.n	800befc <_dtoa_r+0x25c>
 800bf14:	2300      	movs	r3, #0
 800bf16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf18:	9308      	str	r3, [sp, #32]
 800bf1a:	9b00      	ldr	r3, [sp, #0]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	9302      	str	r3, [sp, #8]
 800bf20:	3301      	adds	r3, #1
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	9303      	str	r3, [sp, #12]
 800bf26:	bfb8      	it	lt
 800bf28:	2301      	movlt	r3, #1
 800bf2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	6042      	str	r2, [r0, #4]
 800bf30:	2204      	movs	r2, #4
 800bf32:	f102 0614 	add.w	r6, r2, #20
 800bf36:	429e      	cmp	r6, r3
 800bf38:	6841      	ldr	r1, [r0, #4]
 800bf3a:	d93d      	bls.n	800bfb8 <_dtoa_r+0x318>
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f001 f82b 	bl	800cf98 <_Balloc>
 800bf42:	9001      	str	r0, [sp, #4]
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d13b      	bne.n	800bfc0 <_dtoa_r+0x320>
 800bf48:	4b11      	ldr	r3, [pc, #68]	; (800bf90 <_dtoa_r+0x2f0>)
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf50:	e6c0      	b.n	800bcd4 <_dtoa_r+0x34>
 800bf52:	2301      	movs	r3, #1
 800bf54:	e7df      	b.n	800bf16 <_dtoa_r+0x276>
 800bf56:	bf00      	nop
 800bf58:	636f4361 	.word	0x636f4361
 800bf5c:	3fd287a7 	.word	0x3fd287a7
 800bf60:	8b60c8b3 	.word	0x8b60c8b3
 800bf64:	3fc68a28 	.word	0x3fc68a28
 800bf68:	509f79fb 	.word	0x509f79fb
 800bf6c:	3fd34413 	.word	0x3fd34413
 800bf70:	08010096 	.word	0x08010096
 800bf74:	080100ad 	.word	0x080100ad
 800bf78:	7ff00000 	.word	0x7ff00000
 800bf7c:	08010092 	.word	0x08010092
 800bf80:	08010089 	.word	0x08010089
 800bf84:	0800ff09 	.word	0x0800ff09
 800bf88:	3ff80000 	.word	0x3ff80000
 800bf8c:	08010218 	.word	0x08010218
 800bf90:	08010108 	.word	0x08010108
 800bf94:	2501      	movs	r5, #1
 800bf96:	2300      	movs	r3, #0
 800bf98:	9306      	str	r3, [sp, #24]
 800bf9a:	9508      	str	r5, [sp, #32]
 800bf9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2312      	movs	r3, #18
 800bfa8:	e7b0      	b.n	800bf0c <_dtoa_r+0x26c>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	9308      	str	r3, [sp, #32]
 800bfae:	e7f5      	b.n	800bf9c <_dtoa_r+0x2fc>
 800bfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfb6:	e7b8      	b.n	800bf2a <_dtoa_r+0x28a>
 800bfb8:	3101      	adds	r1, #1
 800bfba:	6041      	str	r1, [r0, #4]
 800bfbc:	0052      	lsls	r2, r2, #1
 800bfbe:	e7b8      	b.n	800bf32 <_dtoa_r+0x292>
 800bfc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc2:	9a01      	ldr	r2, [sp, #4]
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	2b0e      	cmp	r3, #14
 800bfca:	f200 809d 	bhi.w	800c108 <_dtoa_r+0x468>
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	f000 809a 	beq.w	800c108 <_dtoa_r+0x468>
 800bfd4:	9b00      	ldr	r3, [sp, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dd32      	ble.n	800c040 <_dtoa_r+0x3a0>
 800bfda:	4ab7      	ldr	r2, [pc, #732]	; (800c2b8 <_dtoa_r+0x618>)
 800bfdc:	f003 030f 	and.w	r3, r3, #15
 800bfe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfe8:	9b00      	ldr	r3, [sp, #0]
 800bfea:	05d8      	lsls	r0, r3, #23
 800bfec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bff0:	d516      	bpl.n	800c020 <_dtoa_r+0x380>
 800bff2:	4bb2      	ldr	r3, [pc, #712]	; (800c2bc <_dtoa_r+0x61c>)
 800bff4:	ec51 0b19 	vmov	r0, r1, d9
 800bff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bffc:	f7f4 fc26 	bl	800084c <__aeabi_ddiv>
 800c000:	f007 070f 	and.w	r7, r7, #15
 800c004:	4682      	mov	sl, r0
 800c006:	468b      	mov	fp, r1
 800c008:	2503      	movs	r5, #3
 800c00a:	4eac      	ldr	r6, [pc, #688]	; (800c2bc <_dtoa_r+0x61c>)
 800c00c:	b957      	cbnz	r7, 800c024 <_dtoa_r+0x384>
 800c00e:	4642      	mov	r2, r8
 800c010:	464b      	mov	r3, r9
 800c012:	4650      	mov	r0, sl
 800c014:	4659      	mov	r1, fp
 800c016:	f7f4 fc19 	bl	800084c <__aeabi_ddiv>
 800c01a:	4682      	mov	sl, r0
 800c01c:	468b      	mov	fp, r1
 800c01e:	e028      	b.n	800c072 <_dtoa_r+0x3d2>
 800c020:	2502      	movs	r5, #2
 800c022:	e7f2      	b.n	800c00a <_dtoa_r+0x36a>
 800c024:	07f9      	lsls	r1, r7, #31
 800c026:	d508      	bpl.n	800c03a <_dtoa_r+0x39a>
 800c028:	4640      	mov	r0, r8
 800c02a:	4649      	mov	r1, r9
 800c02c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c030:	f7f4 fae2 	bl	80005f8 <__aeabi_dmul>
 800c034:	3501      	adds	r5, #1
 800c036:	4680      	mov	r8, r0
 800c038:	4689      	mov	r9, r1
 800c03a:	107f      	asrs	r7, r7, #1
 800c03c:	3608      	adds	r6, #8
 800c03e:	e7e5      	b.n	800c00c <_dtoa_r+0x36c>
 800c040:	f000 809b 	beq.w	800c17a <_dtoa_r+0x4da>
 800c044:	9b00      	ldr	r3, [sp, #0]
 800c046:	4f9d      	ldr	r7, [pc, #628]	; (800c2bc <_dtoa_r+0x61c>)
 800c048:	425e      	negs	r6, r3
 800c04a:	4b9b      	ldr	r3, [pc, #620]	; (800c2b8 <_dtoa_r+0x618>)
 800c04c:	f006 020f 	and.w	r2, r6, #15
 800c050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	ec51 0b19 	vmov	r0, r1, d9
 800c05c:	f7f4 facc 	bl	80005f8 <__aeabi_dmul>
 800c060:	1136      	asrs	r6, r6, #4
 800c062:	4682      	mov	sl, r0
 800c064:	468b      	mov	fp, r1
 800c066:	2300      	movs	r3, #0
 800c068:	2502      	movs	r5, #2
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d17a      	bne.n	800c164 <_dtoa_r+0x4c4>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1d3      	bne.n	800c01a <_dtoa_r+0x37a>
 800c072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8082 	beq.w	800c17e <_dtoa_r+0x4de>
 800c07a:	4b91      	ldr	r3, [pc, #580]	; (800c2c0 <_dtoa_r+0x620>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	4650      	mov	r0, sl
 800c080:	4659      	mov	r1, fp
 800c082:	f7f4 fd2b 	bl	8000adc <__aeabi_dcmplt>
 800c086:	2800      	cmp	r0, #0
 800c088:	d079      	beq.n	800c17e <_dtoa_r+0x4de>
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d076      	beq.n	800c17e <_dtoa_r+0x4de>
 800c090:	9b02      	ldr	r3, [sp, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd36      	ble.n	800c104 <_dtoa_r+0x464>
 800c096:	9b00      	ldr	r3, [sp, #0]
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	1e5f      	subs	r7, r3, #1
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4b88      	ldr	r3, [pc, #544]	; (800c2c4 <_dtoa_r+0x624>)
 800c0a2:	f7f4 faa9 	bl	80005f8 <__aeabi_dmul>
 800c0a6:	9e02      	ldr	r6, [sp, #8]
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	468b      	mov	fp, r1
 800c0ac:	3501      	adds	r5, #1
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f7f4 fa38 	bl	8000524 <__aeabi_i2d>
 800c0b4:	4652      	mov	r2, sl
 800c0b6:	465b      	mov	r3, fp
 800c0b8:	f7f4 fa9e 	bl	80005f8 <__aeabi_dmul>
 800c0bc:	4b82      	ldr	r3, [pc, #520]	; (800c2c8 <_dtoa_r+0x628>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f7f4 f8e4 	bl	800028c <__adddf3>
 800c0c4:	46d0      	mov	r8, sl
 800c0c6:	46d9      	mov	r9, fp
 800c0c8:	4682      	mov	sl, r0
 800c0ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c0ce:	2e00      	cmp	r6, #0
 800c0d0:	d158      	bne.n	800c184 <_dtoa_r+0x4e4>
 800c0d2:	4b7e      	ldr	r3, [pc, #504]	; (800c2cc <_dtoa_r+0x62c>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	4649      	mov	r1, r9
 800c0da:	f7f4 f8d5 	bl	8000288 <__aeabi_dsub>
 800c0de:	4652      	mov	r2, sl
 800c0e0:	465b      	mov	r3, fp
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4689      	mov	r9, r1
 800c0e6:	f7f4 fd17 	bl	8000b18 <__aeabi_dcmpgt>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f040 8295 	bne.w	800c61a <_dtoa_r+0x97a>
 800c0f0:	4652      	mov	r2, sl
 800c0f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 fcef 	bl	8000adc <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f040 8289 	bne.w	800c616 <_dtoa_r+0x976>
 800c104:	ec5b ab19 	vmov	sl, fp, d9
 800c108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f2c0 8148 	blt.w	800c3a0 <_dtoa_r+0x700>
 800c110:	9a00      	ldr	r2, [sp, #0]
 800c112:	2a0e      	cmp	r2, #14
 800c114:	f300 8144 	bgt.w	800c3a0 <_dtoa_r+0x700>
 800c118:	4b67      	ldr	r3, [pc, #412]	; (800c2b8 <_dtoa_r+0x618>)
 800c11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c11e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c124:	2b00      	cmp	r3, #0
 800c126:	f280 80d5 	bge.w	800c2d4 <_dtoa_r+0x634>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f300 80d1 	bgt.w	800c2d4 <_dtoa_r+0x634>
 800c132:	f040 826f 	bne.w	800c614 <_dtoa_r+0x974>
 800c136:	4b65      	ldr	r3, [pc, #404]	; (800c2cc <_dtoa_r+0x62c>)
 800c138:	2200      	movs	r2, #0
 800c13a:	4640      	mov	r0, r8
 800c13c:	4649      	mov	r1, r9
 800c13e:	f7f4 fa5b 	bl	80005f8 <__aeabi_dmul>
 800c142:	4652      	mov	r2, sl
 800c144:	465b      	mov	r3, fp
 800c146:	f7f4 fcdd 	bl	8000b04 <__aeabi_dcmpge>
 800c14a:	9e03      	ldr	r6, [sp, #12]
 800c14c:	4637      	mov	r7, r6
 800c14e:	2800      	cmp	r0, #0
 800c150:	f040 8245 	bne.w	800c5de <_dtoa_r+0x93e>
 800c154:	9d01      	ldr	r5, [sp, #4]
 800c156:	2331      	movs	r3, #49	; 0x31
 800c158:	f805 3b01 	strb.w	r3, [r5], #1
 800c15c:	9b00      	ldr	r3, [sp, #0]
 800c15e:	3301      	adds	r3, #1
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	e240      	b.n	800c5e6 <_dtoa_r+0x946>
 800c164:	07f2      	lsls	r2, r6, #31
 800c166:	d505      	bpl.n	800c174 <_dtoa_r+0x4d4>
 800c168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c16c:	f7f4 fa44 	bl	80005f8 <__aeabi_dmul>
 800c170:	3501      	adds	r5, #1
 800c172:	2301      	movs	r3, #1
 800c174:	1076      	asrs	r6, r6, #1
 800c176:	3708      	adds	r7, #8
 800c178:	e777      	b.n	800c06a <_dtoa_r+0x3ca>
 800c17a:	2502      	movs	r5, #2
 800c17c:	e779      	b.n	800c072 <_dtoa_r+0x3d2>
 800c17e:	9f00      	ldr	r7, [sp, #0]
 800c180:	9e03      	ldr	r6, [sp, #12]
 800c182:	e794      	b.n	800c0ae <_dtoa_r+0x40e>
 800c184:	9901      	ldr	r1, [sp, #4]
 800c186:	4b4c      	ldr	r3, [pc, #304]	; (800c2b8 <_dtoa_r+0x618>)
 800c188:	4431      	add	r1, r6
 800c18a:	910d      	str	r1, [sp, #52]	; 0x34
 800c18c:	9908      	ldr	r1, [sp, #32]
 800c18e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c192:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c196:	2900      	cmp	r1, #0
 800c198:	d043      	beq.n	800c222 <_dtoa_r+0x582>
 800c19a:	494d      	ldr	r1, [pc, #308]	; (800c2d0 <_dtoa_r+0x630>)
 800c19c:	2000      	movs	r0, #0
 800c19e:	f7f4 fb55 	bl	800084c <__aeabi_ddiv>
 800c1a2:	4652      	mov	r2, sl
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	f7f4 f86f 	bl	8000288 <__aeabi_dsub>
 800c1aa:	9d01      	ldr	r5, [sp, #4]
 800c1ac:	4682      	mov	sl, r0
 800c1ae:	468b      	mov	fp, r1
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	f7f4 fcd0 	bl	8000b58 <__aeabi_d2iz>
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	f7f4 f9b3 	bl	8000524 <__aeabi_i2d>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 f85f 	bl	8000288 <__aeabi_dsub>
 800c1ca:	3630      	adds	r6, #48	; 0x30
 800c1cc:	f805 6b01 	strb.w	r6, [r5], #1
 800c1d0:	4652      	mov	r2, sl
 800c1d2:	465b      	mov	r3, fp
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	f7f4 fc80 	bl	8000adc <__aeabi_dcmplt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d163      	bne.n	800c2a8 <_dtoa_r+0x608>
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	4936      	ldr	r1, [pc, #216]	; (800c2c0 <_dtoa_r+0x620>)
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7f4 f84e 	bl	8000288 <__aeabi_dsub>
 800c1ec:	4652      	mov	r2, sl
 800c1ee:	465b      	mov	r3, fp
 800c1f0:	f7f4 fc74 	bl	8000adc <__aeabi_dcmplt>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	f040 80b5 	bne.w	800c364 <_dtoa_r+0x6c4>
 800c1fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1fc:	429d      	cmp	r5, r3
 800c1fe:	d081      	beq.n	800c104 <_dtoa_r+0x464>
 800c200:	4b30      	ldr	r3, [pc, #192]	; (800c2c4 <_dtoa_r+0x624>)
 800c202:	2200      	movs	r2, #0
 800c204:	4650      	mov	r0, sl
 800c206:	4659      	mov	r1, fp
 800c208:	f7f4 f9f6 	bl	80005f8 <__aeabi_dmul>
 800c20c:	4b2d      	ldr	r3, [pc, #180]	; (800c2c4 <_dtoa_r+0x624>)
 800c20e:	4682      	mov	sl, r0
 800c210:	468b      	mov	fp, r1
 800c212:	4640      	mov	r0, r8
 800c214:	4649      	mov	r1, r9
 800c216:	2200      	movs	r2, #0
 800c218:	f7f4 f9ee 	bl	80005f8 <__aeabi_dmul>
 800c21c:	4680      	mov	r8, r0
 800c21e:	4689      	mov	r9, r1
 800c220:	e7c6      	b.n	800c1b0 <_dtoa_r+0x510>
 800c222:	4650      	mov	r0, sl
 800c224:	4659      	mov	r1, fp
 800c226:	f7f4 f9e7 	bl	80005f8 <__aeabi_dmul>
 800c22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c22c:	9d01      	ldr	r5, [sp, #4]
 800c22e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c230:	4682      	mov	sl, r0
 800c232:	468b      	mov	fp, r1
 800c234:	4649      	mov	r1, r9
 800c236:	4640      	mov	r0, r8
 800c238:	f7f4 fc8e 	bl	8000b58 <__aeabi_d2iz>
 800c23c:	4606      	mov	r6, r0
 800c23e:	f7f4 f971 	bl	8000524 <__aeabi_i2d>
 800c242:	3630      	adds	r6, #48	; 0x30
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 f81c 	bl	8000288 <__aeabi_dsub>
 800c250:	f805 6b01 	strb.w	r6, [r5], #1
 800c254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c256:	429d      	cmp	r5, r3
 800c258:	4680      	mov	r8, r0
 800c25a:	4689      	mov	r9, r1
 800c25c:	f04f 0200 	mov.w	r2, #0
 800c260:	d124      	bne.n	800c2ac <_dtoa_r+0x60c>
 800c262:	4b1b      	ldr	r3, [pc, #108]	; (800c2d0 <_dtoa_r+0x630>)
 800c264:	4650      	mov	r0, sl
 800c266:	4659      	mov	r1, fp
 800c268:	f7f4 f810 	bl	800028c <__adddf3>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 fc50 	bl	8000b18 <__aeabi_dcmpgt>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d173      	bne.n	800c364 <_dtoa_r+0x6c4>
 800c27c:	4652      	mov	r2, sl
 800c27e:	465b      	mov	r3, fp
 800c280:	4913      	ldr	r1, [pc, #76]	; (800c2d0 <_dtoa_r+0x630>)
 800c282:	2000      	movs	r0, #0
 800c284:	f7f4 f800 	bl	8000288 <__aeabi_dsub>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4640      	mov	r0, r8
 800c28e:	4649      	mov	r1, r9
 800c290:	f7f4 fc24 	bl	8000adc <__aeabi_dcmplt>
 800c294:	2800      	cmp	r0, #0
 800c296:	f43f af35 	beq.w	800c104 <_dtoa_r+0x464>
 800c29a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c29c:	1e6b      	subs	r3, r5, #1
 800c29e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2a4:	2b30      	cmp	r3, #48	; 0x30
 800c2a6:	d0f8      	beq.n	800c29a <_dtoa_r+0x5fa>
 800c2a8:	9700      	str	r7, [sp, #0]
 800c2aa:	e049      	b.n	800c340 <_dtoa_r+0x6a0>
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <_dtoa_r+0x624>)
 800c2ae:	f7f4 f9a3 	bl	80005f8 <__aeabi_dmul>
 800c2b2:	4680      	mov	r8, r0
 800c2b4:	4689      	mov	r9, r1
 800c2b6:	e7bd      	b.n	800c234 <_dtoa_r+0x594>
 800c2b8:	08010218 	.word	0x08010218
 800c2bc:	080101f0 	.word	0x080101f0
 800c2c0:	3ff00000 	.word	0x3ff00000
 800c2c4:	40240000 	.word	0x40240000
 800c2c8:	401c0000 	.word	0x401c0000
 800c2cc:	40140000 	.word	0x40140000
 800c2d0:	3fe00000 	.word	0x3fe00000
 800c2d4:	9d01      	ldr	r5, [sp, #4]
 800c2d6:	4656      	mov	r6, sl
 800c2d8:	465f      	mov	r7, fp
 800c2da:	4642      	mov	r2, r8
 800c2dc:	464b      	mov	r3, r9
 800c2de:	4630      	mov	r0, r6
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f7f4 fab3 	bl	800084c <__aeabi_ddiv>
 800c2e6:	f7f4 fc37 	bl	8000b58 <__aeabi_d2iz>
 800c2ea:	4682      	mov	sl, r0
 800c2ec:	f7f4 f91a 	bl	8000524 <__aeabi_i2d>
 800c2f0:	4642      	mov	r2, r8
 800c2f2:	464b      	mov	r3, r9
 800c2f4:	f7f4 f980 	bl	80005f8 <__aeabi_dmul>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	4639      	mov	r1, r7
 800c300:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c304:	f7f3 ffc0 	bl	8000288 <__aeabi_dsub>
 800c308:	f805 6b01 	strb.w	r6, [r5], #1
 800c30c:	9e01      	ldr	r6, [sp, #4]
 800c30e:	9f03      	ldr	r7, [sp, #12]
 800c310:	1bae      	subs	r6, r5, r6
 800c312:	42b7      	cmp	r7, r6
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	d135      	bne.n	800c386 <_dtoa_r+0x6e6>
 800c31a:	f7f3 ffb7 	bl	800028c <__adddf3>
 800c31e:	4642      	mov	r2, r8
 800c320:	464b      	mov	r3, r9
 800c322:	4606      	mov	r6, r0
 800c324:	460f      	mov	r7, r1
 800c326:	f7f4 fbf7 	bl	8000b18 <__aeabi_dcmpgt>
 800c32a:	b9d0      	cbnz	r0, 800c362 <_dtoa_r+0x6c2>
 800c32c:	4642      	mov	r2, r8
 800c32e:	464b      	mov	r3, r9
 800c330:	4630      	mov	r0, r6
 800c332:	4639      	mov	r1, r7
 800c334:	f7f4 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c338:	b110      	cbz	r0, 800c340 <_dtoa_r+0x6a0>
 800c33a:	f01a 0f01 	tst.w	sl, #1
 800c33e:	d110      	bne.n	800c362 <_dtoa_r+0x6c2>
 800c340:	4620      	mov	r0, r4
 800c342:	ee18 1a10 	vmov	r1, s16
 800c346:	f000 fe67 	bl	800d018 <_Bfree>
 800c34a:	2300      	movs	r3, #0
 800c34c:	9800      	ldr	r0, [sp, #0]
 800c34e:	702b      	strb	r3, [r5, #0]
 800c350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c352:	3001      	adds	r0, #1
 800c354:	6018      	str	r0, [r3, #0]
 800c356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f43f acf1 	beq.w	800bd40 <_dtoa_r+0xa0>
 800c35e:	601d      	str	r5, [r3, #0]
 800c360:	e4ee      	b.n	800bd40 <_dtoa_r+0xa0>
 800c362:	9f00      	ldr	r7, [sp, #0]
 800c364:	462b      	mov	r3, r5
 800c366:	461d      	mov	r5, r3
 800c368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c36c:	2a39      	cmp	r2, #57	; 0x39
 800c36e:	d106      	bne.n	800c37e <_dtoa_r+0x6de>
 800c370:	9a01      	ldr	r2, [sp, #4]
 800c372:	429a      	cmp	r2, r3
 800c374:	d1f7      	bne.n	800c366 <_dtoa_r+0x6c6>
 800c376:	9901      	ldr	r1, [sp, #4]
 800c378:	2230      	movs	r2, #48	; 0x30
 800c37a:	3701      	adds	r7, #1
 800c37c:	700a      	strb	r2, [r1, #0]
 800c37e:	781a      	ldrb	r2, [r3, #0]
 800c380:	3201      	adds	r2, #1
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	e790      	b.n	800c2a8 <_dtoa_r+0x608>
 800c386:	4ba6      	ldr	r3, [pc, #664]	; (800c620 <_dtoa_r+0x980>)
 800c388:	2200      	movs	r2, #0
 800c38a:	f7f4 f935 	bl	80005f8 <__aeabi_dmul>
 800c38e:	2200      	movs	r2, #0
 800c390:	2300      	movs	r3, #0
 800c392:	4606      	mov	r6, r0
 800c394:	460f      	mov	r7, r1
 800c396:	f7f4 fb97 	bl	8000ac8 <__aeabi_dcmpeq>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d09d      	beq.n	800c2da <_dtoa_r+0x63a>
 800c39e:	e7cf      	b.n	800c340 <_dtoa_r+0x6a0>
 800c3a0:	9a08      	ldr	r2, [sp, #32]
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	f000 80d7 	beq.w	800c556 <_dtoa_r+0x8b6>
 800c3a8:	9a06      	ldr	r2, [sp, #24]
 800c3aa:	2a01      	cmp	r2, #1
 800c3ac:	f300 80ba 	bgt.w	800c524 <_dtoa_r+0x884>
 800c3b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	f000 80b2 	beq.w	800c51c <_dtoa_r+0x87c>
 800c3b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3bc:	9e07      	ldr	r6, [sp, #28]
 800c3be:	9d04      	ldr	r5, [sp, #16]
 800c3c0:	9a04      	ldr	r2, [sp, #16]
 800c3c2:	441a      	add	r2, r3
 800c3c4:	9204      	str	r2, [sp, #16]
 800c3c6:	9a05      	ldr	r2, [sp, #20]
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	441a      	add	r2, r3
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	9205      	str	r2, [sp, #20]
 800c3d0:	f000 ff24 	bl	800d21c <__i2b>
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	dd0c      	ble.n	800c3f4 <_dtoa_r+0x754>
 800c3da:	9b05      	ldr	r3, [sp, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd09      	ble.n	800c3f4 <_dtoa_r+0x754>
 800c3e0:	42ab      	cmp	r3, r5
 800c3e2:	9a04      	ldr	r2, [sp, #16]
 800c3e4:	bfa8      	it	ge
 800c3e6:	462b      	movge	r3, r5
 800c3e8:	1ad2      	subs	r2, r2, r3
 800c3ea:	9204      	str	r2, [sp, #16]
 800c3ec:	9a05      	ldr	r2, [sp, #20]
 800c3ee:	1aed      	subs	r5, r5, r3
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	9305      	str	r3, [sp, #20]
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	b31b      	cbz	r3, 800c440 <_dtoa_r+0x7a0>
 800c3f8:	9b08      	ldr	r3, [sp, #32]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 80af 	beq.w	800c55e <_dtoa_r+0x8be>
 800c400:	2e00      	cmp	r6, #0
 800c402:	dd13      	ble.n	800c42c <_dtoa_r+0x78c>
 800c404:	4639      	mov	r1, r7
 800c406:	4632      	mov	r2, r6
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 ffc7 	bl	800d39c <__pow5mult>
 800c40e:	ee18 2a10 	vmov	r2, s16
 800c412:	4601      	mov	r1, r0
 800c414:	4607      	mov	r7, r0
 800c416:	4620      	mov	r0, r4
 800c418:	f000 ff16 	bl	800d248 <__multiply>
 800c41c:	ee18 1a10 	vmov	r1, s16
 800c420:	4680      	mov	r8, r0
 800c422:	4620      	mov	r0, r4
 800c424:	f000 fdf8 	bl	800d018 <_Bfree>
 800c428:	ee08 8a10 	vmov	s16, r8
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	1b9a      	subs	r2, r3, r6
 800c430:	d006      	beq.n	800c440 <_dtoa_r+0x7a0>
 800c432:	ee18 1a10 	vmov	r1, s16
 800c436:	4620      	mov	r0, r4
 800c438:	f000 ffb0 	bl	800d39c <__pow5mult>
 800c43c:	ee08 0a10 	vmov	s16, r0
 800c440:	2101      	movs	r1, #1
 800c442:	4620      	mov	r0, r4
 800c444:	f000 feea 	bl	800d21c <__i2b>
 800c448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	4606      	mov	r6, r0
 800c44e:	f340 8088 	ble.w	800c562 <_dtoa_r+0x8c2>
 800c452:	461a      	mov	r2, r3
 800c454:	4601      	mov	r1, r0
 800c456:	4620      	mov	r0, r4
 800c458:	f000 ffa0 	bl	800d39c <__pow5mult>
 800c45c:	9b06      	ldr	r3, [sp, #24]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	4606      	mov	r6, r0
 800c462:	f340 8081 	ble.w	800c568 <_dtoa_r+0x8c8>
 800c466:	f04f 0800 	mov.w	r8, #0
 800c46a:	6933      	ldr	r3, [r6, #16]
 800c46c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c470:	6918      	ldr	r0, [r3, #16]
 800c472:	f000 fe83 	bl	800d17c <__hi0bits>
 800c476:	f1c0 0020 	rsb	r0, r0, #32
 800c47a:	9b05      	ldr	r3, [sp, #20]
 800c47c:	4418      	add	r0, r3
 800c47e:	f010 001f 	ands.w	r0, r0, #31
 800c482:	f000 8092 	beq.w	800c5aa <_dtoa_r+0x90a>
 800c486:	f1c0 0320 	rsb	r3, r0, #32
 800c48a:	2b04      	cmp	r3, #4
 800c48c:	f340 808a 	ble.w	800c5a4 <_dtoa_r+0x904>
 800c490:	f1c0 001c 	rsb	r0, r0, #28
 800c494:	9b04      	ldr	r3, [sp, #16]
 800c496:	4403      	add	r3, r0
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	9b05      	ldr	r3, [sp, #20]
 800c49c:	4403      	add	r3, r0
 800c49e:	4405      	add	r5, r0
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	9b04      	ldr	r3, [sp, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	dd07      	ble.n	800c4b8 <_dtoa_r+0x818>
 800c4a8:	ee18 1a10 	vmov	r1, s16
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 ffce 	bl	800d450 <__lshift>
 800c4b4:	ee08 0a10 	vmov	s16, r0
 800c4b8:	9b05      	ldr	r3, [sp, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd05      	ble.n	800c4ca <_dtoa_r+0x82a>
 800c4be:	4631      	mov	r1, r6
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 ffc4 	bl	800d450 <__lshift>
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d06e      	beq.n	800c5ae <_dtoa_r+0x90e>
 800c4d0:	ee18 0a10 	vmov	r0, s16
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	f001 f82b 	bl	800d530 <__mcmp>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	da67      	bge.n	800c5ae <_dtoa_r+0x90e>
 800c4de:	9b00      	ldr	r3, [sp, #0]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	ee18 1a10 	vmov	r1, s16
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	220a      	movs	r2, #10
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f000 fdb5 	bl	800d05c <__multadd>
 800c4f2:	9b08      	ldr	r3, [sp, #32]
 800c4f4:	ee08 0a10 	vmov	s16, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 81b1 	beq.w	800c860 <_dtoa_r+0xbc0>
 800c4fe:	2300      	movs	r3, #0
 800c500:	4639      	mov	r1, r7
 800c502:	220a      	movs	r2, #10
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fda9 	bl	800d05c <__multadd>
 800c50a:	9b02      	ldr	r3, [sp, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	4607      	mov	r7, r0
 800c510:	f300 808e 	bgt.w	800c630 <_dtoa_r+0x990>
 800c514:	9b06      	ldr	r3, [sp, #24]
 800c516:	2b02      	cmp	r3, #2
 800c518:	dc51      	bgt.n	800c5be <_dtoa_r+0x91e>
 800c51a:	e089      	b.n	800c630 <_dtoa_r+0x990>
 800c51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c51e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c522:	e74b      	b.n	800c3bc <_dtoa_r+0x71c>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	1e5e      	subs	r6, r3, #1
 800c528:	9b07      	ldr	r3, [sp, #28]
 800c52a:	42b3      	cmp	r3, r6
 800c52c:	bfbf      	itttt	lt
 800c52e:	9b07      	ldrlt	r3, [sp, #28]
 800c530:	9607      	strlt	r6, [sp, #28]
 800c532:	1af2      	sublt	r2, r6, r3
 800c534:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c536:	bfb6      	itet	lt
 800c538:	189b      	addlt	r3, r3, r2
 800c53a:	1b9e      	subge	r6, r3, r6
 800c53c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	bfb8      	it	lt
 800c542:	2600      	movlt	r6, #0
 800c544:	2b00      	cmp	r3, #0
 800c546:	bfb7      	itett	lt
 800c548:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c54c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c550:	1a9d      	sublt	r5, r3, r2
 800c552:	2300      	movlt	r3, #0
 800c554:	e734      	b.n	800c3c0 <_dtoa_r+0x720>
 800c556:	9e07      	ldr	r6, [sp, #28]
 800c558:	9d04      	ldr	r5, [sp, #16]
 800c55a:	9f08      	ldr	r7, [sp, #32]
 800c55c:	e73b      	b.n	800c3d6 <_dtoa_r+0x736>
 800c55e:	9a07      	ldr	r2, [sp, #28]
 800c560:	e767      	b.n	800c432 <_dtoa_r+0x792>
 800c562:	9b06      	ldr	r3, [sp, #24]
 800c564:	2b01      	cmp	r3, #1
 800c566:	dc18      	bgt.n	800c59a <_dtoa_r+0x8fa>
 800c568:	f1ba 0f00 	cmp.w	sl, #0
 800c56c:	d115      	bne.n	800c59a <_dtoa_r+0x8fa>
 800c56e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c572:	b993      	cbnz	r3, 800c59a <_dtoa_r+0x8fa>
 800c574:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c578:	0d1b      	lsrs	r3, r3, #20
 800c57a:	051b      	lsls	r3, r3, #20
 800c57c:	b183      	cbz	r3, 800c5a0 <_dtoa_r+0x900>
 800c57e:	9b04      	ldr	r3, [sp, #16]
 800c580:	3301      	adds	r3, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	9b05      	ldr	r3, [sp, #20]
 800c586:	3301      	adds	r3, #1
 800c588:	9305      	str	r3, [sp, #20]
 800c58a:	f04f 0801 	mov.w	r8, #1
 800c58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c590:	2b00      	cmp	r3, #0
 800c592:	f47f af6a 	bne.w	800c46a <_dtoa_r+0x7ca>
 800c596:	2001      	movs	r0, #1
 800c598:	e76f      	b.n	800c47a <_dtoa_r+0x7da>
 800c59a:	f04f 0800 	mov.w	r8, #0
 800c59e:	e7f6      	b.n	800c58e <_dtoa_r+0x8ee>
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	e7f4      	b.n	800c58e <_dtoa_r+0x8ee>
 800c5a4:	f43f af7d 	beq.w	800c4a2 <_dtoa_r+0x802>
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	301c      	adds	r0, #28
 800c5ac:	e772      	b.n	800c494 <_dtoa_r+0x7f4>
 800c5ae:	9b03      	ldr	r3, [sp, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc37      	bgt.n	800c624 <_dtoa_r+0x984>
 800c5b4:	9b06      	ldr	r3, [sp, #24]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	dd34      	ble.n	800c624 <_dtoa_r+0x984>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	9302      	str	r3, [sp, #8]
 800c5be:	9b02      	ldr	r3, [sp, #8]
 800c5c0:	b96b      	cbnz	r3, 800c5de <_dtoa_r+0x93e>
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	2205      	movs	r2, #5
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 fd48 	bl	800d05c <__multadd>
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	ee18 0a10 	vmov	r0, s16
 800c5d4:	f000 ffac 	bl	800d530 <__mcmp>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f73f adbb 	bgt.w	800c154 <_dtoa_r+0x4b4>
 800c5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e0:	9d01      	ldr	r5, [sp, #4]
 800c5e2:	43db      	mvns	r3, r3
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	f04f 0800 	mov.w	r8, #0
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 fd13 	bl	800d018 <_Bfree>
 800c5f2:	2f00      	cmp	r7, #0
 800c5f4:	f43f aea4 	beq.w	800c340 <_dtoa_r+0x6a0>
 800c5f8:	f1b8 0f00 	cmp.w	r8, #0
 800c5fc:	d005      	beq.n	800c60a <_dtoa_r+0x96a>
 800c5fe:	45b8      	cmp	r8, r7
 800c600:	d003      	beq.n	800c60a <_dtoa_r+0x96a>
 800c602:	4641      	mov	r1, r8
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fd07 	bl	800d018 <_Bfree>
 800c60a:	4639      	mov	r1, r7
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 fd03 	bl	800d018 <_Bfree>
 800c612:	e695      	b.n	800c340 <_dtoa_r+0x6a0>
 800c614:	2600      	movs	r6, #0
 800c616:	4637      	mov	r7, r6
 800c618:	e7e1      	b.n	800c5de <_dtoa_r+0x93e>
 800c61a:	9700      	str	r7, [sp, #0]
 800c61c:	4637      	mov	r7, r6
 800c61e:	e599      	b.n	800c154 <_dtoa_r+0x4b4>
 800c620:	40240000 	.word	0x40240000
 800c624:	9b08      	ldr	r3, [sp, #32]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 80ca 	beq.w	800c7c0 <_dtoa_r+0xb20>
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	9302      	str	r3, [sp, #8]
 800c630:	2d00      	cmp	r5, #0
 800c632:	dd05      	ble.n	800c640 <_dtoa_r+0x9a0>
 800c634:	4639      	mov	r1, r7
 800c636:	462a      	mov	r2, r5
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 ff09 	bl	800d450 <__lshift>
 800c63e:	4607      	mov	r7, r0
 800c640:	f1b8 0f00 	cmp.w	r8, #0
 800c644:	d05b      	beq.n	800c6fe <_dtoa_r+0xa5e>
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 fca5 	bl	800cf98 <_Balloc>
 800c64e:	4605      	mov	r5, r0
 800c650:	b928      	cbnz	r0, 800c65e <_dtoa_r+0x9be>
 800c652:	4b87      	ldr	r3, [pc, #540]	; (800c870 <_dtoa_r+0xbd0>)
 800c654:	4602      	mov	r2, r0
 800c656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c65a:	f7ff bb3b 	b.w	800bcd4 <_dtoa_r+0x34>
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	3202      	adds	r2, #2
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	f107 010c 	add.w	r1, r7, #12
 800c668:	300c      	adds	r0, #12
 800c66a:	f7fd fd0f 	bl	800a08c <memcpy>
 800c66e:	2201      	movs	r2, #1
 800c670:	4629      	mov	r1, r5
 800c672:	4620      	mov	r0, r4
 800c674:	f000 feec 	bl	800d450 <__lshift>
 800c678:	9b01      	ldr	r3, [sp, #4]
 800c67a:	f103 0901 	add.w	r9, r3, #1
 800c67e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c682:	4413      	add	r3, r2
 800c684:	9305      	str	r3, [sp, #20]
 800c686:	f00a 0301 	and.w	r3, sl, #1
 800c68a:	46b8      	mov	r8, r7
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	4607      	mov	r7, r0
 800c690:	4631      	mov	r1, r6
 800c692:	ee18 0a10 	vmov	r0, s16
 800c696:	f7ff fa77 	bl	800bb88 <quorem>
 800c69a:	4641      	mov	r1, r8
 800c69c:	9002      	str	r0, [sp, #8]
 800c69e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c6a2:	ee18 0a10 	vmov	r0, s16
 800c6a6:	f000 ff43 	bl	800d530 <__mcmp>
 800c6aa:	463a      	mov	r2, r7
 800c6ac:	9003      	str	r0, [sp, #12]
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 ff59 	bl	800d568 <__mdiff>
 800c6b6:	68c2      	ldr	r2, [r0, #12]
 800c6b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c6bc:	4605      	mov	r5, r0
 800c6be:	bb02      	cbnz	r2, 800c702 <_dtoa_r+0xa62>
 800c6c0:	4601      	mov	r1, r0
 800c6c2:	ee18 0a10 	vmov	r0, s16
 800c6c6:	f000 ff33 	bl	800d530 <__mcmp>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	9207      	str	r2, [sp, #28]
 800c6d2:	f000 fca1 	bl	800d018 <_Bfree>
 800c6d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c6da:	ea43 0102 	orr.w	r1, r3, r2
 800c6de:	9b04      	ldr	r3, [sp, #16]
 800c6e0:	430b      	orrs	r3, r1
 800c6e2:	464d      	mov	r5, r9
 800c6e4:	d10f      	bne.n	800c706 <_dtoa_r+0xa66>
 800c6e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6ea:	d02a      	beq.n	800c742 <_dtoa_r+0xaa2>
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	dd02      	ble.n	800c6f8 <_dtoa_r+0xa58>
 800c6f2:	9b02      	ldr	r3, [sp, #8]
 800c6f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c6f8:	f88b a000 	strb.w	sl, [fp]
 800c6fc:	e775      	b.n	800c5ea <_dtoa_r+0x94a>
 800c6fe:	4638      	mov	r0, r7
 800c700:	e7ba      	b.n	800c678 <_dtoa_r+0x9d8>
 800c702:	2201      	movs	r2, #1
 800c704:	e7e2      	b.n	800c6cc <_dtoa_r+0xa2c>
 800c706:	9b03      	ldr	r3, [sp, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	db04      	blt.n	800c716 <_dtoa_r+0xa76>
 800c70c:	9906      	ldr	r1, [sp, #24]
 800c70e:	430b      	orrs	r3, r1
 800c710:	9904      	ldr	r1, [sp, #16]
 800c712:	430b      	orrs	r3, r1
 800c714:	d122      	bne.n	800c75c <_dtoa_r+0xabc>
 800c716:	2a00      	cmp	r2, #0
 800c718:	ddee      	ble.n	800c6f8 <_dtoa_r+0xa58>
 800c71a:	ee18 1a10 	vmov	r1, s16
 800c71e:	2201      	movs	r2, #1
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fe95 	bl	800d450 <__lshift>
 800c726:	4631      	mov	r1, r6
 800c728:	ee08 0a10 	vmov	s16, r0
 800c72c:	f000 ff00 	bl	800d530 <__mcmp>
 800c730:	2800      	cmp	r0, #0
 800c732:	dc03      	bgt.n	800c73c <_dtoa_r+0xa9c>
 800c734:	d1e0      	bne.n	800c6f8 <_dtoa_r+0xa58>
 800c736:	f01a 0f01 	tst.w	sl, #1
 800c73a:	d0dd      	beq.n	800c6f8 <_dtoa_r+0xa58>
 800c73c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c740:	d1d7      	bne.n	800c6f2 <_dtoa_r+0xa52>
 800c742:	2339      	movs	r3, #57	; 0x39
 800c744:	f88b 3000 	strb.w	r3, [fp]
 800c748:	462b      	mov	r3, r5
 800c74a:	461d      	mov	r5, r3
 800c74c:	3b01      	subs	r3, #1
 800c74e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c752:	2a39      	cmp	r2, #57	; 0x39
 800c754:	d071      	beq.n	800c83a <_dtoa_r+0xb9a>
 800c756:	3201      	adds	r2, #1
 800c758:	701a      	strb	r2, [r3, #0]
 800c75a:	e746      	b.n	800c5ea <_dtoa_r+0x94a>
 800c75c:	2a00      	cmp	r2, #0
 800c75e:	dd07      	ble.n	800c770 <_dtoa_r+0xad0>
 800c760:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c764:	d0ed      	beq.n	800c742 <_dtoa_r+0xaa2>
 800c766:	f10a 0301 	add.w	r3, sl, #1
 800c76a:	f88b 3000 	strb.w	r3, [fp]
 800c76e:	e73c      	b.n	800c5ea <_dtoa_r+0x94a>
 800c770:	9b05      	ldr	r3, [sp, #20]
 800c772:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c776:	4599      	cmp	r9, r3
 800c778:	d047      	beq.n	800c80a <_dtoa_r+0xb6a>
 800c77a:	ee18 1a10 	vmov	r1, s16
 800c77e:	2300      	movs	r3, #0
 800c780:	220a      	movs	r2, #10
 800c782:	4620      	mov	r0, r4
 800c784:	f000 fc6a 	bl	800d05c <__multadd>
 800c788:	45b8      	cmp	r8, r7
 800c78a:	ee08 0a10 	vmov	s16, r0
 800c78e:	f04f 0300 	mov.w	r3, #0
 800c792:	f04f 020a 	mov.w	r2, #10
 800c796:	4641      	mov	r1, r8
 800c798:	4620      	mov	r0, r4
 800c79a:	d106      	bne.n	800c7aa <_dtoa_r+0xb0a>
 800c79c:	f000 fc5e 	bl	800d05c <__multadd>
 800c7a0:	4680      	mov	r8, r0
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	f109 0901 	add.w	r9, r9, #1
 800c7a8:	e772      	b.n	800c690 <_dtoa_r+0x9f0>
 800c7aa:	f000 fc57 	bl	800d05c <__multadd>
 800c7ae:	4639      	mov	r1, r7
 800c7b0:	4680      	mov	r8, r0
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	220a      	movs	r2, #10
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 fc50 	bl	800d05c <__multadd>
 800c7bc:	4607      	mov	r7, r0
 800c7be:	e7f1      	b.n	800c7a4 <_dtoa_r+0xb04>
 800c7c0:	9b03      	ldr	r3, [sp, #12]
 800c7c2:	9302      	str	r3, [sp, #8]
 800c7c4:	9d01      	ldr	r5, [sp, #4]
 800c7c6:	ee18 0a10 	vmov	r0, s16
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	f7ff f9dc 	bl	800bb88 <quorem>
 800c7d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	f805 ab01 	strb.w	sl, [r5], #1
 800c7da:	1aea      	subs	r2, r5, r3
 800c7dc:	9b02      	ldr	r3, [sp, #8]
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	dd09      	ble.n	800c7f6 <_dtoa_r+0xb56>
 800c7e2:	ee18 1a10 	vmov	r1, s16
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	220a      	movs	r2, #10
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fc36 	bl	800d05c <__multadd>
 800c7f0:	ee08 0a10 	vmov	s16, r0
 800c7f4:	e7e7      	b.n	800c7c6 <_dtoa_r+0xb26>
 800c7f6:	9b02      	ldr	r3, [sp, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	bfc8      	it	gt
 800c7fc:	461d      	movgt	r5, r3
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	bfd8      	it	le
 800c802:	2501      	movle	r5, #1
 800c804:	441d      	add	r5, r3
 800c806:	f04f 0800 	mov.w	r8, #0
 800c80a:	ee18 1a10 	vmov	r1, s16
 800c80e:	2201      	movs	r2, #1
 800c810:	4620      	mov	r0, r4
 800c812:	f000 fe1d 	bl	800d450 <__lshift>
 800c816:	4631      	mov	r1, r6
 800c818:	ee08 0a10 	vmov	s16, r0
 800c81c:	f000 fe88 	bl	800d530 <__mcmp>
 800c820:	2800      	cmp	r0, #0
 800c822:	dc91      	bgt.n	800c748 <_dtoa_r+0xaa8>
 800c824:	d102      	bne.n	800c82c <_dtoa_r+0xb8c>
 800c826:	f01a 0f01 	tst.w	sl, #1
 800c82a:	d18d      	bne.n	800c748 <_dtoa_r+0xaa8>
 800c82c:	462b      	mov	r3, r5
 800c82e:	461d      	mov	r5, r3
 800c830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c834:	2a30      	cmp	r2, #48	; 0x30
 800c836:	d0fa      	beq.n	800c82e <_dtoa_r+0xb8e>
 800c838:	e6d7      	b.n	800c5ea <_dtoa_r+0x94a>
 800c83a:	9a01      	ldr	r2, [sp, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d184      	bne.n	800c74a <_dtoa_r+0xaaa>
 800c840:	9b00      	ldr	r3, [sp, #0]
 800c842:	3301      	adds	r3, #1
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	2331      	movs	r3, #49	; 0x31
 800c848:	7013      	strb	r3, [r2, #0]
 800c84a:	e6ce      	b.n	800c5ea <_dtoa_r+0x94a>
 800c84c:	4b09      	ldr	r3, [pc, #36]	; (800c874 <_dtoa_r+0xbd4>)
 800c84e:	f7ff ba95 	b.w	800bd7c <_dtoa_r+0xdc>
 800c852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c854:	2b00      	cmp	r3, #0
 800c856:	f47f aa6e 	bne.w	800bd36 <_dtoa_r+0x96>
 800c85a:	4b07      	ldr	r3, [pc, #28]	; (800c878 <_dtoa_r+0xbd8>)
 800c85c:	f7ff ba8e 	b.w	800bd7c <_dtoa_r+0xdc>
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dcae      	bgt.n	800c7c4 <_dtoa_r+0xb24>
 800c866:	9b06      	ldr	r3, [sp, #24]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	f73f aea8 	bgt.w	800c5be <_dtoa_r+0x91e>
 800c86e:	e7a9      	b.n	800c7c4 <_dtoa_r+0xb24>
 800c870:	08010108 	.word	0x08010108
 800c874:	0800ff08 	.word	0x0800ff08
 800c878:	08010089 	.word	0x08010089

0800c87c <rshift>:
 800c87c:	6903      	ldr	r3, [r0, #16]
 800c87e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c886:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c88a:	f100 0414 	add.w	r4, r0, #20
 800c88e:	dd45      	ble.n	800c91c <rshift+0xa0>
 800c890:	f011 011f 	ands.w	r1, r1, #31
 800c894:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c898:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c89c:	d10c      	bne.n	800c8b8 <rshift+0x3c>
 800c89e:	f100 0710 	add.w	r7, r0, #16
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	42b1      	cmp	r1, r6
 800c8a6:	d334      	bcc.n	800c912 <rshift+0x96>
 800c8a8:	1a9b      	subs	r3, r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	1eea      	subs	r2, r5, #3
 800c8ae:	4296      	cmp	r6, r2
 800c8b0:	bf38      	it	cc
 800c8b2:	2300      	movcc	r3, #0
 800c8b4:	4423      	add	r3, r4
 800c8b6:	e015      	b.n	800c8e4 <rshift+0x68>
 800c8b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8bc:	f1c1 0820 	rsb	r8, r1, #32
 800c8c0:	40cf      	lsrs	r7, r1
 800c8c2:	f105 0e04 	add.w	lr, r5, #4
 800c8c6:	46a1      	mov	r9, r4
 800c8c8:	4576      	cmp	r6, lr
 800c8ca:	46f4      	mov	ip, lr
 800c8cc:	d815      	bhi.n	800c8fa <rshift+0x7e>
 800c8ce:	1a9a      	subs	r2, r3, r2
 800c8d0:	0092      	lsls	r2, r2, #2
 800c8d2:	3a04      	subs	r2, #4
 800c8d4:	3501      	adds	r5, #1
 800c8d6:	42ae      	cmp	r6, r5
 800c8d8:	bf38      	it	cc
 800c8da:	2200      	movcc	r2, #0
 800c8dc:	18a3      	adds	r3, r4, r2
 800c8de:	50a7      	str	r7, [r4, r2]
 800c8e0:	b107      	cbz	r7, 800c8e4 <rshift+0x68>
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	1b1a      	subs	r2, r3, r4
 800c8e6:	42a3      	cmp	r3, r4
 800c8e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8ec:	bf08      	it	eq
 800c8ee:	2300      	moveq	r3, #0
 800c8f0:	6102      	str	r2, [r0, #16]
 800c8f2:	bf08      	it	eq
 800c8f4:	6143      	streq	r3, [r0, #20]
 800c8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8fa:	f8dc c000 	ldr.w	ip, [ip]
 800c8fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800c902:	ea4c 0707 	orr.w	r7, ip, r7
 800c906:	f849 7b04 	str.w	r7, [r9], #4
 800c90a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c90e:	40cf      	lsrs	r7, r1
 800c910:	e7da      	b.n	800c8c8 <rshift+0x4c>
 800c912:	f851 cb04 	ldr.w	ip, [r1], #4
 800c916:	f847 cf04 	str.w	ip, [r7, #4]!
 800c91a:	e7c3      	b.n	800c8a4 <rshift+0x28>
 800c91c:	4623      	mov	r3, r4
 800c91e:	e7e1      	b.n	800c8e4 <rshift+0x68>

0800c920 <__hexdig_fun>:
 800c920:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c924:	2b09      	cmp	r3, #9
 800c926:	d802      	bhi.n	800c92e <__hexdig_fun+0xe>
 800c928:	3820      	subs	r0, #32
 800c92a:	b2c0      	uxtb	r0, r0
 800c92c:	4770      	bx	lr
 800c92e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c932:	2b05      	cmp	r3, #5
 800c934:	d801      	bhi.n	800c93a <__hexdig_fun+0x1a>
 800c936:	3847      	subs	r0, #71	; 0x47
 800c938:	e7f7      	b.n	800c92a <__hexdig_fun+0xa>
 800c93a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c93e:	2b05      	cmp	r3, #5
 800c940:	d801      	bhi.n	800c946 <__hexdig_fun+0x26>
 800c942:	3827      	subs	r0, #39	; 0x27
 800c944:	e7f1      	b.n	800c92a <__hexdig_fun+0xa>
 800c946:	2000      	movs	r0, #0
 800c948:	4770      	bx	lr
	...

0800c94c <__gethex>:
 800c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	ed2d 8b02 	vpush	{d8}
 800c954:	b089      	sub	sp, #36	; 0x24
 800c956:	ee08 0a10 	vmov	s16, r0
 800c95a:	9304      	str	r3, [sp, #16]
 800c95c:	4bb4      	ldr	r3, [pc, #720]	; (800cc30 <__gethex+0x2e4>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	4618      	mov	r0, r3
 800c964:	468b      	mov	fp, r1
 800c966:	4690      	mov	r8, r2
 800c968:	f7f3 fc32 	bl	80001d0 <strlen>
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	f8db 2000 	ldr.w	r2, [fp]
 800c972:	4403      	add	r3, r0
 800c974:	4682      	mov	sl, r0
 800c976:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c97a:	9305      	str	r3, [sp, #20]
 800c97c:	1c93      	adds	r3, r2, #2
 800c97e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c982:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c986:	32fe      	adds	r2, #254	; 0xfe
 800c988:	18d1      	adds	r1, r2, r3
 800c98a:	461f      	mov	r7, r3
 800c98c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c990:	9100      	str	r1, [sp, #0]
 800c992:	2830      	cmp	r0, #48	; 0x30
 800c994:	d0f8      	beq.n	800c988 <__gethex+0x3c>
 800c996:	f7ff ffc3 	bl	800c920 <__hexdig_fun>
 800c99a:	4604      	mov	r4, r0
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d13a      	bne.n	800ca16 <__gethex+0xca>
 800c9a0:	9901      	ldr	r1, [sp, #4]
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f001 fa23 	bl	800ddf0 <strncmp>
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d168      	bne.n	800ca82 <__gethex+0x136>
 800c9b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c9b4:	eb07 060a 	add.w	r6, r7, sl
 800c9b8:	f7ff ffb2 	bl	800c920 <__hexdig_fun>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d062      	beq.n	800ca86 <__gethex+0x13a>
 800c9c0:	4633      	mov	r3, r6
 800c9c2:	7818      	ldrb	r0, [r3, #0]
 800c9c4:	2830      	cmp	r0, #48	; 0x30
 800c9c6:	461f      	mov	r7, r3
 800c9c8:	f103 0301 	add.w	r3, r3, #1
 800c9cc:	d0f9      	beq.n	800c9c2 <__gethex+0x76>
 800c9ce:	f7ff ffa7 	bl	800c920 <__hexdig_fun>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	fab0 f480 	clz	r4, r0
 800c9d8:	0964      	lsrs	r4, r4, #5
 800c9da:	4635      	mov	r5, r6
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	463a      	mov	r2, r7
 800c9e0:	4616      	mov	r6, r2
 800c9e2:	3201      	adds	r2, #1
 800c9e4:	7830      	ldrb	r0, [r6, #0]
 800c9e6:	f7ff ff9b 	bl	800c920 <__hexdig_fun>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d1f8      	bne.n	800c9e0 <__gethex+0x94>
 800c9ee:	9901      	ldr	r1, [sp, #4]
 800c9f0:	4652      	mov	r2, sl
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f001 f9fc 	bl	800ddf0 <strncmp>
 800c9f8:	b980      	cbnz	r0, 800ca1c <__gethex+0xd0>
 800c9fa:	b94d      	cbnz	r5, 800ca10 <__gethex+0xc4>
 800c9fc:	eb06 050a 	add.w	r5, r6, sl
 800ca00:	462a      	mov	r2, r5
 800ca02:	4616      	mov	r6, r2
 800ca04:	3201      	adds	r2, #1
 800ca06:	7830      	ldrb	r0, [r6, #0]
 800ca08:	f7ff ff8a 	bl	800c920 <__hexdig_fun>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d1f8      	bne.n	800ca02 <__gethex+0xb6>
 800ca10:	1bad      	subs	r5, r5, r6
 800ca12:	00ad      	lsls	r5, r5, #2
 800ca14:	e004      	b.n	800ca20 <__gethex+0xd4>
 800ca16:	2400      	movs	r4, #0
 800ca18:	4625      	mov	r5, r4
 800ca1a:	e7e0      	b.n	800c9de <__gethex+0x92>
 800ca1c:	2d00      	cmp	r5, #0
 800ca1e:	d1f7      	bne.n	800ca10 <__gethex+0xc4>
 800ca20:	7833      	ldrb	r3, [r6, #0]
 800ca22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca26:	2b50      	cmp	r3, #80	; 0x50
 800ca28:	d13b      	bne.n	800caa2 <__gethex+0x156>
 800ca2a:	7873      	ldrb	r3, [r6, #1]
 800ca2c:	2b2b      	cmp	r3, #43	; 0x2b
 800ca2e:	d02c      	beq.n	800ca8a <__gethex+0x13e>
 800ca30:	2b2d      	cmp	r3, #45	; 0x2d
 800ca32:	d02e      	beq.n	800ca92 <__gethex+0x146>
 800ca34:	1c71      	adds	r1, r6, #1
 800ca36:	f04f 0900 	mov.w	r9, #0
 800ca3a:	7808      	ldrb	r0, [r1, #0]
 800ca3c:	f7ff ff70 	bl	800c920 <__hexdig_fun>
 800ca40:	1e43      	subs	r3, r0, #1
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b18      	cmp	r3, #24
 800ca46:	d82c      	bhi.n	800caa2 <__gethex+0x156>
 800ca48:	f1a0 0210 	sub.w	r2, r0, #16
 800ca4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca50:	f7ff ff66 	bl	800c920 <__hexdig_fun>
 800ca54:	1e43      	subs	r3, r0, #1
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b18      	cmp	r3, #24
 800ca5a:	d91d      	bls.n	800ca98 <__gethex+0x14c>
 800ca5c:	f1b9 0f00 	cmp.w	r9, #0
 800ca60:	d000      	beq.n	800ca64 <__gethex+0x118>
 800ca62:	4252      	negs	r2, r2
 800ca64:	4415      	add	r5, r2
 800ca66:	f8cb 1000 	str.w	r1, [fp]
 800ca6a:	b1e4      	cbz	r4, 800caa6 <__gethex+0x15a>
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	bf14      	ite	ne
 800ca72:	2700      	movne	r7, #0
 800ca74:	2706      	moveq	r7, #6
 800ca76:	4638      	mov	r0, r7
 800ca78:	b009      	add	sp, #36	; 0x24
 800ca7a:	ecbd 8b02 	vpop	{d8}
 800ca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca82:	463e      	mov	r6, r7
 800ca84:	4625      	mov	r5, r4
 800ca86:	2401      	movs	r4, #1
 800ca88:	e7ca      	b.n	800ca20 <__gethex+0xd4>
 800ca8a:	f04f 0900 	mov.w	r9, #0
 800ca8e:	1cb1      	adds	r1, r6, #2
 800ca90:	e7d3      	b.n	800ca3a <__gethex+0xee>
 800ca92:	f04f 0901 	mov.w	r9, #1
 800ca96:	e7fa      	b.n	800ca8e <__gethex+0x142>
 800ca98:	230a      	movs	r3, #10
 800ca9a:	fb03 0202 	mla	r2, r3, r2, r0
 800ca9e:	3a10      	subs	r2, #16
 800caa0:	e7d4      	b.n	800ca4c <__gethex+0x100>
 800caa2:	4631      	mov	r1, r6
 800caa4:	e7df      	b.n	800ca66 <__gethex+0x11a>
 800caa6:	1bf3      	subs	r3, r6, r7
 800caa8:	3b01      	subs	r3, #1
 800caaa:	4621      	mov	r1, r4
 800caac:	2b07      	cmp	r3, #7
 800caae:	dc0b      	bgt.n	800cac8 <__gethex+0x17c>
 800cab0:	ee18 0a10 	vmov	r0, s16
 800cab4:	f000 fa70 	bl	800cf98 <_Balloc>
 800cab8:	4604      	mov	r4, r0
 800caba:	b940      	cbnz	r0, 800cace <__gethex+0x182>
 800cabc:	4b5d      	ldr	r3, [pc, #372]	; (800cc34 <__gethex+0x2e8>)
 800cabe:	4602      	mov	r2, r0
 800cac0:	21de      	movs	r1, #222	; 0xde
 800cac2:	485d      	ldr	r0, [pc, #372]	; (800cc38 <__gethex+0x2ec>)
 800cac4:	f001 f9b6 	bl	800de34 <__assert_func>
 800cac8:	3101      	adds	r1, #1
 800caca:	105b      	asrs	r3, r3, #1
 800cacc:	e7ee      	b.n	800caac <__gethex+0x160>
 800cace:	f100 0914 	add.w	r9, r0, #20
 800cad2:	f04f 0b00 	mov.w	fp, #0
 800cad6:	f1ca 0301 	rsb	r3, sl, #1
 800cada:	f8cd 9008 	str.w	r9, [sp, #8]
 800cade:	f8cd b000 	str.w	fp, [sp]
 800cae2:	9306      	str	r3, [sp, #24]
 800cae4:	42b7      	cmp	r7, r6
 800cae6:	d340      	bcc.n	800cb6a <__gethex+0x21e>
 800cae8:	9802      	ldr	r0, [sp, #8]
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	f840 3b04 	str.w	r3, [r0], #4
 800caf0:	eba0 0009 	sub.w	r0, r0, r9
 800caf4:	1080      	asrs	r0, r0, #2
 800caf6:	0146      	lsls	r6, r0, #5
 800caf8:	6120      	str	r0, [r4, #16]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 fb3e 	bl	800d17c <__hi0bits>
 800cb00:	1a30      	subs	r0, r6, r0
 800cb02:	f8d8 6000 	ldr.w	r6, [r8]
 800cb06:	42b0      	cmp	r0, r6
 800cb08:	dd63      	ble.n	800cbd2 <__gethex+0x286>
 800cb0a:	1b87      	subs	r7, r0, r6
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f000 fee2 	bl	800d8d8 <__any_on>
 800cb14:	4682      	mov	sl, r0
 800cb16:	b1a8      	cbz	r0, 800cb44 <__gethex+0x1f8>
 800cb18:	1e7b      	subs	r3, r7, #1
 800cb1a:	1159      	asrs	r1, r3, #5
 800cb1c:	f003 021f 	and.w	r2, r3, #31
 800cb20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb24:	f04f 0a01 	mov.w	sl, #1
 800cb28:	fa0a f202 	lsl.w	r2, sl, r2
 800cb2c:	420a      	tst	r2, r1
 800cb2e:	d009      	beq.n	800cb44 <__gethex+0x1f8>
 800cb30:	4553      	cmp	r3, sl
 800cb32:	dd05      	ble.n	800cb40 <__gethex+0x1f4>
 800cb34:	1eb9      	subs	r1, r7, #2
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 fece 	bl	800d8d8 <__any_on>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d145      	bne.n	800cbcc <__gethex+0x280>
 800cb40:	f04f 0a02 	mov.w	sl, #2
 800cb44:	4639      	mov	r1, r7
 800cb46:	4620      	mov	r0, r4
 800cb48:	f7ff fe98 	bl	800c87c <rshift>
 800cb4c:	443d      	add	r5, r7
 800cb4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb52:	42ab      	cmp	r3, r5
 800cb54:	da4c      	bge.n	800cbf0 <__gethex+0x2a4>
 800cb56:	ee18 0a10 	vmov	r0, s16
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	f000 fa5c 	bl	800d018 <_Bfree>
 800cb60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb62:	2300      	movs	r3, #0
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	27a3      	movs	r7, #163	; 0xa3
 800cb68:	e785      	b.n	800ca76 <__gethex+0x12a>
 800cb6a:	1e73      	subs	r3, r6, #1
 800cb6c:	9a05      	ldr	r2, [sp, #20]
 800cb6e:	9303      	str	r3, [sp, #12]
 800cb70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d019      	beq.n	800cbac <__gethex+0x260>
 800cb78:	f1bb 0f20 	cmp.w	fp, #32
 800cb7c:	d107      	bne.n	800cb8e <__gethex+0x242>
 800cb7e:	9b02      	ldr	r3, [sp, #8]
 800cb80:	9a00      	ldr	r2, [sp, #0]
 800cb82:	f843 2b04 	str.w	r2, [r3], #4
 800cb86:	9302      	str	r3, [sp, #8]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	469b      	mov	fp, r3
 800cb8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb92:	f7ff fec5 	bl	800c920 <__hexdig_fun>
 800cb96:	9b00      	ldr	r3, [sp, #0]
 800cb98:	f000 000f 	and.w	r0, r0, #15
 800cb9c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cba0:	4303      	orrs	r3, r0
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	f10b 0b04 	add.w	fp, fp, #4
 800cba8:	9b03      	ldr	r3, [sp, #12]
 800cbaa:	e00d      	b.n	800cbc8 <__gethex+0x27c>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	9a06      	ldr	r2, [sp, #24]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	42bb      	cmp	r3, r7
 800cbb4:	d3e0      	bcc.n	800cb78 <__gethex+0x22c>
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	9901      	ldr	r1, [sp, #4]
 800cbba:	9307      	str	r3, [sp, #28]
 800cbbc:	4652      	mov	r2, sl
 800cbbe:	f001 f917 	bl	800ddf0 <strncmp>
 800cbc2:	9b07      	ldr	r3, [sp, #28]
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d1d7      	bne.n	800cb78 <__gethex+0x22c>
 800cbc8:	461e      	mov	r6, r3
 800cbca:	e78b      	b.n	800cae4 <__gethex+0x198>
 800cbcc:	f04f 0a03 	mov.w	sl, #3
 800cbd0:	e7b8      	b.n	800cb44 <__gethex+0x1f8>
 800cbd2:	da0a      	bge.n	800cbea <__gethex+0x29e>
 800cbd4:	1a37      	subs	r7, r6, r0
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	ee18 0a10 	vmov	r0, s16
 800cbdc:	463a      	mov	r2, r7
 800cbde:	f000 fc37 	bl	800d450 <__lshift>
 800cbe2:	1bed      	subs	r5, r5, r7
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	f100 0914 	add.w	r9, r0, #20
 800cbea:	f04f 0a00 	mov.w	sl, #0
 800cbee:	e7ae      	b.n	800cb4e <__gethex+0x202>
 800cbf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cbf4:	42a8      	cmp	r0, r5
 800cbf6:	dd72      	ble.n	800ccde <__gethex+0x392>
 800cbf8:	1b45      	subs	r5, r0, r5
 800cbfa:	42ae      	cmp	r6, r5
 800cbfc:	dc36      	bgt.n	800cc6c <__gethex+0x320>
 800cbfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d02a      	beq.n	800cc5c <__gethex+0x310>
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d02c      	beq.n	800cc64 <__gethex+0x318>
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d11c      	bne.n	800cc48 <__gethex+0x2fc>
 800cc0e:	42ae      	cmp	r6, r5
 800cc10:	d11a      	bne.n	800cc48 <__gethex+0x2fc>
 800cc12:	2e01      	cmp	r6, #1
 800cc14:	d112      	bne.n	800cc3c <__gethex+0x2f0>
 800cc16:	9a04      	ldr	r2, [sp, #16]
 800cc18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	2301      	movs	r3, #1
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	f8c9 3000 	str.w	r3, [r9]
 800cc26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc28:	2762      	movs	r7, #98	; 0x62
 800cc2a:	601c      	str	r4, [r3, #0]
 800cc2c:	e723      	b.n	800ca76 <__gethex+0x12a>
 800cc2e:	bf00      	nop
 800cc30:	08010180 	.word	0x08010180
 800cc34:	08010108 	.word	0x08010108
 800cc38:	08010119 	.word	0x08010119
 800cc3c:	1e71      	subs	r1, r6, #1
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 fe4a 	bl	800d8d8 <__any_on>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d1e6      	bne.n	800cc16 <__gethex+0x2ca>
 800cc48:	ee18 0a10 	vmov	r0, s16
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	f000 f9e3 	bl	800d018 <_Bfree>
 800cc52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc54:	2300      	movs	r3, #0
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	2750      	movs	r7, #80	; 0x50
 800cc5a:	e70c      	b.n	800ca76 <__gethex+0x12a>
 800cc5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1f2      	bne.n	800cc48 <__gethex+0x2fc>
 800cc62:	e7d8      	b.n	800cc16 <__gethex+0x2ca>
 800cc64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1d5      	bne.n	800cc16 <__gethex+0x2ca>
 800cc6a:	e7ed      	b.n	800cc48 <__gethex+0x2fc>
 800cc6c:	1e6f      	subs	r7, r5, #1
 800cc6e:	f1ba 0f00 	cmp.w	sl, #0
 800cc72:	d131      	bne.n	800ccd8 <__gethex+0x38c>
 800cc74:	b127      	cbz	r7, 800cc80 <__gethex+0x334>
 800cc76:	4639      	mov	r1, r7
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 fe2d 	bl	800d8d8 <__any_on>
 800cc7e:	4682      	mov	sl, r0
 800cc80:	117b      	asrs	r3, r7, #5
 800cc82:	2101      	movs	r1, #1
 800cc84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc88:	f007 071f 	and.w	r7, r7, #31
 800cc8c:	fa01 f707 	lsl.w	r7, r1, r7
 800cc90:	421f      	tst	r7, r3
 800cc92:	4629      	mov	r1, r5
 800cc94:	4620      	mov	r0, r4
 800cc96:	bf18      	it	ne
 800cc98:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc9c:	1b76      	subs	r6, r6, r5
 800cc9e:	f7ff fded 	bl	800c87c <rshift>
 800cca2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cca6:	2702      	movs	r7, #2
 800cca8:	f1ba 0f00 	cmp.w	sl, #0
 800ccac:	d048      	beq.n	800cd40 <__gethex+0x3f4>
 800ccae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d015      	beq.n	800cce2 <__gethex+0x396>
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d017      	beq.n	800ccea <__gethex+0x39e>
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d109      	bne.n	800ccd2 <__gethex+0x386>
 800ccbe:	f01a 0f02 	tst.w	sl, #2
 800ccc2:	d006      	beq.n	800ccd2 <__gethex+0x386>
 800ccc4:	f8d9 0000 	ldr.w	r0, [r9]
 800ccc8:	ea4a 0a00 	orr.w	sl, sl, r0
 800cccc:	f01a 0f01 	tst.w	sl, #1
 800ccd0:	d10e      	bne.n	800ccf0 <__gethex+0x3a4>
 800ccd2:	f047 0710 	orr.w	r7, r7, #16
 800ccd6:	e033      	b.n	800cd40 <__gethex+0x3f4>
 800ccd8:	f04f 0a01 	mov.w	sl, #1
 800ccdc:	e7d0      	b.n	800cc80 <__gethex+0x334>
 800ccde:	2701      	movs	r7, #1
 800cce0:	e7e2      	b.n	800cca8 <__gethex+0x35c>
 800cce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cce4:	f1c3 0301 	rsb	r3, r3, #1
 800cce8:	9315      	str	r3, [sp, #84]	; 0x54
 800ccea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0f0      	beq.n	800ccd2 <__gethex+0x386>
 800ccf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccf4:	f104 0314 	add.w	r3, r4, #20
 800ccf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ccfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd00:	f04f 0c00 	mov.w	ip, #0
 800cd04:	4618      	mov	r0, r3
 800cd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd0e:	d01c      	beq.n	800cd4a <__gethex+0x3fe>
 800cd10:	3201      	adds	r2, #1
 800cd12:	6002      	str	r2, [r0, #0]
 800cd14:	2f02      	cmp	r7, #2
 800cd16:	f104 0314 	add.w	r3, r4, #20
 800cd1a:	d13f      	bne.n	800cd9c <__gethex+0x450>
 800cd1c:	f8d8 2000 	ldr.w	r2, [r8]
 800cd20:	3a01      	subs	r2, #1
 800cd22:	42b2      	cmp	r2, r6
 800cd24:	d10a      	bne.n	800cd3c <__gethex+0x3f0>
 800cd26:	1171      	asrs	r1, r6, #5
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd2e:	f006 061f 	and.w	r6, r6, #31
 800cd32:	fa02 f606 	lsl.w	r6, r2, r6
 800cd36:	421e      	tst	r6, r3
 800cd38:	bf18      	it	ne
 800cd3a:	4617      	movne	r7, r2
 800cd3c:	f047 0720 	orr.w	r7, r7, #32
 800cd40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd42:	601c      	str	r4, [r3, #0]
 800cd44:	9b04      	ldr	r3, [sp, #16]
 800cd46:	601d      	str	r5, [r3, #0]
 800cd48:	e695      	b.n	800ca76 <__gethex+0x12a>
 800cd4a:	4299      	cmp	r1, r3
 800cd4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd50:	d8d8      	bhi.n	800cd04 <__gethex+0x3b8>
 800cd52:	68a3      	ldr	r3, [r4, #8]
 800cd54:	459b      	cmp	fp, r3
 800cd56:	db19      	blt.n	800cd8c <__gethex+0x440>
 800cd58:	6861      	ldr	r1, [r4, #4]
 800cd5a:	ee18 0a10 	vmov	r0, s16
 800cd5e:	3101      	adds	r1, #1
 800cd60:	f000 f91a 	bl	800cf98 <_Balloc>
 800cd64:	4681      	mov	r9, r0
 800cd66:	b918      	cbnz	r0, 800cd70 <__gethex+0x424>
 800cd68:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <__gethex+0x488>)
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	2184      	movs	r1, #132	; 0x84
 800cd6e:	e6a8      	b.n	800cac2 <__gethex+0x176>
 800cd70:	6922      	ldr	r2, [r4, #16]
 800cd72:	3202      	adds	r2, #2
 800cd74:	f104 010c 	add.w	r1, r4, #12
 800cd78:	0092      	lsls	r2, r2, #2
 800cd7a:	300c      	adds	r0, #12
 800cd7c:	f7fd f986 	bl	800a08c <memcpy>
 800cd80:	4621      	mov	r1, r4
 800cd82:	ee18 0a10 	vmov	r0, s16
 800cd86:	f000 f947 	bl	800d018 <_Bfree>
 800cd8a:	464c      	mov	r4, r9
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	1c5a      	adds	r2, r3, #1
 800cd90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd94:	6122      	str	r2, [r4, #16]
 800cd96:	2201      	movs	r2, #1
 800cd98:	615a      	str	r2, [r3, #20]
 800cd9a:	e7bb      	b.n	800cd14 <__gethex+0x3c8>
 800cd9c:	6922      	ldr	r2, [r4, #16]
 800cd9e:	455a      	cmp	r2, fp
 800cda0:	dd0b      	ble.n	800cdba <__gethex+0x46e>
 800cda2:	2101      	movs	r1, #1
 800cda4:	4620      	mov	r0, r4
 800cda6:	f7ff fd69 	bl	800c87c <rshift>
 800cdaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdae:	3501      	adds	r5, #1
 800cdb0:	42ab      	cmp	r3, r5
 800cdb2:	f6ff aed0 	blt.w	800cb56 <__gethex+0x20a>
 800cdb6:	2701      	movs	r7, #1
 800cdb8:	e7c0      	b.n	800cd3c <__gethex+0x3f0>
 800cdba:	f016 061f 	ands.w	r6, r6, #31
 800cdbe:	d0fa      	beq.n	800cdb6 <__gethex+0x46a>
 800cdc0:	4453      	add	r3, sl
 800cdc2:	f1c6 0620 	rsb	r6, r6, #32
 800cdc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cdca:	f000 f9d7 	bl	800d17c <__hi0bits>
 800cdce:	42b0      	cmp	r0, r6
 800cdd0:	dbe7      	blt.n	800cda2 <__gethex+0x456>
 800cdd2:	e7f0      	b.n	800cdb6 <__gethex+0x46a>
 800cdd4:	08010108 	.word	0x08010108

0800cdd8 <L_shift>:
 800cdd8:	f1c2 0208 	rsb	r2, r2, #8
 800cddc:	0092      	lsls	r2, r2, #2
 800cdde:	b570      	push	{r4, r5, r6, lr}
 800cde0:	f1c2 0620 	rsb	r6, r2, #32
 800cde4:	6843      	ldr	r3, [r0, #4]
 800cde6:	6804      	ldr	r4, [r0, #0]
 800cde8:	fa03 f506 	lsl.w	r5, r3, r6
 800cdec:	432c      	orrs	r4, r5
 800cdee:	40d3      	lsrs	r3, r2
 800cdf0:	6004      	str	r4, [r0, #0]
 800cdf2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdf6:	4288      	cmp	r0, r1
 800cdf8:	d3f4      	bcc.n	800cde4 <L_shift+0xc>
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}

0800cdfc <__match>:
 800cdfc:	b530      	push	{r4, r5, lr}
 800cdfe:	6803      	ldr	r3, [r0, #0]
 800ce00:	3301      	adds	r3, #1
 800ce02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce06:	b914      	cbnz	r4, 800ce0e <__match+0x12>
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	bd30      	pop	{r4, r5, pc}
 800ce0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce16:	2d19      	cmp	r5, #25
 800ce18:	bf98      	it	ls
 800ce1a:	3220      	addls	r2, #32
 800ce1c:	42a2      	cmp	r2, r4
 800ce1e:	d0f0      	beq.n	800ce02 <__match+0x6>
 800ce20:	2000      	movs	r0, #0
 800ce22:	e7f3      	b.n	800ce0c <__match+0x10>

0800ce24 <__hexnan>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	680b      	ldr	r3, [r1, #0]
 800ce2a:	115e      	asrs	r6, r3, #5
 800ce2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce30:	f013 031f 	ands.w	r3, r3, #31
 800ce34:	b087      	sub	sp, #28
 800ce36:	bf18      	it	ne
 800ce38:	3604      	addne	r6, #4
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	1f37      	subs	r7, r6, #4
 800ce3e:	4690      	mov	r8, r2
 800ce40:	6802      	ldr	r2, [r0, #0]
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	4682      	mov	sl, r0
 800ce46:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce4a:	46b9      	mov	r9, r7
 800ce4c:	463c      	mov	r4, r7
 800ce4e:	9502      	str	r5, [sp, #8]
 800ce50:	46ab      	mov	fp, r5
 800ce52:	7851      	ldrb	r1, [r2, #1]
 800ce54:	1c53      	adds	r3, r2, #1
 800ce56:	9303      	str	r3, [sp, #12]
 800ce58:	b341      	cbz	r1, 800ceac <__hexnan+0x88>
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	9205      	str	r2, [sp, #20]
 800ce5e:	9104      	str	r1, [sp, #16]
 800ce60:	f7ff fd5e 	bl	800c920 <__hexdig_fun>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d14f      	bne.n	800cf08 <__hexnan+0xe4>
 800ce68:	9904      	ldr	r1, [sp, #16]
 800ce6a:	9a05      	ldr	r2, [sp, #20]
 800ce6c:	2920      	cmp	r1, #32
 800ce6e:	d818      	bhi.n	800cea2 <__hexnan+0x7e>
 800ce70:	9b02      	ldr	r3, [sp, #8]
 800ce72:	459b      	cmp	fp, r3
 800ce74:	dd13      	ble.n	800ce9e <__hexnan+0x7a>
 800ce76:	454c      	cmp	r4, r9
 800ce78:	d206      	bcs.n	800ce88 <__hexnan+0x64>
 800ce7a:	2d07      	cmp	r5, #7
 800ce7c:	dc04      	bgt.n	800ce88 <__hexnan+0x64>
 800ce7e:	462a      	mov	r2, r5
 800ce80:	4649      	mov	r1, r9
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7ff ffa8 	bl	800cdd8 <L_shift>
 800ce88:	4544      	cmp	r4, r8
 800ce8a:	d950      	bls.n	800cf2e <__hexnan+0x10a>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f1a4 0904 	sub.w	r9, r4, #4
 800ce92:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce96:	f8cd b008 	str.w	fp, [sp, #8]
 800ce9a:	464c      	mov	r4, r9
 800ce9c:	461d      	mov	r5, r3
 800ce9e:	9a03      	ldr	r2, [sp, #12]
 800cea0:	e7d7      	b.n	800ce52 <__hexnan+0x2e>
 800cea2:	2929      	cmp	r1, #41	; 0x29
 800cea4:	d156      	bne.n	800cf54 <__hexnan+0x130>
 800cea6:	3202      	adds	r2, #2
 800cea8:	f8ca 2000 	str.w	r2, [sl]
 800ceac:	f1bb 0f00 	cmp.w	fp, #0
 800ceb0:	d050      	beq.n	800cf54 <__hexnan+0x130>
 800ceb2:	454c      	cmp	r4, r9
 800ceb4:	d206      	bcs.n	800cec4 <__hexnan+0xa0>
 800ceb6:	2d07      	cmp	r5, #7
 800ceb8:	dc04      	bgt.n	800cec4 <__hexnan+0xa0>
 800ceba:	462a      	mov	r2, r5
 800cebc:	4649      	mov	r1, r9
 800cebe:	4620      	mov	r0, r4
 800cec0:	f7ff ff8a 	bl	800cdd8 <L_shift>
 800cec4:	4544      	cmp	r4, r8
 800cec6:	d934      	bls.n	800cf32 <__hexnan+0x10e>
 800cec8:	f1a8 0204 	sub.w	r2, r8, #4
 800cecc:	4623      	mov	r3, r4
 800cece:	f853 1b04 	ldr.w	r1, [r3], #4
 800ced2:	f842 1f04 	str.w	r1, [r2, #4]!
 800ced6:	429f      	cmp	r7, r3
 800ced8:	d2f9      	bcs.n	800cece <__hexnan+0xaa>
 800ceda:	1b3b      	subs	r3, r7, r4
 800cedc:	f023 0303 	bic.w	r3, r3, #3
 800cee0:	3304      	adds	r3, #4
 800cee2:	3401      	adds	r4, #1
 800cee4:	3e03      	subs	r6, #3
 800cee6:	42b4      	cmp	r4, r6
 800cee8:	bf88      	it	hi
 800ceea:	2304      	movhi	r3, #4
 800ceec:	4443      	add	r3, r8
 800ceee:	2200      	movs	r2, #0
 800cef0:	f843 2b04 	str.w	r2, [r3], #4
 800cef4:	429f      	cmp	r7, r3
 800cef6:	d2fb      	bcs.n	800cef0 <__hexnan+0xcc>
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	b91b      	cbnz	r3, 800cf04 <__hexnan+0xe0>
 800cefc:	4547      	cmp	r7, r8
 800cefe:	d127      	bne.n	800cf50 <__hexnan+0x12c>
 800cf00:	2301      	movs	r3, #1
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	2005      	movs	r0, #5
 800cf06:	e026      	b.n	800cf56 <__hexnan+0x132>
 800cf08:	3501      	adds	r5, #1
 800cf0a:	2d08      	cmp	r5, #8
 800cf0c:	f10b 0b01 	add.w	fp, fp, #1
 800cf10:	dd06      	ble.n	800cf20 <__hexnan+0xfc>
 800cf12:	4544      	cmp	r4, r8
 800cf14:	d9c3      	bls.n	800ce9e <__hexnan+0x7a>
 800cf16:	2300      	movs	r3, #0
 800cf18:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf1c:	2501      	movs	r5, #1
 800cf1e:	3c04      	subs	r4, #4
 800cf20:	6822      	ldr	r2, [r4, #0]
 800cf22:	f000 000f 	and.w	r0, r0, #15
 800cf26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cf2a:	6022      	str	r2, [r4, #0]
 800cf2c:	e7b7      	b.n	800ce9e <__hexnan+0x7a>
 800cf2e:	2508      	movs	r5, #8
 800cf30:	e7b5      	b.n	800ce9e <__hexnan+0x7a>
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0df      	beq.n	800cef8 <__hexnan+0xd4>
 800cf38:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3c:	f1c3 0320 	rsb	r3, r3, #32
 800cf40:	fa22 f303 	lsr.w	r3, r2, r3
 800cf44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf48:	401a      	ands	r2, r3
 800cf4a:	f846 2c04 	str.w	r2, [r6, #-4]
 800cf4e:	e7d3      	b.n	800cef8 <__hexnan+0xd4>
 800cf50:	3f04      	subs	r7, #4
 800cf52:	e7d1      	b.n	800cef8 <__hexnan+0xd4>
 800cf54:	2004      	movs	r0, #4
 800cf56:	b007      	add	sp, #28
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf5c <_localeconv_r>:
 800cf5c:	4800      	ldr	r0, [pc, #0]	; (800cf60 <_localeconv_r+0x4>)
 800cf5e:	4770      	bx	lr
 800cf60:	20000264 	.word	0x20000264

0800cf64 <malloc>:
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <malloc+0xc>)
 800cf66:	4601      	mov	r1, r0
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	f000 bd59 	b.w	800da20 <_malloc_r>
 800cf6e:	bf00      	nop
 800cf70:	2000010c 	.word	0x2000010c

0800cf74 <__ascii_mbtowc>:
 800cf74:	b082      	sub	sp, #8
 800cf76:	b901      	cbnz	r1, 800cf7a <__ascii_mbtowc+0x6>
 800cf78:	a901      	add	r1, sp, #4
 800cf7a:	b142      	cbz	r2, 800cf8e <__ascii_mbtowc+0x1a>
 800cf7c:	b14b      	cbz	r3, 800cf92 <__ascii_mbtowc+0x1e>
 800cf7e:	7813      	ldrb	r3, [r2, #0]
 800cf80:	600b      	str	r3, [r1, #0]
 800cf82:	7812      	ldrb	r2, [r2, #0]
 800cf84:	1e10      	subs	r0, r2, #0
 800cf86:	bf18      	it	ne
 800cf88:	2001      	movne	r0, #1
 800cf8a:	b002      	add	sp, #8
 800cf8c:	4770      	bx	lr
 800cf8e:	4610      	mov	r0, r2
 800cf90:	e7fb      	b.n	800cf8a <__ascii_mbtowc+0x16>
 800cf92:	f06f 0001 	mvn.w	r0, #1
 800cf96:	e7f8      	b.n	800cf8a <__ascii_mbtowc+0x16>

0800cf98 <_Balloc>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	b976      	cbnz	r6, 800cfc0 <_Balloc+0x28>
 800cfa2:	2010      	movs	r0, #16
 800cfa4:	f7ff ffde 	bl	800cf64 <malloc>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	6260      	str	r0, [r4, #36]	; 0x24
 800cfac:	b920      	cbnz	r0, 800cfb8 <_Balloc+0x20>
 800cfae:	4b18      	ldr	r3, [pc, #96]	; (800d010 <_Balloc+0x78>)
 800cfb0:	4818      	ldr	r0, [pc, #96]	; (800d014 <_Balloc+0x7c>)
 800cfb2:	2166      	movs	r1, #102	; 0x66
 800cfb4:	f000 ff3e 	bl	800de34 <__assert_func>
 800cfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfbc:	6006      	str	r6, [r0, #0]
 800cfbe:	60c6      	str	r6, [r0, #12]
 800cfc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfc2:	68f3      	ldr	r3, [r6, #12]
 800cfc4:	b183      	cbz	r3, 800cfe8 <_Balloc+0x50>
 800cfc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfce:	b9b8      	cbnz	r0, 800d000 <_Balloc+0x68>
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	fa01 f605 	lsl.w	r6, r1, r5
 800cfd6:	1d72      	adds	r2, r6, #5
 800cfd8:	0092      	lsls	r2, r2, #2
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fc9d 	bl	800d91a <_calloc_r>
 800cfe0:	b160      	cbz	r0, 800cffc <_Balloc+0x64>
 800cfe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfe6:	e00e      	b.n	800d006 <_Balloc+0x6e>
 800cfe8:	2221      	movs	r2, #33	; 0x21
 800cfea:	2104      	movs	r1, #4
 800cfec:	4620      	mov	r0, r4
 800cfee:	f000 fc94 	bl	800d91a <_calloc_r>
 800cff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cff4:	60f0      	str	r0, [r6, #12]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1e4      	bne.n	800cfc6 <_Balloc+0x2e>
 800cffc:	2000      	movs	r0, #0
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	6802      	ldr	r2, [r0, #0]
 800d002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d006:	2300      	movs	r3, #0
 800d008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d00c:	e7f7      	b.n	800cffe <_Balloc+0x66>
 800d00e:	bf00      	nop
 800d010:	08010096 	.word	0x08010096
 800d014:	08010194 	.word	0x08010194

0800d018 <_Bfree>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d01c:	4605      	mov	r5, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	b976      	cbnz	r6, 800d040 <_Bfree+0x28>
 800d022:	2010      	movs	r0, #16
 800d024:	f7ff ff9e 	bl	800cf64 <malloc>
 800d028:	4602      	mov	r2, r0
 800d02a:	6268      	str	r0, [r5, #36]	; 0x24
 800d02c:	b920      	cbnz	r0, 800d038 <_Bfree+0x20>
 800d02e:	4b09      	ldr	r3, [pc, #36]	; (800d054 <_Bfree+0x3c>)
 800d030:	4809      	ldr	r0, [pc, #36]	; (800d058 <_Bfree+0x40>)
 800d032:	218a      	movs	r1, #138	; 0x8a
 800d034:	f000 fefe 	bl	800de34 <__assert_func>
 800d038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d03c:	6006      	str	r6, [r0, #0]
 800d03e:	60c6      	str	r6, [r0, #12]
 800d040:	b13c      	cbz	r4, 800d052 <_Bfree+0x3a>
 800d042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d044:	6862      	ldr	r2, [r4, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d04c:	6021      	str	r1, [r4, #0]
 800d04e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	08010096 	.word	0x08010096
 800d058:	08010194 	.word	0x08010194

0800d05c <__multadd>:
 800d05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d060:	690d      	ldr	r5, [r1, #16]
 800d062:	4607      	mov	r7, r0
 800d064:	460c      	mov	r4, r1
 800d066:	461e      	mov	r6, r3
 800d068:	f101 0c14 	add.w	ip, r1, #20
 800d06c:	2000      	movs	r0, #0
 800d06e:	f8dc 3000 	ldr.w	r3, [ip]
 800d072:	b299      	uxth	r1, r3
 800d074:	fb02 6101 	mla	r1, r2, r1, r6
 800d078:	0c1e      	lsrs	r6, r3, #16
 800d07a:	0c0b      	lsrs	r3, r1, #16
 800d07c:	fb02 3306 	mla	r3, r2, r6, r3
 800d080:	b289      	uxth	r1, r1
 800d082:	3001      	adds	r0, #1
 800d084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d088:	4285      	cmp	r5, r0
 800d08a:	f84c 1b04 	str.w	r1, [ip], #4
 800d08e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d092:	dcec      	bgt.n	800d06e <__multadd+0x12>
 800d094:	b30e      	cbz	r6, 800d0da <__multadd+0x7e>
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	42ab      	cmp	r3, r5
 800d09a:	dc19      	bgt.n	800d0d0 <__multadd+0x74>
 800d09c:	6861      	ldr	r1, [r4, #4]
 800d09e:	4638      	mov	r0, r7
 800d0a0:	3101      	adds	r1, #1
 800d0a2:	f7ff ff79 	bl	800cf98 <_Balloc>
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	b928      	cbnz	r0, 800d0b6 <__multadd+0x5a>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <__multadd+0x84>)
 800d0ae:	480d      	ldr	r0, [pc, #52]	; (800d0e4 <__multadd+0x88>)
 800d0b0:	21b5      	movs	r1, #181	; 0xb5
 800d0b2:	f000 febf 	bl	800de34 <__assert_func>
 800d0b6:	6922      	ldr	r2, [r4, #16]
 800d0b8:	3202      	adds	r2, #2
 800d0ba:	f104 010c 	add.w	r1, r4, #12
 800d0be:	0092      	lsls	r2, r2, #2
 800d0c0:	300c      	adds	r0, #12
 800d0c2:	f7fc ffe3 	bl	800a08c <memcpy>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f7ff ffa5 	bl	800d018 <_Bfree>
 800d0ce:	4644      	mov	r4, r8
 800d0d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0d4:	3501      	adds	r5, #1
 800d0d6:	615e      	str	r6, [r3, #20]
 800d0d8:	6125      	str	r5, [r4, #16]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e0:	08010108 	.word	0x08010108
 800d0e4:	08010194 	.word	0x08010194

0800d0e8 <__s2b>:
 800d0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	4615      	mov	r5, r2
 800d0f0:	461f      	mov	r7, r3
 800d0f2:	2209      	movs	r2, #9
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	2201      	movs	r2, #1
 800d100:	429a      	cmp	r2, r3
 800d102:	db09      	blt.n	800d118 <__s2b+0x30>
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff ff47 	bl	800cf98 <_Balloc>
 800d10a:	b940      	cbnz	r0, 800d11e <__s2b+0x36>
 800d10c:	4602      	mov	r2, r0
 800d10e:	4b19      	ldr	r3, [pc, #100]	; (800d174 <__s2b+0x8c>)
 800d110:	4819      	ldr	r0, [pc, #100]	; (800d178 <__s2b+0x90>)
 800d112:	21ce      	movs	r1, #206	; 0xce
 800d114:	f000 fe8e 	bl	800de34 <__assert_func>
 800d118:	0052      	lsls	r2, r2, #1
 800d11a:	3101      	adds	r1, #1
 800d11c:	e7f0      	b.n	800d100 <__s2b+0x18>
 800d11e:	9b08      	ldr	r3, [sp, #32]
 800d120:	6143      	str	r3, [r0, #20]
 800d122:	2d09      	cmp	r5, #9
 800d124:	f04f 0301 	mov.w	r3, #1
 800d128:	6103      	str	r3, [r0, #16]
 800d12a:	dd16      	ble.n	800d15a <__s2b+0x72>
 800d12c:	f104 0909 	add.w	r9, r4, #9
 800d130:	46c8      	mov	r8, r9
 800d132:	442c      	add	r4, r5
 800d134:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d138:	4601      	mov	r1, r0
 800d13a:	3b30      	subs	r3, #48	; 0x30
 800d13c:	220a      	movs	r2, #10
 800d13e:	4630      	mov	r0, r6
 800d140:	f7ff ff8c 	bl	800d05c <__multadd>
 800d144:	45a0      	cmp	r8, r4
 800d146:	d1f5      	bne.n	800d134 <__s2b+0x4c>
 800d148:	f1a5 0408 	sub.w	r4, r5, #8
 800d14c:	444c      	add	r4, r9
 800d14e:	1b2d      	subs	r5, r5, r4
 800d150:	1963      	adds	r3, r4, r5
 800d152:	42bb      	cmp	r3, r7
 800d154:	db04      	blt.n	800d160 <__s2b+0x78>
 800d156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d15a:	340a      	adds	r4, #10
 800d15c:	2509      	movs	r5, #9
 800d15e:	e7f6      	b.n	800d14e <__s2b+0x66>
 800d160:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d164:	4601      	mov	r1, r0
 800d166:	3b30      	subs	r3, #48	; 0x30
 800d168:	220a      	movs	r2, #10
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff ff76 	bl	800d05c <__multadd>
 800d170:	e7ee      	b.n	800d150 <__s2b+0x68>
 800d172:	bf00      	nop
 800d174:	08010108 	.word	0x08010108
 800d178:	08010194 	.word	0x08010194

0800d17c <__hi0bits>:
 800d17c:	0c03      	lsrs	r3, r0, #16
 800d17e:	041b      	lsls	r3, r3, #16
 800d180:	b9d3      	cbnz	r3, 800d1b8 <__hi0bits+0x3c>
 800d182:	0400      	lsls	r0, r0, #16
 800d184:	2310      	movs	r3, #16
 800d186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d18a:	bf04      	itt	eq
 800d18c:	0200      	lsleq	r0, r0, #8
 800d18e:	3308      	addeq	r3, #8
 800d190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d194:	bf04      	itt	eq
 800d196:	0100      	lsleq	r0, r0, #4
 800d198:	3304      	addeq	r3, #4
 800d19a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d19e:	bf04      	itt	eq
 800d1a0:	0080      	lsleq	r0, r0, #2
 800d1a2:	3302      	addeq	r3, #2
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	db05      	blt.n	800d1b4 <__hi0bits+0x38>
 800d1a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1ac:	f103 0301 	add.w	r3, r3, #1
 800d1b0:	bf08      	it	eq
 800d1b2:	2320      	moveq	r3, #32
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	4770      	bx	lr
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e7e4      	b.n	800d186 <__hi0bits+0xa>

0800d1bc <__lo0bits>:
 800d1bc:	6803      	ldr	r3, [r0, #0]
 800d1be:	f013 0207 	ands.w	r2, r3, #7
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	d00b      	beq.n	800d1de <__lo0bits+0x22>
 800d1c6:	07da      	lsls	r2, r3, #31
 800d1c8:	d423      	bmi.n	800d212 <__lo0bits+0x56>
 800d1ca:	0798      	lsls	r0, r3, #30
 800d1cc:	bf49      	itett	mi
 800d1ce:	085b      	lsrmi	r3, r3, #1
 800d1d0:	089b      	lsrpl	r3, r3, #2
 800d1d2:	2001      	movmi	r0, #1
 800d1d4:	600b      	strmi	r3, [r1, #0]
 800d1d6:	bf5c      	itt	pl
 800d1d8:	600b      	strpl	r3, [r1, #0]
 800d1da:	2002      	movpl	r0, #2
 800d1dc:	4770      	bx	lr
 800d1de:	b298      	uxth	r0, r3
 800d1e0:	b9a8      	cbnz	r0, 800d20e <__lo0bits+0x52>
 800d1e2:	0c1b      	lsrs	r3, r3, #16
 800d1e4:	2010      	movs	r0, #16
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	b90a      	cbnz	r2, 800d1ee <__lo0bits+0x32>
 800d1ea:	3008      	adds	r0, #8
 800d1ec:	0a1b      	lsrs	r3, r3, #8
 800d1ee:	071a      	lsls	r2, r3, #28
 800d1f0:	bf04      	itt	eq
 800d1f2:	091b      	lsreq	r3, r3, #4
 800d1f4:	3004      	addeq	r0, #4
 800d1f6:	079a      	lsls	r2, r3, #30
 800d1f8:	bf04      	itt	eq
 800d1fa:	089b      	lsreq	r3, r3, #2
 800d1fc:	3002      	addeq	r0, #2
 800d1fe:	07da      	lsls	r2, r3, #31
 800d200:	d403      	bmi.n	800d20a <__lo0bits+0x4e>
 800d202:	085b      	lsrs	r3, r3, #1
 800d204:	f100 0001 	add.w	r0, r0, #1
 800d208:	d005      	beq.n	800d216 <__lo0bits+0x5a>
 800d20a:	600b      	str	r3, [r1, #0]
 800d20c:	4770      	bx	lr
 800d20e:	4610      	mov	r0, r2
 800d210:	e7e9      	b.n	800d1e6 <__lo0bits+0x2a>
 800d212:	2000      	movs	r0, #0
 800d214:	4770      	bx	lr
 800d216:	2020      	movs	r0, #32
 800d218:	4770      	bx	lr
	...

0800d21c <__i2b>:
 800d21c:	b510      	push	{r4, lr}
 800d21e:	460c      	mov	r4, r1
 800d220:	2101      	movs	r1, #1
 800d222:	f7ff feb9 	bl	800cf98 <_Balloc>
 800d226:	4602      	mov	r2, r0
 800d228:	b928      	cbnz	r0, 800d236 <__i2b+0x1a>
 800d22a:	4b05      	ldr	r3, [pc, #20]	; (800d240 <__i2b+0x24>)
 800d22c:	4805      	ldr	r0, [pc, #20]	; (800d244 <__i2b+0x28>)
 800d22e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d232:	f000 fdff 	bl	800de34 <__assert_func>
 800d236:	2301      	movs	r3, #1
 800d238:	6144      	str	r4, [r0, #20]
 800d23a:	6103      	str	r3, [r0, #16]
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	bf00      	nop
 800d240:	08010108 	.word	0x08010108
 800d244:	08010194 	.word	0x08010194

0800d248 <__multiply>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	4691      	mov	r9, r2
 800d24e:	690a      	ldr	r2, [r1, #16]
 800d250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d254:	429a      	cmp	r2, r3
 800d256:	bfb8      	it	lt
 800d258:	460b      	movlt	r3, r1
 800d25a:	460c      	mov	r4, r1
 800d25c:	bfbc      	itt	lt
 800d25e:	464c      	movlt	r4, r9
 800d260:	4699      	movlt	r9, r3
 800d262:	6927      	ldr	r7, [r4, #16]
 800d264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d268:	68a3      	ldr	r3, [r4, #8]
 800d26a:	6861      	ldr	r1, [r4, #4]
 800d26c:	eb07 060a 	add.w	r6, r7, sl
 800d270:	42b3      	cmp	r3, r6
 800d272:	b085      	sub	sp, #20
 800d274:	bfb8      	it	lt
 800d276:	3101      	addlt	r1, #1
 800d278:	f7ff fe8e 	bl	800cf98 <_Balloc>
 800d27c:	b930      	cbnz	r0, 800d28c <__multiply+0x44>
 800d27e:	4602      	mov	r2, r0
 800d280:	4b44      	ldr	r3, [pc, #272]	; (800d394 <__multiply+0x14c>)
 800d282:	4845      	ldr	r0, [pc, #276]	; (800d398 <__multiply+0x150>)
 800d284:	f240 115d 	movw	r1, #349	; 0x15d
 800d288:	f000 fdd4 	bl	800de34 <__assert_func>
 800d28c:	f100 0514 	add.w	r5, r0, #20
 800d290:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d294:	462b      	mov	r3, r5
 800d296:	2200      	movs	r2, #0
 800d298:	4543      	cmp	r3, r8
 800d29a:	d321      	bcc.n	800d2e0 <__multiply+0x98>
 800d29c:	f104 0314 	add.w	r3, r4, #20
 800d2a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2a4:	f109 0314 	add.w	r3, r9, #20
 800d2a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2ac:	9202      	str	r2, [sp, #8]
 800d2ae:	1b3a      	subs	r2, r7, r4
 800d2b0:	3a15      	subs	r2, #21
 800d2b2:	f022 0203 	bic.w	r2, r2, #3
 800d2b6:	3204      	adds	r2, #4
 800d2b8:	f104 0115 	add.w	r1, r4, #21
 800d2bc:	428f      	cmp	r7, r1
 800d2be:	bf38      	it	cc
 800d2c0:	2204      	movcc	r2, #4
 800d2c2:	9201      	str	r2, [sp, #4]
 800d2c4:	9a02      	ldr	r2, [sp, #8]
 800d2c6:	9303      	str	r3, [sp, #12]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d80c      	bhi.n	800d2e6 <__multiply+0x9e>
 800d2cc:	2e00      	cmp	r6, #0
 800d2ce:	dd03      	ble.n	800d2d8 <__multiply+0x90>
 800d2d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d05a      	beq.n	800d38e <__multiply+0x146>
 800d2d8:	6106      	str	r6, [r0, #16]
 800d2da:	b005      	add	sp, #20
 800d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e0:	f843 2b04 	str.w	r2, [r3], #4
 800d2e4:	e7d8      	b.n	800d298 <__multiply+0x50>
 800d2e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2ea:	f1ba 0f00 	cmp.w	sl, #0
 800d2ee:	d024      	beq.n	800d33a <__multiply+0xf2>
 800d2f0:	f104 0e14 	add.w	lr, r4, #20
 800d2f4:	46a9      	mov	r9, r5
 800d2f6:	f04f 0c00 	mov.w	ip, #0
 800d2fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2fe:	f8d9 1000 	ldr.w	r1, [r9]
 800d302:	fa1f fb82 	uxth.w	fp, r2
 800d306:	b289      	uxth	r1, r1
 800d308:	fb0a 110b 	mla	r1, sl, fp, r1
 800d30c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d310:	f8d9 2000 	ldr.w	r2, [r9]
 800d314:	4461      	add	r1, ip
 800d316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d31a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d31e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d322:	b289      	uxth	r1, r1
 800d324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d328:	4577      	cmp	r7, lr
 800d32a:	f849 1b04 	str.w	r1, [r9], #4
 800d32e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d332:	d8e2      	bhi.n	800d2fa <__multiply+0xb2>
 800d334:	9a01      	ldr	r2, [sp, #4]
 800d336:	f845 c002 	str.w	ip, [r5, r2]
 800d33a:	9a03      	ldr	r2, [sp, #12]
 800d33c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d340:	3304      	adds	r3, #4
 800d342:	f1b9 0f00 	cmp.w	r9, #0
 800d346:	d020      	beq.n	800d38a <__multiply+0x142>
 800d348:	6829      	ldr	r1, [r5, #0]
 800d34a:	f104 0c14 	add.w	ip, r4, #20
 800d34e:	46ae      	mov	lr, r5
 800d350:	f04f 0a00 	mov.w	sl, #0
 800d354:	f8bc b000 	ldrh.w	fp, [ip]
 800d358:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d35c:	fb09 220b 	mla	r2, r9, fp, r2
 800d360:	4492      	add	sl, r2
 800d362:	b289      	uxth	r1, r1
 800d364:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d368:	f84e 1b04 	str.w	r1, [lr], #4
 800d36c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d370:	f8be 1000 	ldrh.w	r1, [lr]
 800d374:	0c12      	lsrs	r2, r2, #16
 800d376:	fb09 1102 	mla	r1, r9, r2, r1
 800d37a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d37e:	4567      	cmp	r7, ip
 800d380:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d384:	d8e6      	bhi.n	800d354 <__multiply+0x10c>
 800d386:	9a01      	ldr	r2, [sp, #4]
 800d388:	50a9      	str	r1, [r5, r2]
 800d38a:	3504      	adds	r5, #4
 800d38c:	e79a      	b.n	800d2c4 <__multiply+0x7c>
 800d38e:	3e01      	subs	r6, #1
 800d390:	e79c      	b.n	800d2cc <__multiply+0x84>
 800d392:	bf00      	nop
 800d394:	08010108 	.word	0x08010108
 800d398:	08010194 	.word	0x08010194

0800d39c <__pow5mult>:
 800d39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a0:	4615      	mov	r5, r2
 800d3a2:	f012 0203 	ands.w	r2, r2, #3
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	460f      	mov	r7, r1
 800d3aa:	d007      	beq.n	800d3bc <__pow5mult+0x20>
 800d3ac:	4c25      	ldr	r4, [pc, #148]	; (800d444 <__pow5mult+0xa8>)
 800d3ae:	3a01      	subs	r2, #1
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3b6:	f7ff fe51 	bl	800d05c <__multadd>
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	10ad      	asrs	r5, r5, #2
 800d3be:	d03d      	beq.n	800d43c <__pow5mult+0xa0>
 800d3c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3c2:	b97c      	cbnz	r4, 800d3e4 <__pow5mult+0x48>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f7ff fdcd 	bl	800cf64 <malloc>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6270      	str	r0, [r6, #36]	; 0x24
 800d3ce:	b928      	cbnz	r0, 800d3dc <__pow5mult+0x40>
 800d3d0:	4b1d      	ldr	r3, [pc, #116]	; (800d448 <__pow5mult+0xac>)
 800d3d2:	481e      	ldr	r0, [pc, #120]	; (800d44c <__pow5mult+0xb0>)
 800d3d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3d8:	f000 fd2c 	bl	800de34 <__assert_func>
 800d3dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3e0:	6004      	str	r4, [r0, #0]
 800d3e2:	60c4      	str	r4, [r0, #12]
 800d3e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3ec:	b94c      	cbnz	r4, 800d402 <__pow5mult+0x66>
 800d3ee:	f240 2171 	movw	r1, #625	; 0x271
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7ff ff12 	bl	800d21c <__i2b>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3fe:	4604      	mov	r4, r0
 800d400:	6003      	str	r3, [r0, #0]
 800d402:	f04f 0900 	mov.w	r9, #0
 800d406:	07eb      	lsls	r3, r5, #31
 800d408:	d50a      	bpl.n	800d420 <__pow5mult+0x84>
 800d40a:	4639      	mov	r1, r7
 800d40c:	4622      	mov	r2, r4
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff ff1a 	bl	800d248 <__multiply>
 800d414:	4639      	mov	r1, r7
 800d416:	4680      	mov	r8, r0
 800d418:	4630      	mov	r0, r6
 800d41a:	f7ff fdfd 	bl	800d018 <_Bfree>
 800d41e:	4647      	mov	r7, r8
 800d420:	106d      	asrs	r5, r5, #1
 800d422:	d00b      	beq.n	800d43c <__pow5mult+0xa0>
 800d424:	6820      	ldr	r0, [r4, #0]
 800d426:	b938      	cbnz	r0, 800d438 <__pow5mult+0x9c>
 800d428:	4622      	mov	r2, r4
 800d42a:	4621      	mov	r1, r4
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7ff ff0b 	bl	800d248 <__multiply>
 800d432:	6020      	str	r0, [r4, #0]
 800d434:	f8c0 9000 	str.w	r9, [r0]
 800d438:	4604      	mov	r4, r0
 800d43a:	e7e4      	b.n	800d406 <__pow5mult+0x6a>
 800d43c:	4638      	mov	r0, r7
 800d43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d442:	bf00      	nop
 800d444:	080102e0 	.word	0x080102e0
 800d448:	08010096 	.word	0x08010096
 800d44c:	08010194 	.word	0x08010194

0800d450 <__lshift>:
 800d450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d454:	460c      	mov	r4, r1
 800d456:	6849      	ldr	r1, [r1, #4]
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	4607      	mov	r7, r0
 800d462:	4691      	mov	r9, r2
 800d464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d468:	f108 0601 	add.w	r6, r8, #1
 800d46c:	42b3      	cmp	r3, r6
 800d46e:	db0b      	blt.n	800d488 <__lshift+0x38>
 800d470:	4638      	mov	r0, r7
 800d472:	f7ff fd91 	bl	800cf98 <_Balloc>
 800d476:	4605      	mov	r5, r0
 800d478:	b948      	cbnz	r0, 800d48e <__lshift+0x3e>
 800d47a:	4602      	mov	r2, r0
 800d47c:	4b2a      	ldr	r3, [pc, #168]	; (800d528 <__lshift+0xd8>)
 800d47e:	482b      	ldr	r0, [pc, #172]	; (800d52c <__lshift+0xdc>)
 800d480:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d484:	f000 fcd6 	bl	800de34 <__assert_func>
 800d488:	3101      	adds	r1, #1
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	e7ee      	b.n	800d46c <__lshift+0x1c>
 800d48e:	2300      	movs	r3, #0
 800d490:	f100 0114 	add.w	r1, r0, #20
 800d494:	f100 0210 	add.w	r2, r0, #16
 800d498:	4618      	mov	r0, r3
 800d49a:	4553      	cmp	r3, sl
 800d49c:	db37      	blt.n	800d50e <__lshift+0xbe>
 800d49e:	6920      	ldr	r0, [r4, #16]
 800d4a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4a4:	f104 0314 	add.w	r3, r4, #20
 800d4a8:	f019 091f 	ands.w	r9, r9, #31
 800d4ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d4b4:	d02f      	beq.n	800d516 <__lshift+0xc6>
 800d4b6:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ba:	468a      	mov	sl, r1
 800d4bc:	f04f 0c00 	mov.w	ip, #0
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	fa02 f209 	lsl.w	r2, r2, r9
 800d4c6:	ea42 020c 	orr.w	r2, r2, ip
 800d4ca:	f84a 2b04 	str.w	r2, [sl], #4
 800d4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4d2:	4298      	cmp	r0, r3
 800d4d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d4d8:	d8f2      	bhi.n	800d4c0 <__lshift+0x70>
 800d4da:	1b03      	subs	r3, r0, r4
 800d4dc:	3b15      	subs	r3, #21
 800d4de:	f023 0303 	bic.w	r3, r3, #3
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	f104 0215 	add.w	r2, r4, #21
 800d4e8:	4290      	cmp	r0, r2
 800d4ea:	bf38      	it	cc
 800d4ec:	2304      	movcc	r3, #4
 800d4ee:	f841 c003 	str.w	ip, [r1, r3]
 800d4f2:	f1bc 0f00 	cmp.w	ip, #0
 800d4f6:	d001      	beq.n	800d4fc <__lshift+0xac>
 800d4f8:	f108 0602 	add.w	r6, r8, #2
 800d4fc:	3e01      	subs	r6, #1
 800d4fe:	4638      	mov	r0, r7
 800d500:	612e      	str	r6, [r5, #16]
 800d502:	4621      	mov	r1, r4
 800d504:	f7ff fd88 	bl	800d018 <_Bfree>
 800d508:	4628      	mov	r0, r5
 800d50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d512:	3301      	adds	r3, #1
 800d514:	e7c1      	b.n	800d49a <__lshift+0x4a>
 800d516:	3904      	subs	r1, #4
 800d518:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d520:	4298      	cmp	r0, r3
 800d522:	d8f9      	bhi.n	800d518 <__lshift+0xc8>
 800d524:	e7ea      	b.n	800d4fc <__lshift+0xac>
 800d526:	bf00      	nop
 800d528:	08010108 	.word	0x08010108
 800d52c:	08010194 	.word	0x08010194

0800d530 <__mcmp>:
 800d530:	b530      	push	{r4, r5, lr}
 800d532:	6902      	ldr	r2, [r0, #16]
 800d534:	690c      	ldr	r4, [r1, #16]
 800d536:	1b12      	subs	r2, r2, r4
 800d538:	d10e      	bne.n	800d558 <__mcmp+0x28>
 800d53a:	f100 0314 	add.w	r3, r0, #20
 800d53e:	3114      	adds	r1, #20
 800d540:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d544:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d548:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d54c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d550:	42a5      	cmp	r5, r4
 800d552:	d003      	beq.n	800d55c <__mcmp+0x2c>
 800d554:	d305      	bcc.n	800d562 <__mcmp+0x32>
 800d556:	2201      	movs	r2, #1
 800d558:	4610      	mov	r0, r2
 800d55a:	bd30      	pop	{r4, r5, pc}
 800d55c:	4283      	cmp	r3, r0
 800d55e:	d3f3      	bcc.n	800d548 <__mcmp+0x18>
 800d560:	e7fa      	b.n	800d558 <__mcmp+0x28>
 800d562:	f04f 32ff 	mov.w	r2, #4294967295
 800d566:	e7f7      	b.n	800d558 <__mcmp+0x28>

0800d568 <__mdiff>:
 800d568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	460c      	mov	r4, r1
 800d56e:	4606      	mov	r6, r0
 800d570:	4611      	mov	r1, r2
 800d572:	4620      	mov	r0, r4
 800d574:	4690      	mov	r8, r2
 800d576:	f7ff ffdb 	bl	800d530 <__mcmp>
 800d57a:	1e05      	subs	r5, r0, #0
 800d57c:	d110      	bne.n	800d5a0 <__mdiff+0x38>
 800d57e:	4629      	mov	r1, r5
 800d580:	4630      	mov	r0, r6
 800d582:	f7ff fd09 	bl	800cf98 <_Balloc>
 800d586:	b930      	cbnz	r0, 800d596 <__mdiff+0x2e>
 800d588:	4b3a      	ldr	r3, [pc, #232]	; (800d674 <__mdiff+0x10c>)
 800d58a:	4602      	mov	r2, r0
 800d58c:	f240 2132 	movw	r1, #562	; 0x232
 800d590:	4839      	ldr	r0, [pc, #228]	; (800d678 <__mdiff+0x110>)
 800d592:	f000 fc4f 	bl	800de34 <__assert_func>
 800d596:	2301      	movs	r3, #1
 800d598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d59c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a0:	bfa4      	itt	ge
 800d5a2:	4643      	movge	r3, r8
 800d5a4:	46a0      	movge	r8, r4
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5ac:	bfa6      	itte	ge
 800d5ae:	461c      	movge	r4, r3
 800d5b0:	2500      	movge	r5, #0
 800d5b2:	2501      	movlt	r5, #1
 800d5b4:	f7ff fcf0 	bl	800cf98 <_Balloc>
 800d5b8:	b920      	cbnz	r0, 800d5c4 <__mdiff+0x5c>
 800d5ba:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <__mdiff+0x10c>)
 800d5bc:	4602      	mov	r2, r0
 800d5be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5c2:	e7e5      	b.n	800d590 <__mdiff+0x28>
 800d5c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5c8:	6926      	ldr	r6, [r4, #16]
 800d5ca:	60c5      	str	r5, [r0, #12]
 800d5cc:	f104 0914 	add.w	r9, r4, #20
 800d5d0:	f108 0514 	add.w	r5, r8, #20
 800d5d4:	f100 0e14 	add.w	lr, r0, #20
 800d5d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5e0:	f108 0210 	add.w	r2, r8, #16
 800d5e4:	46f2      	mov	sl, lr
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5f0:	fa1f f883 	uxth.w	r8, r3
 800d5f4:	fa11 f18b 	uxtah	r1, r1, fp
 800d5f8:	0c1b      	lsrs	r3, r3, #16
 800d5fa:	eba1 0808 	sub.w	r8, r1, r8
 800d5fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d606:	fa1f f888 	uxth.w	r8, r8
 800d60a:	1419      	asrs	r1, r3, #16
 800d60c:	454e      	cmp	r6, r9
 800d60e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d612:	f84a 3b04 	str.w	r3, [sl], #4
 800d616:	d8e7      	bhi.n	800d5e8 <__mdiff+0x80>
 800d618:	1b33      	subs	r3, r6, r4
 800d61a:	3b15      	subs	r3, #21
 800d61c:	f023 0303 	bic.w	r3, r3, #3
 800d620:	3304      	adds	r3, #4
 800d622:	3415      	adds	r4, #21
 800d624:	42a6      	cmp	r6, r4
 800d626:	bf38      	it	cc
 800d628:	2304      	movcc	r3, #4
 800d62a:	441d      	add	r5, r3
 800d62c:	4473      	add	r3, lr
 800d62e:	469e      	mov	lr, r3
 800d630:	462e      	mov	r6, r5
 800d632:	4566      	cmp	r6, ip
 800d634:	d30e      	bcc.n	800d654 <__mdiff+0xec>
 800d636:	f10c 0203 	add.w	r2, ip, #3
 800d63a:	1b52      	subs	r2, r2, r5
 800d63c:	f022 0203 	bic.w	r2, r2, #3
 800d640:	3d03      	subs	r5, #3
 800d642:	45ac      	cmp	ip, r5
 800d644:	bf38      	it	cc
 800d646:	2200      	movcc	r2, #0
 800d648:	441a      	add	r2, r3
 800d64a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d64e:	b17b      	cbz	r3, 800d670 <__mdiff+0x108>
 800d650:	6107      	str	r7, [r0, #16]
 800d652:	e7a3      	b.n	800d59c <__mdiff+0x34>
 800d654:	f856 8b04 	ldr.w	r8, [r6], #4
 800d658:	fa11 f288 	uxtah	r2, r1, r8
 800d65c:	1414      	asrs	r4, r2, #16
 800d65e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d662:	b292      	uxth	r2, r2
 800d664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d668:	f84e 2b04 	str.w	r2, [lr], #4
 800d66c:	1421      	asrs	r1, r4, #16
 800d66e:	e7e0      	b.n	800d632 <__mdiff+0xca>
 800d670:	3f01      	subs	r7, #1
 800d672:	e7ea      	b.n	800d64a <__mdiff+0xe2>
 800d674:	08010108 	.word	0x08010108
 800d678:	08010194 	.word	0x08010194

0800d67c <__ulp>:
 800d67c:	b082      	sub	sp, #8
 800d67e:	ed8d 0b00 	vstr	d0, [sp]
 800d682:	9b01      	ldr	r3, [sp, #4]
 800d684:	4912      	ldr	r1, [pc, #72]	; (800d6d0 <__ulp+0x54>)
 800d686:	4019      	ands	r1, r3
 800d688:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d68c:	2900      	cmp	r1, #0
 800d68e:	dd05      	ble.n	800d69c <__ulp+0x20>
 800d690:	2200      	movs	r2, #0
 800d692:	460b      	mov	r3, r1
 800d694:	ec43 2b10 	vmov	d0, r2, r3
 800d698:	b002      	add	sp, #8
 800d69a:	4770      	bx	lr
 800d69c:	4249      	negs	r1, r1
 800d69e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d6a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d6a6:	f04f 0200 	mov.w	r2, #0
 800d6aa:	f04f 0300 	mov.w	r3, #0
 800d6ae:	da04      	bge.n	800d6ba <__ulp+0x3e>
 800d6b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d6b4:	fa41 f300 	asr.w	r3, r1, r0
 800d6b8:	e7ec      	b.n	800d694 <__ulp+0x18>
 800d6ba:	f1a0 0114 	sub.w	r1, r0, #20
 800d6be:	291e      	cmp	r1, #30
 800d6c0:	bfda      	itte	le
 800d6c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d6c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800d6ca:	2101      	movgt	r1, #1
 800d6cc:	460a      	mov	r2, r1
 800d6ce:	e7e1      	b.n	800d694 <__ulp+0x18>
 800d6d0:	7ff00000 	.word	0x7ff00000

0800d6d4 <__b2d>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	6905      	ldr	r5, [r0, #16]
 800d6d8:	f100 0714 	add.w	r7, r0, #20
 800d6dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d6e0:	1f2e      	subs	r6, r5, #4
 800d6e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7ff fd48 	bl	800d17c <__hi0bits>
 800d6ec:	f1c0 0320 	rsb	r3, r0, #32
 800d6f0:	280a      	cmp	r0, #10
 800d6f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d770 <__b2d+0x9c>
 800d6f6:	600b      	str	r3, [r1, #0]
 800d6f8:	dc14      	bgt.n	800d724 <__b2d+0x50>
 800d6fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800d6fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800d702:	42b7      	cmp	r7, r6
 800d704:	ea41 030c 	orr.w	r3, r1, ip
 800d708:	bf34      	ite	cc
 800d70a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d70e:	2100      	movcs	r1, #0
 800d710:	3015      	adds	r0, #21
 800d712:	fa04 f000 	lsl.w	r0, r4, r0
 800d716:	fa21 f10e 	lsr.w	r1, r1, lr
 800d71a:	ea40 0201 	orr.w	r2, r0, r1
 800d71e:	ec43 2b10 	vmov	d0, r2, r3
 800d722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d724:	42b7      	cmp	r7, r6
 800d726:	bf3a      	itte	cc
 800d728:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d72c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d730:	2100      	movcs	r1, #0
 800d732:	380b      	subs	r0, #11
 800d734:	d017      	beq.n	800d766 <__b2d+0x92>
 800d736:	f1c0 0c20 	rsb	ip, r0, #32
 800d73a:	fa04 f500 	lsl.w	r5, r4, r0
 800d73e:	42be      	cmp	r6, r7
 800d740:	fa21 f40c 	lsr.w	r4, r1, ip
 800d744:	ea45 0504 	orr.w	r5, r5, r4
 800d748:	bf8c      	ite	hi
 800d74a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d74e:	2400      	movls	r4, #0
 800d750:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d754:	fa01 f000 	lsl.w	r0, r1, r0
 800d758:	fa24 f40c 	lsr.w	r4, r4, ip
 800d75c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d760:	ea40 0204 	orr.w	r2, r0, r4
 800d764:	e7db      	b.n	800d71e <__b2d+0x4a>
 800d766:	ea44 030c 	orr.w	r3, r4, ip
 800d76a:	460a      	mov	r2, r1
 800d76c:	e7d7      	b.n	800d71e <__b2d+0x4a>
 800d76e:	bf00      	nop
 800d770:	3ff00000 	.word	0x3ff00000

0800d774 <__d2b>:
 800d774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d778:	4689      	mov	r9, r1
 800d77a:	2101      	movs	r1, #1
 800d77c:	ec57 6b10 	vmov	r6, r7, d0
 800d780:	4690      	mov	r8, r2
 800d782:	f7ff fc09 	bl	800cf98 <_Balloc>
 800d786:	4604      	mov	r4, r0
 800d788:	b930      	cbnz	r0, 800d798 <__d2b+0x24>
 800d78a:	4602      	mov	r2, r0
 800d78c:	4b25      	ldr	r3, [pc, #148]	; (800d824 <__d2b+0xb0>)
 800d78e:	4826      	ldr	r0, [pc, #152]	; (800d828 <__d2b+0xb4>)
 800d790:	f240 310a 	movw	r1, #778	; 0x30a
 800d794:	f000 fb4e 	bl	800de34 <__assert_func>
 800d798:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d79c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7a0:	bb35      	cbnz	r5, 800d7f0 <__d2b+0x7c>
 800d7a2:	2e00      	cmp	r6, #0
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	d028      	beq.n	800d7fa <__d2b+0x86>
 800d7a8:	4668      	mov	r0, sp
 800d7aa:	9600      	str	r6, [sp, #0]
 800d7ac:	f7ff fd06 	bl	800d1bc <__lo0bits>
 800d7b0:	9900      	ldr	r1, [sp, #0]
 800d7b2:	b300      	cbz	r0, 800d7f6 <__d2b+0x82>
 800d7b4:	9a01      	ldr	r2, [sp, #4]
 800d7b6:	f1c0 0320 	rsb	r3, r0, #32
 800d7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d7be:	430b      	orrs	r3, r1
 800d7c0:	40c2      	lsrs	r2, r0
 800d7c2:	6163      	str	r3, [r4, #20]
 800d7c4:	9201      	str	r2, [sp, #4]
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	61a3      	str	r3, [r4, #24]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bf14      	ite	ne
 800d7ce:	2202      	movne	r2, #2
 800d7d0:	2201      	moveq	r2, #1
 800d7d2:	6122      	str	r2, [r4, #16]
 800d7d4:	b1d5      	cbz	r5, 800d80c <__d2b+0x98>
 800d7d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7da:	4405      	add	r5, r0
 800d7dc:	f8c9 5000 	str.w	r5, [r9]
 800d7e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7e4:	f8c8 0000 	str.w	r0, [r8]
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	b003      	add	sp, #12
 800d7ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7f4:	e7d5      	b.n	800d7a2 <__d2b+0x2e>
 800d7f6:	6161      	str	r1, [r4, #20]
 800d7f8:	e7e5      	b.n	800d7c6 <__d2b+0x52>
 800d7fa:	a801      	add	r0, sp, #4
 800d7fc:	f7ff fcde 	bl	800d1bc <__lo0bits>
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	6163      	str	r3, [r4, #20]
 800d804:	2201      	movs	r2, #1
 800d806:	6122      	str	r2, [r4, #16]
 800d808:	3020      	adds	r0, #32
 800d80a:	e7e3      	b.n	800d7d4 <__d2b+0x60>
 800d80c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d814:	f8c9 0000 	str.w	r0, [r9]
 800d818:	6918      	ldr	r0, [r3, #16]
 800d81a:	f7ff fcaf 	bl	800d17c <__hi0bits>
 800d81e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d822:	e7df      	b.n	800d7e4 <__d2b+0x70>
 800d824:	08010108 	.word	0x08010108
 800d828:	08010194 	.word	0x08010194

0800d82c <__ratio>:
 800d82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d830:	4688      	mov	r8, r1
 800d832:	4669      	mov	r1, sp
 800d834:	4681      	mov	r9, r0
 800d836:	f7ff ff4d 	bl	800d6d4 <__b2d>
 800d83a:	a901      	add	r1, sp, #4
 800d83c:	4640      	mov	r0, r8
 800d83e:	ec55 4b10 	vmov	r4, r5, d0
 800d842:	f7ff ff47 	bl	800d6d4 <__b2d>
 800d846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d84a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d84e:	eba3 0c02 	sub.w	ip, r3, r2
 800d852:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d856:	1a9b      	subs	r3, r3, r2
 800d858:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d85c:	ec51 0b10 	vmov	r0, r1, d0
 800d860:	2b00      	cmp	r3, #0
 800d862:	bfd6      	itet	le
 800d864:	460a      	movle	r2, r1
 800d866:	462a      	movgt	r2, r5
 800d868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d86c:	468b      	mov	fp, r1
 800d86e:	462f      	mov	r7, r5
 800d870:	bfd4      	ite	le
 800d872:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d876:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d87a:	4620      	mov	r0, r4
 800d87c:	ee10 2a10 	vmov	r2, s0
 800d880:	465b      	mov	r3, fp
 800d882:	4639      	mov	r1, r7
 800d884:	f7f2 ffe2 	bl	800084c <__aeabi_ddiv>
 800d888:	ec41 0b10 	vmov	d0, r0, r1
 800d88c:	b003      	add	sp, #12
 800d88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d892 <__copybits>:
 800d892:	3901      	subs	r1, #1
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	1149      	asrs	r1, r1, #5
 800d898:	6914      	ldr	r4, [r2, #16]
 800d89a:	3101      	adds	r1, #1
 800d89c:	f102 0314 	add.w	r3, r2, #20
 800d8a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8a8:	1f05      	subs	r5, r0, #4
 800d8aa:	42a3      	cmp	r3, r4
 800d8ac:	d30c      	bcc.n	800d8c8 <__copybits+0x36>
 800d8ae:	1aa3      	subs	r3, r4, r2
 800d8b0:	3b11      	subs	r3, #17
 800d8b2:	f023 0303 	bic.w	r3, r3, #3
 800d8b6:	3211      	adds	r2, #17
 800d8b8:	42a2      	cmp	r2, r4
 800d8ba:	bf88      	it	hi
 800d8bc:	2300      	movhi	r3, #0
 800d8be:	4418      	add	r0, r3
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4288      	cmp	r0, r1
 800d8c4:	d305      	bcc.n	800d8d2 <__copybits+0x40>
 800d8c6:	bd70      	pop	{r4, r5, r6, pc}
 800d8c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8d0:	e7eb      	b.n	800d8aa <__copybits+0x18>
 800d8d2:	f840 3b04 	str.w	r3, [r0], #4
 800d8d6:	e7f4      	b.n	800d8c2 <__copybits+0x30>

0800d8d8 <__any_on>:
 800d8d8:	f100 0214 	add.w	r2, r0, #20
 800d8dc:	6900      	ldr	r0, [r0, #16]
 800d8de:	114b      	asrs	r3, r1, #5
 800d8e0:	4298      	cmp	r0, r3
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	db11      	blt.n	800d90a <__any_on+0x32>
 800d8e6:	dd0a      	ble.n	800d8fe <__any_on+0x26>
 800d8e8:	f011 011f 	ands.w	r1, r1, #31
 800d8ec:	d007      	beq.n	800d8fe <__any_on+0x26>
 800d8ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8f2:	fa24 f001 	lsr.w	r0, r4, r1
 800d8f6:	fa00 f101 	lsl.w	r1, r0, r1
 800d8fa:	428c      	cmp	r4, r1
 800d8fc:	d10b      	bne.n	800d916 <__any_on+0x3e>
 800d8fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d902:	4293      	cmp	r3, r2
 800d904:	d803      	bhi.n	800d90e <__any_on+0x36>
 800d906:	2000      	movs	r0, #0
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	4603      	mov	r3, r0
 800d90c:	e7f7      	b.n	800d8fe <__any_on+0x26>
 800d90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d912:	2900      	cmp	r1, #0
 800d914:	d0f5      	beq.n	800d902 <__any_on+0x2a>
 800d916:	2001      	movs	r0, #1
 800d918:	e7f6      	b.n	800d908 <__any_on+0x30>

0800d91a <_calloc_r>:
 800d91a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d91c:	fba1 2402 	umull	r2, r4, r1, r2
 800d920:	b94c      	cbnz	r4, 800d936 <_calloc_r+0x1c>
 800d922:	4611      	mov	r1, r2
 800d924:	9201      	str	r2, [sp, #4]
 800d926:	f000 f87b 	bl	800da20 <_malloc_r>
 800d92a:	9a01      	ldr	r2, [sp, #4]
 800d92c:	4605      	mov	r5, r0
 800d92e:	b930      	cbnz	r0, 800d93e <_calloc_r+0x24>
 800d930:	4628      	mov	r0, r5
 800d932:	b003      	add	sp, #12
 800d934:	bd30      	pop	{r4, r5, pc}
 800d936:	220c      	movs	r2, #12
 800d938:	6002      	str	r2, [r0, #0]
 800d93a:	2500      	movs	r5, #0
 800d93c:	e7f8      	b.n	800d930 <_calloc_r+0x16>
 800d93e:	4621      	mov	r1, r4
 800d940:	f7fc fbcc 	bl	800a0dc <memset>
 800d944:	e7f4      	b.n	800d930 <_calloc_r+0x16>
	...

0800d948 <_free_r>:
 800d948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d94a:	2900      	cmp	r1, #0
 800d94c:	d044      	beq.n	800d9d8 <_free_r+0x90>
 800d94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d952:	9001      	str	r0, [sp, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f1a1 0404 	sub.w	r4, r1, #4
 800d95a:	bfb8      	it	lt
 800d95c:	18e4      	addlt	r4, r4, r3
 800d95e:	f000 fa99 	bl	800de94 <__malloc_lock>
 800d962:	4a1e      	ldr	r2, [pc, #120]	; (800d9dc <_free_r+0x94>)
 800d964:	9801      	ldr	r0, [sp, #4]
 800d966:	6813      	ldr	r3, [r2, #0]
 800d968:	b933      	cbnz	r3, 800d978 <_free_r+0x30>
 800d96a:	6063      	str	r3, [r4, #4]
 800d96c:	6014      	str	r4, [r2, #0]
 800d96e:	b003      	add	sp, #12
 800d970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d974:	f000 ba94 	b.w	800dea0 <__malloc_unlock>
 800d978:	42a3      	cmp	r3, r4
 800d97a:	d908      	bls.n	800d98e <_free_r+0x46>
 800d97c:	6825      	ldr	r5, [r4, #0]
 800d97e:	1961      	adds	r1, r4, r5
 800d980:	428b      	cmp	r3, r1
 800d982:	bf01      	itttt	eq
 800d984:	6819      	ldreq	r1, [r3, #0]
 800d986:	685b      	ldreq	r3, [r3, #4]
 800d988:	1949      	addeq	r1, r1, r5
 800d98a:	6021      	streq	r1, [r4, #0]
 800d98c:	e7ed      	b.n	800d96a <_free_r+0x22>
 800d98e:	461a      	mov	r2, r3
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	b10b      	cbz	r3, 800d998 <_free_r+0x50>
 800d994:	42a3      	cmp	r3, r4
 800d996:	d9fa      	bls.n	800d98e <_free_r+0x46>
 800d998:	6811      	ldr	r1, [r2, #0]
 800d99a:	1855      	adds	r5, r2, r1
 800d99c:	42a5      	cmp	r5, r4
 800d99e:	d10b      	bne.n	800d9b8 <_free_r+0x70>
 800d9a0:	6824      	ldr	r4, [r4, #0]
 800d9a2:	4421      	add	r1, r4
 800d9a4:	1854      	adds	r4, r2, r1
 800d9a6:	42a3      	cmp	r3, r4
 800d9a8:	6011      	str	r1, [r2, #0]
 800d9aa:	d1e0      	bne.n	800d96e <_free_r+0x26>
 800d9ac:	681c      	ldr	r4, [r3, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	6053      	str	r3, [r2, #4]
 800d9b2:	4421      	add	r1, r4
 800d9b4:	6011      	str	r1, [r2, #0]
 800d9b6:	e7da      	b.n	800d96e <_free_r+0x26>
 800d9b8:	d902      	bls.n	800d9c0 <_free_r+0x78>
 800d9ba:	230c      	movs	r3, #12
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	e7d6      	b.n	800d96e <_free_r+0x26>
 800d9c0:	6825      	ldr	r5, [r4, #0]
 800d9c2:	1961      	adds	r1, r4, r5
 800d9c4:	428b      	cmp	r3, r1
 800d9c6:	bf04      	itt	eq
 800d9c8:	6819      	ldreq	r1, [r3, #0]
 800d9ca:	685b      	ldreq	r3, [r3, #4]
 800d9cc:	6063      	str	r3, [r4, #4]
 800d9ce:	bf04      	itt	eq
 800d9d0:	1949      	addeq	r1, r1, r5
 800d9d2:	6021      	streq	r1, [r4, #0]
 800d9d4:	6054      	str	r4, [r2, #4]
 800d9d6:	e7ca      	b.n	800d96e <_free_r+0x26>
 800d9d8:	b003      	add	sp, #12
 800d9da:	bd30      	pop	{r4, r5, pc}
 800d9dc:	2000246c 	.word	0x2000246c

0800d9e0 <sbrk_aligned>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	4e0e      	ldr	r6, [pc, #56]	; (800da1c <sbrk_aligned+0x3c>)
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	6831      	ldr	r1, [r6, #0]
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	b911      	cbnz	r1, 800d9f2 <sbrk_aligned+0x12>
 800d9ec:	f000 f9f0 	bl	800ddd0 <_sbrk_r>
 800d9f0:	6030      	str	r0, [r6, #0]
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 f9eb 	bl	800ddd0 <_sbrk_r>
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	d00a      	beq.n	800da14 <sbrk_aligned+0x34>
 800d9fe:	1cc4      	adds	r4, r0, #3
 800da00:	f024 0403 	bic.w	r4, r4, #3
 800da04:	42a0      	cmp	r0, r4
 800da06:	d007      	beq.n	800da18 <sbrk_aligned+0x38>
 800da08:	1a21      	subs	r1, r4, r0
 800da0a:	4628      	mov	r0, r5
 800da0c:	f000 f9e0 	bl	800ddd0 <_sbrk_r>
 800da10:	3001      	adds	r0, #1
 800da12:	d101      	bne.n	800da18 <sbrk_aligned+0x38>
 800da14:	f04f 34ff 	mov.w	r4, #4294967295
 800da18:	4620      	mov	r0, r4
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	20002470 	.word	0x20002470

0800da20 <_malloc_r>:
 800da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da24:	1ccd      	adds	r5, r1, #3
 800da26:	f025 0503 	bic.w	r5, r5, #3
 800da2a:	3508      	adds	r5, #8
 800da2c:	2d0c      	cmp	r5, #12
 800da2e:	bf38      	it	cc
 800da30:	250c      	movcc	r5, #12
 800da32:	2d00      	cmp	r5, #0
 800da34:	4607      	mov	r7, r0
 800da36:	db01      	blt.n	800da3c <_malloc_r+0x1c>
 800da38:	42a9      	cmp	r1, r5
 800da3a:	d905      	bls.n	800da48 <_malloc_r+0x28>
 800da3c:	230c      	movs	r3, #12
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	2600      	movs	r6, #0
 800da42:	4630      	mov	r0, r6
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da48:	4e2e      	ldr	r6, [pc, #184]	; (800db04 <_malloc_r+0xe4>)
 800da4a:	f000 fa23 	bl	800de94 <__malloc_lock>
 800da4e:	6833      	ldr	r3, [r6, #0]
 800da50:	461c      	mov	r4, r3
 800da52:	bb34      	cbnz	r4, 800daa2 <_malloc_r+0x82>
 800da54:	4629      	mov	r1, r5
 800da56:	4638      	mov	r0, r7
 800da58:	f7ff ffc2 	bl	800d9e0 <sbrk_aligned>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	4604      	mov	r4, r0
 800da60:	d14d      	bne.n	800dafe <_malloc_r+0xde>
 800da62:	6834      	ldr	r4, [r6, #0]
 800da64:	4626      	mov	r6, r4
 800da66:	2e00      	cmp	r6, #0
 800da68:	d140      	bne.n	800daec <_malloc_r+0xcc>
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	4631      	mov	r1, r6
 800da6e:	4638      	mov	r0, r7
 800da70:	eb04 0803 	add.w	r8, r4, r3
 800da74:	f000 f9ac 	bl	800ddd0 <_sbrk_r>
 800da78:	4580      	cmp	r8, r0
 800da7a:	d13a      	bne.n	800daf2 <_malloc_r+0xd2>
 800da7c:	6821      	ldr	r1, [r4, #0]
 800da7e:	3503      	adds	r5, #3
 800da80:	1a6d      	subs	r5, r5, r1
 800da82:	f025 0503 	bic.w	r5, r5, #3
 800da86:	3508      	adds	r5, #8
 800da88:	2d0c      	cmp	r5, #12
 800da8a:	bf38      	it	cc
 800da8c:	250c      	movcc	r5, #12
 800da8e:	4629      	mov	r1, r5
 800da90:	4638      	mov	r0, r7
 800da92:	f7ff ffa5 	bl	800d9e0 <sbrk_aligned>
 800da96:	3001      	adds	r0, #1
 800da98:	d02b      	beq.n	800daf2 <_malloc_r+0xd2>
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	442b      	add	r3, r5
 800da9e:	6023      	str	r3, [r4, #0]
 800daa0:	e00e      	b.n	800dac0 <_malloc_r+0xa0>
 800daa2:	6822      	ldr	r2, [r4, #0]
 800daa4:	1b52      	subs	r2, r2, r5
 800daa6:	d41e      	bmi.n	800dae6 <_malloc_r+0xc6>
 800daa8:	2a0b      	cmp	r2, #11
 800daaa:	d916      	bls.n	800dada <_malloc_r+0xba>
 800daac:	1961      	adds	r1, r4, r5
 800daae:	42a3      	cmp	r3, r4
 800dab0:	6025      	str	r5, [r4, #0]
 800dab2:	bf18      	it	ne
 800dab4:	6059      	strne	r1, [r3, #4]
 800dab6:	6863      	ldr	r3, [r4, #4]
 800dab8:	bf08      	it	eq
 800daba:	6031      	streq	r1, [r6, #0]
 800dabc:	5162      	str	r2, [r4, r5]
 800dabe:	604b      	str	r3, [r1, #4]
 800dac0:	4638      	mov	r0, r7
 800dac2:	f104 060b 	add.w	r6, r4, #11
 800dac6:	f000 f9eb 	bl	800dea0 <__malloc_unlock>
 800daca:	f026 0607 	bic.w	r6, r6, #7
 800dace:	1d23      	adds	r3, r4, #4
 800dad0:	1af2      	subs	r2, r6, r3
 800dad2:	d0b6      	beq.n	800da42 <_malloc_r+0x22>
 800dad4:	1b9b      	subs	r3, r3, r6
 800dad6:	50a3      	str	r3, [r4, r2]
 800dad8:	e7b3      	b.n	800da42 <_malloc_r+0x22>
 800dada:	6862      	ldr	r2, [r4, #4]
 800dadc:	42a3      	cmp	r3, r4
 800dade:	bf0c      	ite	eq
 800dae0:	6032      	streq	r2, [r6, #0]
 800dae2:	605a      	strne	r2, [r3, #4]
 800dae4:	e7ec      	b.n	800dac0 <_malloc_r+0xa0>
 800dae6:	4623      	mov	r3, r4
 800dae8:	6864      	ldr	r4, [r4, #4]
 800daea:	e7b2      	b.n	800da52 <_malloc_r+0x32>
 800daec:	4634      	mov	r4, r6
 800daee:	6876      	ldr	r6, [r6, #4]
 800daf0:	e7b9      	b.n	800da66 <_malloc_r+0x46>
 800daf2:	230c      	movs	r3, #12
 800daf4:	603b      	str	r3, [r7, #0]
 800daf6:	4638      	mov	r0, r7
 800daf8:	f000 f9d2 	bl	800dea0 <__malloc_unlock>
 800dafc:	e7a1      	b.n	800da42 <_malloc_r+0x22>
 800dafe:	6025      	str	r5, [r4, #0]
 800db00:	e7de      	b.n	800dac0 <_malloc_r+0xa0>
 800db02:	bf00      	nop
 800db04:	2000246c 	.word	0x2000246c

0800db08 <__ssputs_r>:
 800db08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db0c:	688e      	ldr	r6, [r1, #8]
 800db0e:	429e      	cmp	r6, r3
 800db10:	4682      	mov	sl, r0
 800db12:	460c      	mov	r4, r1
 800db14:	4690      	mov	r8, r2
 800db16:	461f      	mov	r7, r3
 800db18:	d838      	bhi.n	800db8c <__ssputs_r+0x84>
 800db1a:	898a      	ldrh	r2, [r1, #12]
 800db1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db20:	d032      	beq.n	800db88 <__ssputs_r+0x80>
 800db22:	6825      	ldr	r5, [r4, #0]
 800db24:	6909      	ldr	r1, [r1, #16]
 800db26:	eba5 0901 	sub.w	r9, r5, r1
 800db2a:	6965      	ldr	r5, [r4, #20]
 800db2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db34:	3301      	adds	r3, #1
 800db36:	444b      	add	r3, r9
 800db38:	106d      	asrs	r5, r5, #1
 800db3a:	429d      	cmp	r5, r3
 800db3c:	bf38      	it	cc
 800db3e:	461d      	movcc	r5, r3
 800db40:	0553      	lsls	r3, r2, #21
 800db42:	d531      	bpl.n	800dba8 <__ssputs_r+0xa0>
 800db44:	4629      	mov	r1, r5
 800db46:	f7ff ff6b 	bl	800da20 <_malloc_r>
 800db4a:	4606      	mov	r6, r0
 800db4c:	b950      	cbnz	r0, 800db64 <__ssputs_r+0x5c>
 800db4e:	230c      	movs	r3, #12
 800db50:	f8ca 3000 	str.w	r3, [sl]
 800db54:	89a3      	ldrh	r3, [r4, #12]
 800db56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	f04f 30ff 	mov.w	r0, #4294967295
 800db60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	464a      	mov	r2, r9
 800db68:	f7fc fa90 	bl	800a08c <memcpy>
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db76:	81a3      	strh	r3, [r4, #12]
 800db78:	6126      	str	r6, [r4, #16]
 800db7a:	6165      	str	r5, [r4, #20]
 800db7c:	444e      	add	r6, r9
 800db7e:	eba5 0509 	sub.w	r5, r5, r9
 800db82:	6026      	str	r6, [r4, #0]
 800db84:	60a5      	str	r5, [r4, #8]
 800db86:	463e      	mov	r6, r7
 800db88:	42be      	cmp	r6, r7
 800db8a:	d900      	bls.n	800db8e <__ssputs_r+0x86>
 800db8c:	463e      	mov	r6, r7
 800db8e:	6820      	ldr	r0, [r4, #0]
 800db90:	4632      	mov	r2, r6
 800db92:	4641      	mov	r1, r8
 800db94:	f7fc fa88 	bl	800a0a8 <memmove>
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	1b9b      	subs	r3, r3, r6
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	4433      	add	r3, r6
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	2000      	movs	r0, #0
 800dba6:	e7db      	b.n	800db60 <__ssputs_r+0x58>
 800dba8:	462a      	mov	r2, r5
 800dbaa:	f000 f97f 	bl	800deac <_realloc_r>
 800dbae:	4606      	mov	r6, r0
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d1e1      	bne.n	800db78 <__ssputs_r+0x70>
 800dbb4:	6921      	ldr	r1, [r4, #16]
 800dbb6:	4650      	mov	r0, sl
 800dbb8:	f7ff fec6 	bl	800d948 <_free_r>
 800dbbc:	e7c7      	b.n	800db4e <__ssputs_r+0x46>
	...

0800dbc0 <_svfiprintf_r>:
 800dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4698      	mov	r8, r3
 800dbc6:	898b      	ldrh	r3, [r1, #12]
 800dbc8:	061b      	lsls	r3, r3, #24
 800dbca:	b09d      	sub	sp, #116	; 0x74
 800dbcc:	4607      	mov	r7, r0
 800dbce:	460d      	mov	r5, r1
 800dbd0:	4614      	mov	r4, r2
 800dbd2:	d50e      	bpl.n	800dbf2 <_svfiprintf_r+0x32>
 800dbd4:	690b      	ldr	r3, [r1, #16]
 800dbd6:	b963      	cbnz	r3, 800dbf2 <_svfiprintf_r+0x32>
 800dbd8:	2140      	movs	r1, #64	; 0x40
 800dbda:	f7ff ff21 	bl	800da20 <_malloc_r>
 800dbde:	6028      	str	r0, [r5, #0]
 800dbe0:	6128      	str	r0, [r5, #16]
 800dbe2:	b920      	cbnz	r0, 800dbee <_svfiprintf_r+0x2e>
 800dbe4:	230c      	movs	r3, #12
 800dbe6:	603b      	str	r3, [r7, #0]
 800dbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbec:	e0d1      	b.n	800dd92 <_svfiprintf_r+0x1d2>
 800dbee:	2340      	movs	r3, #64	; 0x40
 800dbf0:	616b      	str	r3, [r5, #20]
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbf6:	2320      	movs	r3, #32
 800dbf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc00:	2330      	movs	r3, #48	; 0x30
 800dc02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ddac <_svfiprintf_r+0x1ec>
 800dc06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc0a:	f04f 0901 	mov.w	r9, #1
 800dc0e:	4623      	mov	r3, r4
 800dc10:	469a      	mov	sl, r3
 800dc12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc16:	b10a      	cbz	r2, 800dc1c <_svfiprintf_r+0x5c>
 800dc18:	2a25      	cmp	r2, #37	; 0x25
 800dc1a:	d1f9      	bne.n	800dc10 <_svfiprintf_r+0x50>
 800dc1c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc20:	d00b      	beq.n	800dc3a <_svfiprintf_r+0x7a>
 800dc22:	465b      	mov	r3, fp
 800dc24:	4622      	mov	r2, r4
 800dc26:	4629      	mov	r1, r5
 800dc28:	4638      	mov	r0, r7
 800dc2a:	f7ff ff6d 	bl	800db08 <__ssputs_r>
 800dc2e:	3001      	adds	r0, #1
 800dc30:	f000 80aa 	beq.w	800dd88 <_svfiprintf_r+0x1c8>
 800dc34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc36:	445a      	add	r2, fp
 800dc38:	9209      	str	r2, [sp, #36]	; 0x24
 800dc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f000 80a2 	beq.w	800dd88 <_svfiprintf_r+0x1c8>
 800dc44:	2300      	movs	r3, #0
 800dc46:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc4e:	f10a 0a01 	add.w	sl, sl, #1
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	9307      	str	r3, [sp, #28]
 800dc56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc5a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc5c:	4654      	mov	r4, sl
 800dc5e:	2205      	movs	r2, #5
 800dc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc64:	4851      	ldr	r0, [pc, #324]	; (800ddac <_svfiprintf_r+0x1ec>)
 800dc66:	f7f2 fabb 	bl	80001e0 <memchr>
 800dc6a:	9a04      	ldr	r2, [sp, #16]
 800dc6c:	b9d8      	cbnz	r0, 800dca6 <_svfiprintf_r+0xe6>
 800dc6e:	06d0      	lsls	r0, r2, #27
 800dc70:	bf44      	itt	mi
 800dc72:	2320      	movmi	r3, #32
 800dc74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc78:	0711      	lsls	r1, r2, #28
 800dc7a:	bf44      	itt	mi
 800dc7c:	232b      	movmi	r3, #43	; 0x2b
 800dc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc82:	f89a 3000 	ldrb.w	r3, [sl]
 800dc86:	2b2a      	cmp	r3, #42	; 0x2a
 800dc88:	d015      	beq.n	800dcb6 <_svfiprintf_r+0xf6>
 800dc8a:	9a07      	ldr	r2, [sp, #28]
 800dc8c:	4654      	mov	r4, sl
 800dc8e:	2000      	movs	r0, #0
 800dc90:	f04f 0c0a 	mov.w	ip, #10
 800dc94:	4621      	mov	r1, r4
 800dc96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc9a:	3b30      	subs	r3, #48	; 0x30
 800dc9c:	2b09      	cmp	r3, #9
 800dc9e:	d94e      	bls.n	800dd3e <_svfiprintf_r+0x17e>
 800dca0:	b1b0      	cbz	r0, 800dcd0 <_svfiprintf_r+0x110>
 800dca2:	9207      	str	r2, [sp, #28]
 800dca4:	e014      	b.n	800dcd0 <_svfiprintf_r+0x110>
 800dca6:	eba0 0308 	sub.w	r3, r0, r8
 800dcaa:	fa09 f303 	lsl.w	r3, r9, r3
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	9304      	str	r3, [sp, #16]
 800dcb2:	46a2      	mov	sl, r4
 800dcb4:	e7d2      	b.n	800dc5c <_svfiprintf_r+0x9c>
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	1d19      	adds	r1, r3, #4
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	9103      	str	r1, [sp, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	bfbb      	ittet	lt
 800dcc2:	425b      	neglt	r3, r3
 800dcc4:	f042 0202 	orrlt.w	r2, r2, #2
 800dcc8:	9307      	strge	r3, [sp, #28]
 800dcca:	9307      	strlt	r3, [sp, #28]
 800dccc:	bfb8      	it	lt
 800dcce:	9204      	strlt	r2, [sp, #16]
 800dcd0:	7823      	ldrb	r3, [r4, #0]
 800dcd2:	2b2e      	cmp	r3, #46	; 0x2e
 800dcd4:	d10c      	bne.n	800dcf0 <_svfiprintf_r+0x130>
 800dcd6:	7863      	ldrb	r3, [r4, #1]
 800dcd8:	2b2a      	cmp	r3, #42	; 0x2a
 800dcda:	d135      	bne.n	800dd48 <_svfiprintf_r+0x188>
 800dcdc:	9b03      	ldr	r3, [sp, #12]
 800dcde:	1d1a      	adds	r2, r3, #4
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	9203      	str	r2, [sp, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	bfb8      	it	lt
 800dce8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcec:	3402      	adds	r4, #2
 800dcee:	9305      	str	r3, [sp, #20]
 800dcf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ddbc <_svfiprintf_r+0x1fc>
 800dcf4:	7821      	ldrb	r1, [r4, #0]
 800dcf6:	2203      	movs	r2, #3
 800dcf8:	4650      	mov	r0, sl
 800dcfa:	f7f2 fa71 	bl	80001e0 <memchr>
 800dcfe:	b140      	cbz	r0, 800dd12 <_svfiprintf_r+0x152>
 800dd00:	2340      	movs	r3, #64	; 0x40
 800dd02:	eba0 000a 	sub.w	r0, r0, sl
 800dd06:	fa03 f000 	lsl.w	r0, r3, r0
 800dd0a:	9b04      	ldr	r3, [sp, #16]
 800dd0c:	4303      	orrs	r3, r0
 800dd0e:	3401      	adds	r4, #1
 800dd10:	9304      	str	r3, [sp, #16]
 800dd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd16:	4826      	ldr	r0, [pc, #152]	; (800ddb0 <_svfiprintf_r+0x1f0>)
 800dd18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd1c:	2206      	movs	r2, #6
 800dd1e:	f7f2 fa5f 	bl	80001e0 <memchr>
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d038      	beq.n	800dd98 <_svfiprintf_r+0x1d8>
 800dd26:	4b23      	ldr	r3, [pc, #140]	; (800ddb4 <_svfiprintf_r+0x1f4>)
 800dd28:	bb1b      	cbnz	r3, 800dd72 <_svfiprintf_r+0x1b2>
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	3307      	adds	r3, #7
 800dd2e:	f023 0307 	bic.w	r3, r3, #7
 800dd32:	3308      	adds	r3, #8
 800dd34:	9303      	str	r3, [sp, #12]
 800dd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd38:	4433      	add	r3, r6
 800dd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd3c:	e767      	b.n	800dc0e <_svfiprintf_r+0x4e>
 800dd3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd42:	460c      	mov	r4, r1
 800dd44:	2001      	movs	r0, #1
 800dd46:	e7a5      	b.n	800dc94 <_svfiprintf_r+0xd4>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	3401      	adds	r4, #1
 800dd4c:	9305      	str	r3, [sp, #20]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	f04f 0c0a 	mov.w	ip, #10
 800dd54:	4620      	mov	r0, r4
 800dd56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd5a:	3a30      	subs	r2, #48	; 0x30
 800dd5c:	2a09      	cmp	r2, #9
 800dd5e:	d903      	bls.n	800dd68 <_svfiprintf_r+0x1a8>
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d0c5      	beq.n	800dcf0 <_svfiprintf_r+0x130>
 800dd64:	9105      	str	r1, [sp, #20]
 800dd66:	e7c3      	b.n	800dcf0 <_svfiprintf_r+0x130>
 800dd68:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e7f0      	b.n	800dd54 <_svfiprintf_r+0x194>
 800dd72:	ab03      	add	r3, sp, #12
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	462a      	mov	r2, r5
 800dd78:	4b0f      	ldr	r3, [pc, #60]	; (800ddb8 <_svfiprintf_r+0x1f8>)
 800dd7a:	a904      	add	r1, sp, #16
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	f7fc fa55 	bl	800a22c <_printf_float>
 800dd82:	1c42      	adds	r2, r0, #1
 800dd84:	4606      	mov	r6, r0
 800dd86:	d1d6      	bne.n	800dd36 <_svfiprintf_r+0x176>
 800dd88:	89ab      	ldrh	r3, [r5, #12]
 800dd8a:	065b      	lsls	r3, r3, #25
 800dd8c:	f53f af2c 	bmi.w	800dbe8 <_svfiprintf_r+0x28>
 800dd90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd92:	b01d      	add	sp, #116	; 0x74
 800dd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd98:	ab03      	add	r3, sp, #12
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	462a      	mov	r2, r5
 800dd9e:	4b06      	ldr	r3, [pc, #24]	; (800ddb8 <_svfiprintf_r+0x1f8>)
 800dda0:	a904      	add	r1, sp, #16
 800dda2:	4638      	mov	r0, r7
 800dda4:	f7fc fce6 	bl	800a774 <_printf_i>
 800dda8:	e7eb      	b.n	800dd82 <_svfiprintf_r+0x1c2>
 800ddaa:	bf00      	nop
 800ddac:	080102ec 	.word	0x080102ec
 800ddb0:	080102f6 	.word	0x080102f6
 800ddb4:	0800a22d 	.word	0x0800a22d
 800ddb8:	0800db09 	.word	0x0800db09
 800ddbc:	080102f2 	.word	0x080102f2

0800ddc0 <nan>:
 800ddc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ddc8 <nan+0x8>
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	00000000 	.word	0x00000000
 800ddcc:	7ff80000 	.word	0x7ff80000

0800ddd0 <_sbrk_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d06      	ldr	r5, [pc, #24]	; (800ddec <_sbrk_r+0x1c>)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4608      	mov	r0, r1
 800ddda:	602b      	str	r3, [r5, #0]
 800dddc:	f7f4 f9e8 	bl	80021b0 <_sbrk>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	d102      	bne.n	800ddea <_sbrk_r+0x1a>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	b103      	cbz	r3, 800ddea <_sbrk_r+0x1a>
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	20002474 	.word	0x20002474

0800ddf0 <strncmp>:
 800ddf0:	b510      	push	{r4, lr}
 800ddf2:	b17a      	cbz	r2, 800de14 <strncmp+0x24>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	3901      	subs	r1, #1
 800ddf8:	1884      	adds	r4, r0, r2
 800ddfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ddfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800de02:	4290      	cmp	r0, r2
 800de04:	d101      	bne.n	800de0a <strncmp+0x1a>
 800de06:	42a3      	cmp	r3, r4
 800de08:	d101      	bne.n	800de0e <strncmp+0x1e>
 800de0a:	1a80      	subs	r0, r0, r2
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	2800      	cmp	r0, #0
 800de10:	d1f3      	bne.n	800ddfa <strncmp+0xa>
 800de12:	e7fa      	b.n	800de0a <strncmp+0x1a>
 800de14:	4610      	mov	r0, r2
 800de16:	e7f9      	b.n	800de0c <strncmp+0x1c>

0800de18 <__ascii_wctomb>:
 800de18:	b149      	cbz	r1, 800de2e <__ascii_wctomb+0x16>
 800de1a:	2aff      	cmp	r2, #255	; 0xff
 800de1c:	bf85      	ittet	hi
 800de1e:	238a      	movhi	r3, #138	; 0x8a
 800de20:	6003      	strhi	r3, [r0, #0]
 800de22:	700a      	strbls	r2, [r1, #0]
 800de24:	f04f 30ff 	movhi.w	r0, #4294967295
 800de28:	bf98      	it	ls
 800de2a:	2001      	movls	r0, #1
 800de2c:	4770      	bx	lr
 800de2e:	4608      	mov	r0, r1
 800de30:	4770      	bx	lr
	...

0800de34 <__assert_func>:
 800de34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de36:	4614      	mov	r4, r2
 800de38:	461a      	mov	r2, r3
 800de3a:	4b09      	ldr	r3, [pc, #36]	; (800de60 <__assert_func+0x2c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4605      	mov	r5, r0
 800de40:	68d8      	ldr	r0, [r3, #12]
 800de42:	b14c      	cbz	r4, 800de58 <__assert_func+0x24>
 800de44:	4b07      	ldr	r3, [pc, #28]	; (800de64 <__assert_func+0x30>)
 800de46:	9100      	str	r1, [sp, #0]
 800de48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de4c:	4906      	ldr	r1, [pc, #24]	; (800de68 <__assert_func+0x34>)
 800de4e:	462b      	mov	r3, r5
 800de50:	f000 f80e 	bl	800de70 <fiprintf>
 800de54:	f000 fa72 	bl	800e33c <abort>
 800de58:	4b04      	ldr	r3, [pc, #16]	; (800de6c <__assert_func+0x38>)
 800de5a:	461c      	mov	r4, r3
 800de5c:	e7f3      	b.n	800de46 <__assert_func+0x12>
 800de5e:	bf00      	nop
 800de60:	2000010c 	.word	0x2000010c
 800de64:	080102fd 	.word	0x080102fd
 800de68:	0801030a 	.word	0x0801030a
 800de6c:	08010338 	.word	0x08010338

0800de70 <fiprintf>:
 800de70:	b40e      	push	{r1, r2, r3}
 800de72:	b503      	push	{r0, r1, lr}
 800de74:	4601      	mov	r1, r0
 800de76:	ab03      	add	r3, sp, #12
 800de78:	4805      	ldr	r0, [pc, #20]	; (800de90 <fiprintf+0x20>)
 800de7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de7e:	6800      	ldr	r0, [r0, #0]
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	f000 f86b 	bl	800df5c <_vfiprintf_r>
 800de86:	b002      	add	sp, #8
 800de88:	f85d eb04 	ldr.w	lr, [sp], #4
 800de8c:	b003      	add	sp, #12
 800de8e:	4770      	bx	lr
 800de90:	2000010c 	.word	0x2000010c

0800de94 <__malloc_lock>:
 800de94:	4801      	ldr	r0, [pc, #4]	; (800de9c <__malloc_lock+0x8>)
 800de96:	f000 bc11 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800de9a:	bf00      	nop
 800de9c:	20002478 	.word	0x20002478

0800dea0 <__malloc_unlock>:
 800dea0:	4801      	ldr	r0, [pc, #4]	; (800dea8 <__malloc_unlock+0x8>)
 800dea2:	f000 bc0c 	b.w	800e6be <__retarget_lock_release_recursive>
 800dea6:	bf00      	nop
 800dea8:	20002478 	.word	0x20002478

0800deac <_realloc_r>:
 800deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	4680      	mov	r8, r0
 800deb2:	4614      	mov	r4, r2
 800deb4:	460e      	mov	r6, r1
 800deb6:	b921      	cbnz	r1, 800dec2 <_realloc_r+0x16>
 800deb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	4611      	mov	r1, r2
 800debe:	f7ff bdaf 	b.w	800da20 <_malloc_r>
 800dec2:	b92a      	cbnz	r2, 800ded0 <_realloc_r+0x24>
 800dec4:	f7ff fd40 	bl	800d948 <_free_r>
 800dec8:	4625      	mov	r5, r4
 800deca:	4628      	mov	r0, r5
 800decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded0:	f000 fc5c 	bl	800e78c <_malloc_usable_size_r>
 800ded4:	4284      	cmp	r4, r0
 800ded6:	4607      	mov	r7, r0
 800ded8:	d802      	bhi.n	800dee0 <_realloc_r+0x34>
 800deda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dede:	d812      	bhi.n	800df06 <_realloc_r+0x5a>
 800dee0:	4621      	mov	r1, r4
 800dee2:	4640      	mov	r0, r8
 800dee4:	f7ff fd9c 	bl	800da20 <_malloc_r>
 800dee8:	4605      	mov	r5, r0
 800deea:	2800      	cmp	r0, #0
 800deec:	d0ed      	beq.n	800deca <_realloc_r+0x1e>
 800deee:	42bc      	cmp	r4, r7
 800def0:	4622      	mov	r2, r4
 800def2:	4631      	mov	r1, r6
 800def4:	bf28      	it	cs
 800def6:	463a      	movcs	r2, r7
 800def8:	f7fc f8c8 	bl	800a08c <memcpy>
 800defc:	4631      	mov	r1, r6
 800defe:	4640      	mov	r0, r8
 800df00:	f7ff fd22 	bl	800d948 <_free_r>
 800df04:	e7e1      	b.n	800deca <_realloc_r+0x1e>
 800df06:	4635      	mov	r5, r6
 800df08:	e7df      	b.n	800deca <_realloc_r+0x1e>

0800df0a <__sfputc_r>:
 800df0a:	6893      	ldr	r3, [r2, #8]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	b410      	push	{r4}
 800df12:	6093      	str	r3, [r2, #8]
 800df14:	da08      	bge.n	800df28 <__sfputc_r+0x1e>
 800df16:	6994      	ldr	r4, [r2, #24]
 800df18:	42a3      	cmp	r3, r4
 800df1a:	db01      	blt.n	800df20 <__sfputc_r+0x16>
 800df1c:	290a      	cmp	r1, #10
 800df1e:	d103      	bne.n	800df28 <__sfputc_r+0x1e>
 800df20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df24:	f000 b94a 	b.w	800e1bc <__swbuf_r>
 800df28:	6813      	ldr	r3, [r2, #0]
 800df2a:	1c58      	adds	r0, r3, #1
 800df2c:	6010      	str	r0, [r2, #0]
 800df2e:	7019      	strb	r1, [r3, #0]
 800df30:	4608      	mov	r0, r1
 800df32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <__sfputs_r>:
 800df38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3a:	4606      	mov	r6, r0
 800df3c:	460f      	mov	r7, r1
 800df3e:	4614      	mov	r4, r2
 800df40:	18d5      	adds	r5, r2, r3
 800df42:	42ac      	cmp	r4, r5
 800df44:	d101      	bne.n	800df4a <__sfputs_r+0x12>
 800df46:	2000      	movs	r0, #0
 800df48:	e007      	b.n	800df5a <__sfputs_r+0x22>
 800df4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4e:	463a      	mov	r2, r7
 800df50:	4630      	mov	r0, r6
 800df52:	f7ff ffda 	bl	800df0a <__sfputc_r>
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	d1f3      	bne.n	800df42 <__sfputs_r+0xa>
 800df5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df5c <_vfiprintf_r>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	460d      	mov	r5, r1
 800df62:	b09d      	sub	sp, #116	; 0x74
 800df64:	4614      	mov	r4, r2
 800df66:	4698      	mov	r8, r3
 800df68:	4606      	mov	r6, r0
 800df6a:	b118      	cbz	r0, 800df74 <_vfiprintf_r+0x18>
 800df6c:	6983      	ldr	r3, [r0, #24]
 800df6e:	b90b      	cbnz	r3, 800df74 <_vfiprintf_r+0x18>
 800df70:	f000 fb06 	bl	800e580 <__sinit>
 800df74:	4b89      	ldr	r3, [pc, #548]	; (800e19c <_vfiprintf_r+0x240>)
 800df76:	429d      	cmp	r5, r3
 800df78:	d11b      	bne.n	800dfb2 <_vfiprintf_r+0x56>
 800df7a:	6875      	ldr	r5, [r6, #4]
 800df7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df7e:	07d9      	lsls	r1, r3, #31
 800df80:	d405      	bmi.n	800df8e <_vfiprintf_r+0x32>
 800df82:	89ab      	ldrh	r3, [r5, #12]
 800df84:	059a      	lsls	r2, r3, #22
 800df86:	d402      	bmi.n	800df8e <_vfiprintf_r+0x32>
 800df88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df8a:	f000 fb97 	bl	800e6bc <__retarget_lock_acquire_recursive>
 800df8e:	89ab      	ldrh	r3, [r5, #12]
 800df90:	071b      	lsls	r3, r3, #28
 800df92:	d501      	bpl.n	800df98 <_vfiprintf_r+0x3c>
 800df94:	692b      	ldr	r3, [r5, #16]
 800df96:	b9eb      	cbnz	r3, 800dfd4 <_vfiprintf_r+0x78>
 800df98:	4629      	mov	r1, r5
 800df9a:	4630      	mov	r0, r6
 800df9c:	f000 f960 	bl	800e260 <__swsetup_r>
 800dfa0:	b1c0      	cbz	r0, 800dfd4 <_vfiprintf_r+0x78>
 800dfa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfa4:	07dc      	lsls	r4, r3, #31
 800dfa6:	d50e      	bpl.n	800dfc6 <_vfiprintf_r+0x6a>
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	b01d      	add	sp, #116	; 0x74
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	4b7b      	ldr	r3, [pc, #492]	; (800e1a0 <_vfiprintf_r+0x244>)
 800dfb4:	429d      	cmp	r5, r3
 800dfb6:	d101      	bne.n	800dfbc <_vfiprintf_r+0x60>
 800dfb8:	68b5      	ldr	r5, [r6, #8]
 800dfba:	e7df      	b.n	800df7c <_vfiprintf_r+0x20>
 800dfbc:	4b79      	ldr	r3, [pc, #484]	; (800e1a4 <_vfiprintf_r+0x248>)
 800dfbe:	429d      	cmp	r5, r3
 800dfc0:	bf08      	it	eq
 800dfc2:	68f5      	ldreq	r5, [r6, #12]
 800dfc4:	e7da      	b.n	800df7c <_vfiprintf_r+0x20>
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	0598      	lsls	r0, r3, #22
 800dfca:	d4ed      	bmi.n	800dfa8 <_vfiprintf_r+0x4c>
 800dfcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfce:	f000 fb76 	bl	800e6be <__retarget_lock_release_recursive>
 800dfd2:	e7e9      	b.n	800dfa8 <_vfiprintf_r+0x4c>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfd8:	2320      	movs	r3, #32
 800dfda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfde:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfe2:	2330      	movs	r3, #48	; 0x30
 800dfe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e1a8 <_vfiprintf_r+0x24c>
 800dfe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfec:	f04f 0901 	mov.w	r9, #1
 800dff0:	4623      	mov	r3, r4
 800dff2:	469a      	mov	sl, r3
 800dff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dff8:	b10a      	cbz	r2, 800dffe <_vfiprintf_r+0xa2>
 800dffa:	2a25      	cmp	r2, #37	; 0x25
 800dffc:	d1f9      	bne.n	800dff2 <_vfiprintf_r+0x96>
 800dffe:	ebba 0b04 	subs.w	fp, sl, r4
 800e002:	d00b      	beq.n	800e01c <_vfiprintf_r+0xc0>
 800e004:	465b      	mov	r3, fp
 800e006:	4622      	mov	r2, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	4630      	mov	r0, r6
 800e00c:	f7ff ff94 	bl	800df38 <__sfputs_r>
 800e010:	3001      	adds	r0, #1
 800e012:	f000 80aa 	beq.w	800e16a <_vfiprintf_r+0x20e>
 800e016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e018:	445a      	add	r2, fp
 800e01a:	9209      	str	r2, [sp, #36]	; 0x24
 800e01c:	f89a 3000 	ldrb.w	r3, [sl]
 800e020:	2b00      	cmp	r3, #0
 800e022:	f000 80a2 	beq.w	800e16a <_vfiprintf_r+0x20e>
 800e026:	2300      	movs	r3, #0
 800e028:	f04f 32ff 	mov.w	r2, #4294967295
 800e02c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e030:	f10a 0a01 	add.w	sl, sl, #1
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	9307      	str	r3, [sp, #28]
 800e038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e03c:	931a      	str	r3, [sp, #104]	; 0x68
 800e03e:	4654      	mov	r4, sl
 800e040:	2205      	movs	r2, #5
 800e042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e046:	4858      	ldr	r0, [pc, #352]	; (800e1a8 <_vfiprintf_r+0x24c>)
 800e048:	f7f2 f8ca 	bl	80001e0 <memchr>
 800e04c:	9a04      	ldr	r2, [sp, #16]
 800e04e:	b9d8      	cbnz	r0, 800e088 <_vfiprintf_r+0x12c>
 800e050:	06d1      	lsls	r1, r2, #27
 800e052:	bf44      	itt	mi
 800e054:	2320      	movmi	r3, #32
 800e056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e05a:	0713      	lsls	r3, r2, #28
 800e05c:	bf44      	itt	mi
 800e05e:	232b      	movmi	r3, #43	; 0x2b
 800e060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e064:	f89a 3000 	ldrb.w	r3, [sl]
 800e068:	2b2a      	cmp	r3, #42	; 0x2a
 800e06a:	d015      	beq.n	800e098 <_vfiprintf_r+0x13c>
 800e06c:	9a07      	ldr	r2, [sp, #28]
 800e06e:	4654      	mov	r4, sl
 800e070:	2000      	movs	r0, #0
 800e072:	f04f 0c0a 	mov.w	ip, #10
 800e076:	4621      	mov	r1, r4
 800e078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e07c:	3b30      	subs	r3, #48	; 0x30
 800e07e:	2b09      	cmp	r3, #9
 800e080:	d94e      	bls.n	800e120 <_vfiprintf_r+0x1c4>
 800e082:	b1b0      	cbz	r0, 800e0b2 <_vfiprintf_r+0x156>
 800e084:	9207      	str	r2, [sp, #28]
 800e086:	e014      	b.n	800e0b2 <_vfiprintf_r+0x156>
 800e088:	eba0 0308 	sub.w	r3, r0, r8
 800e08c:	fa09 f303 	lsl.w	r3, r9, r3
 800e090:	4313      	orrs	r3, r2
 800e092:	9304      	str	r3, [sp, #16]
 800e094:	46a2      	mov	sl, r4
 800e096:	e7d2      	b.n	800e03e <_vfiprintf_r+0xe2>
 800e098:	9b03      	ldr	r3, [sp, #12]
 800e09a:	1d19      	adds	r1, r3, #4
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	9103      	str	r1, [sp, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bfbb      	ittet	lt
 800e0a4:	425b      	neglt	r3, r3
 800e0a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e0aa:	9307      	strge	r3, [sp, #28]
 800e0ac:	9307      	strlt	r3, [sp, #28]
 800e0ae:	bfb8      	it	lt
 800e0b0:	9204      	strlt	r2, [sp, #16]
 800e0b2:	7823      	ldrb	r3, [r4, #0]
 800e0b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e0b6:	d10c      	bne.n	800e0d2 <_vfiprintf_r+0x176>
 800e0b8:	7863      	ldrb	r3, [r4, #1]
 800e0ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e0bc:	d135      	bne.n	800e12a <_vfiprintf_r+0x1ce>
 800e0be:	9b03      	ldr	r3, [sp, #12]
 800e0c0:	1d1a      	adds	r2, r3, #4
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	9203      	str	r2, [sp, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfb8      	it	lt
 800e0ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0ce:	3402      	adds	r4, #2
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e1b8 <_vfiprintf_r+0x25c>
 800e0d6:	7821      	ldrb	r1, [r4, #0]
 800e0d8:	2203      	movs	r2, #3
 800e0da:	4650      	mov	r0, sl
 800e0dc:	f7f2 f880 	bl	80001e0 <memchr>
 800e0e0:	b140      	cbz	r0, 800e0f4 <_vfiprintf_r+0x198>
 800e0e2:	2340      	movs	r3, #64	; 0x40
 800e0e4:	eba0 000a 	sub.w	r0, r0, sl
 800e0e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e0ec:	9b04      	ldr	r3, [sp, #16]
 800e0ee:	4303      	orrs	r3, r0
 800e0f0:	3401      	adds	r4, #1
 800e0f2:	9304      	str	r3, [sp, #16]
 800e0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f8:	482c      	ldr	r0, [pc, #176]	; (800e1ac <_vfiprintf_r+0x250>)
 800e0fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0fe:	2206      	movs	r2, #6
 800e100:	f7f2 f86e 	bl	80001e0 <memchr>
 800e104:	2800      	cmp	r0, #0
 800e106:	d03f      	beq.n	800e188 <_vfiprintf_r+0x22c>
 800e108:	4b29      	ldr	r3, [pc, #164]	; (800e1b0 <_vfiprintf_r+0x254>)
 800e10a:	bb1b      	cbnz	r3, 800e154 <_vfiprintf_r+0x1f8>
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	3307      	adds	r3, #7
 800e110:	f023 0307 	bic.w	r3, r3, #7
 800e114:	3308      	adds	r3, #8
 800e116:	9303      	str	r3, [sp, #12]
 800e118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e11a:	443b      	add	r3, r7
 800e11c:	9309      	str	r3, [sp, #36]	; 0x24
 800e11e:	e767      	b.n	800dff0 <_vfiprintf_r+0x94>
 800e120:	fb0c 3202 	mla	r2, ip, r2, r3
 800e124:	460c      	mov	r4, r1
 800e126:	2001      	movs	r0, #1
 800e128:	e7a5      	b.n	800e076 <_vfiprintf_r+0x11a>
 800e12a:	2300      	movs	r3, #0
 800e12c:	3401      	adds	r4, #1
 800e12e:	9305      	str	r3, [sp, #20]
 800e130:	4619      	mov	r1, r3
 800e132:	f04f 0c0a 	mov.w	ip, #10
 800e136:	4620      	mov	r0, r4
 800e138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13c:	3a30      	subs	r2, #48	; 0x30
 800e13e:	2a09      	cmp	r2, #9
 800e140:	d903      	bls.n	800e14a <_vfiprintf_r+0x1ee>
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0c5      	beq.n	800e0d2 <_vfiprintf_r+0x176>
 800e146:	9105      	str	r1, [sp, #20]
 800e148:	e7c3      	b.n	800e0d2 <_vfiprintf_r+0x176>
 800e14a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e14e:	4604      	mov	r4, r0
 800e150:	2301      	movs	r3, #1
 800e152:	e7f0      	b.n	800e136 <_vfiprintf_r+0x1da>
 800e154:	ab03      	add	r3, sp, #12
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	462a      	mov	r2, r5
 800e15a:	4b16      	ldr	r3, [pc, #88]	; (800e1b4 <_vfiprintf_r+0x258>)
 800e15c:	a904      	add	r1, sp, #16
 800e15e:	4630      	mov	r0, r6
 800e160:	f7fc f864 	bl	800a22c <_printf_float>
 800e164:	4607      	mov	r7, r0
 800e166:	1c78      	adds	r0, r7, #1
 800e168:	d1d6      	bne.n	800e118 <_vfiprintf_r+0x1bc>
 800e16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e16c:	07d9      	lsls	r1, r3, #31
 800e16e:	d405      	bmi.n	800e17c <_vfiprintf_r+0x220>
 800e170:	89ab      	ldrh	r3, [r5, #12]
 800e172:	059a      	lsls	r2, r3, #22
 800e174:	d402      	bmi.n	800e17c <_vfiprintf_r+0x220>
 800e176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e178:	f000 faa1 	bl	800e6be <__retarget_lock_release_recursive>
 800e17c:	89ab      	ldrh	r3, [r5, #12]
 800e17e:	065b      	lsls	r3, r3, #25
 800e180:	f53f af12 	bmi.w	800dfa8 <_vfiprintf_r+0x4c>
 800e184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e186:	e711      	b.n	800dfac <_vfiprintf_r+0x50>
 800e188:	ab03      	add	r3, sp, #12
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	462a      	mov	r2, r5
 800e18e:	4b09      	ldr	r3, [pc, #36]	; (800e1b4 <_vfiprintf_r+0x258>)
 800e190:	a904      	add	r1, sp, #16
 800e192:	4630      	mov	r0, r6
 800e194:	f7fc faee 	bl	800a774 <_printf_i>
 800e198:	e7e4      	b.n	800e164 <_vfiprintf_r+0x208>
 800e19a:	bf00      	nop
 800e19c:	0801035c 	.word	0x0801035c
 800e1a0:	0801037c 	.word	0x0801037c
 800e1a4:	0801033c 	.word	0x0801033c
 800e1a8:	080102ec 	.word	0x080102ec
 800e1ac:	080102f6 	.word	0x080102f6
 800e1b0:	0800a22d 	.word	0x0800a22d
 800e1b4:	0800df39 	.word	0x0800df39
 800e1b8:	080102f2 	.word	0x080102f2

0800e1bc <__swbuf_r>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	460e      	mov	r6, r1
 800e1c0:	4614      	mov	r4, r2
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	b118      	cbz	r0, 800e1ce <__swbuf_r+0x12>
 800e1c6:	6983      	ldr	r3, [r0, #24]
 800e1c8:	b90b      	cbnz	r3, 800e1ce <__swbuf_r+0x12>
 800e1ca:	f000 f9d9 	bl	800e580 <__sinit>
 800e1ce:	4b21      	ldr	r3, [pc, #132]	; (800e254 <__swbuf_r+0x98>)
 800e1d0:	429c      	cmp	r4, r3
 800e1d2:	d12b      	bne.n	800e22c <__swbuf_r+0x70>
 800e1d4:	686c      	ldr	r4, [r5, #4]
 800e1d6:	69a3      	ldr	r3, [r4, #24]
 800e1d8:	60a3      	str	r3, [r4, #8]
 800e1da:	89a3      	ldrh	r3, [r4, #12]
 800e1dc:	071a      	lsls	r2, r3, #28
 800e1de:	d52f      	bpl.n	800e240 <__swbuf_r+0x84>
 800e1e0:	6923      	ldr	r3, [r4, #16]
 800e1e2:	b36b      	cbz	r3, 800e240 <__swbuf_r+0x84>
 800e1e4:	6923      	ldr	r3, [r4, #16]
 800e1e6:	6820      	ldr	r0, [r4, #0]
 800e1e8:	1ac0      	subs	r0, r0, r3
 800e1ea:	6963      	ldr	r3, [r4, #20]
 800e1ec:	b2f6      	uxtb	r6, r6
 800e1ee:	4283      	cmp	r3, r0
 800e1f0:	4637      	mov	r7, r6
 800e1f2:	dc04      	bgt.n	800e1fe <__swbuf_r+0x42>
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f000 f92e 	bl	800e458 <_fflush_r>
 800e1fc:	bb30      	cbnz	r0, 800e24c <__swbuf_r+0x90>
 800e1fe:	68a3      	ldr	r3, [r4, #8]
 800e200:	3b01      	subs	r3, #1
 800e202:	60a3      	str	r3, [r4, #8]
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	1c5a      	adds	r2, r3, #1
 800e208:	6022      	str	r2, [r4, #0]
 800e20a:	701e      	strb	r6, [r3, #0]
 800e20c:	6963      	ldr	r3, [r4, #20]
 800e20e:	3001      	adds	r0, #1
 800e210:	4283      	cmp	r3, r0
 800e212:	d004      	beq.n	800e21e <__swbuf_r+0x62>
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	07db      	lsls	r3, r3, #31
 800e218:	d506      	bpl.n	800e228 <__swbuf_r+0x6c>
 800e21a:	2e0a      	cmp	r6, #10
 800e21c:	d104      	bne.n	800e228 <__swbuf_r+0x6c>
 800e21e:	4621      	mov	r1, r4
 800e220:	4628      	mov	r0, r5
 800e222:	f000 f919 	bl	800e458 <_fflush_r>
 800e226:	b988      	cbnz	r0, 800e24c <__swbuf_r+0x90>
 800e228:	4638      	mov	r0, r7
 800e22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e22c:	4b0a      	ldr	r3, [pc, #40]	; (800e258 <__swbuf_r+0x9c>)
 800e22e:	429c      	cmp	r4, r3
 800e230:	d101      	bne.n	800e236 <__swbuf_r+0x7a>
 800e232:	68ac      	ldr	r4, [r5, #8]
 800e234:	e7cf      	b.n	800e1d6 <__swbuf_r+0x1a>
 800e236:	4b09      	ldr	r3, [pc, #36]	; (800e25c <__swbuf_r+0xa0>)
 800e238:	429c      	cmp	r4, r3
 800e23a:	bf08      	it	eq
 800e23c:	68ec      	ldreq	r4, [r5, #12]
 800e23e:	e7ca      	b.n	800e1d6 <__swbuf_r+0x1a>
 800e240:	4621      	mov	r1, r4
 800e242:	4628      	mov	r0, r5
 800e244:	f000 f80c 	bl	800e260 <__swsetup_r>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d0cb      	beq.n	800e1e4 <__swbuf_r+0x28>
 800e24c:	f04f 37ff 	mov.w	r7, #4294967295
 800e250:	e7ea      	b.n	800e228 <__swbuf_r+0x6c>
 800e252:	bf00      	nop
 800e254:	0801035c 	.word	0x0801035c
 800e258:	0801037c 	.word	0x0801037c
 800e25c:	0801033c 	.word	0x0801033c

0800e260 <__swsetup_r>:
 800e260:	4b32      	ldr	r3, [pc, #200]	; (800e32c <__swsetup_r+0xcc>)
 800e262:	b570      	push	{r4, r5, r6, lr}
 800e264:	681d      	ldr	r5, [r3, #0]
 800e266:	4606      	mov	r6, r0
 800e268:	460c      	mov	r4, r1
 800e26a:	b125      	cbz	r5, 800e276 <__swsetup_r+0x16>
 800e26c:	69ab      	ldr	r3, [r5, #24]
 800e26e:	b913      	cbnz	r3, 800e276 <__swsetup_r+0x16>
 800e270:	4628      	mov	r0, r5
 800e272:	f000 f985 	bl	800e580 <__sinit>
 800e276:	4b2e      	ldr	r3, [pc, #184]	; (800e330 <__swsetup_r+0xd0>)
 800e278:	429c      	cmp	r4, r3
 800e27a:	d10f      	bne.n	800e29c <__swsetup_r+0x3c>
 800e27c:	686c      	ldr	r4, [r5, #4]
 800e27e:	89a3      	ldrh	r3, [r4, #12]
 800e280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e284:	0719      	lsls	r1, r3, #28
 800e286:	d42c      	bmi.n	800e2e2 <__swsetup_r+0x82>
 800e288:	06dd      	lsls	r5, r3, #27
 800e28a:	d411      	bmi.n	800e2b0 <__swsetup_r+0x50>
 800e28c:	2309      	movs	r3, #9
 800e28e:	6033      	str	r3, [r6, #0]
 800e290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e294:	81a3      	strh	r3, [r4, #12]
 800e296:	f04f 30ff 	mov.w	r0, #4294967295
 800e29a:	e03e      	b.n	800e31a <__swsetup_r+0xba>
 800e29c:	4b25      	ldr	r3, [pc, #148]	; (800e334 <__swsetup_r+0xd4>)
 800e29e:	429c      	cmp	r4, r3
 800e2a0:	d101      	bne.n	800e2a6 <__swsetup_r+0x46>
 800e2a2:	68ac      	ldr	r4, [r5, #8]
 800e2a4:	e7eb      	b.n	800e27e <__swsetup_r+0x1e>
 800e2a6:	4b24      	ldr	r3, [pc, #144]	; (800e338 <__swsetup_r+0xd8>)
 800e2a8:	429c      	cmp	r4, r3
 800e2aa:	bf08      	it	eq
 800e2ac:	68ec      	ldreq	r4, [r5, #12]
 800e2ae:	e7e6      	b.n	800e27e <__swsetup_r+0x1e>
 800e2b0:	0758      	lsls	r0, r3, #29
 800e2b2:	d512      	bpl.n	800e2da <__swsetup_r+0x7a>
 800e2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2b6:	b141      	cbz	r1, 800e2ca <__swsetup_r+0x6a>
 800e2b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2bc:	4299      	cmp	r1, r3
 800e2be:	d002      	beq.n	800e2c6 <__swsetup_r+0x66>
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7ff fb41 	bl	800d948 <_free_r>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	6363      	str	r3, [r4, #52]	; 0x34
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	6063      	str	r3, [r4, #4]
 800e2d6:	6923      	ldr	r3, [r4, #16]
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	89a3      	ldrh	r3, [r4, #12]
 800e2dc:	f043 0308 	orr.w	r3, r3, #8
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	6923      	ldr	r3, [r4, #16]
 800e2e4:	b94b      	cbnz	r3, 800e2fa <__swsetup_r+0x9a>
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2f0:	d003      	beq.n	800e2fa <__swsetup_r+0x9a>
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	f000 fa09 	bl	800e70c <__smakebuf_r>
 800e2fa:	89a0      	ldrh	r0, [r4, #12]
 800e2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e300:	f010 0301 	ands.w	r3, r0, #1
 800e304:	d00a      	beq.n	800e31c <__swsetup_r+0xbc>
 800e306:	2300      	movs	r3, #0
 800e308:	60a3      	str	r3, [r4, #8]
 800e30a:	6963      	ldr	r3, [r4, #20]
 800e30c:	425b      	negs	r3, r3
 800e30e:	61a3      	str	r3, [r4, #24]
 800e310:	6923      	ldr	r3, [r4, #16]
 800e312:	b943      	cbnz	r3, 800e326 <__swsetup_r+0xc6>
 800e314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e318:	d1ba      	bne.n	800e290 <__swsetup_r+0x30>
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	0781      	lsls	r1, r0, #30
 800e31e:	bf58      	it	pl
 800e320:	6963      	ldrpl	r3, [r4, #20]
 800e322:	60a3      	str	r3, [r4, #8]
 800e324:	e7f4      	b.n	800e310 <__swsetup_r+0xb0>
 800e326:	2000      	movs	r0, #0
 800e328:	e7f7      	b.n	800e31a <__swsetup_r+0xba>
 800e32a:	bf00      	nop
 800e32c:	2000010c 	.word	0x2000010c
 800e330:	0801035c 	.word	0x0801035c
 800e334:	0801037c 	.word	0x0801037c
 800e338:	0801033c 	.word	0x0801033c

0800e33c <abort>:
 800e33c:	b508      	push	{r3, lr}
 800e33e:	2006      	movs	r0, #6
 800e340:	f000 fa54 	bl	800e7ec <raise>
 800e344:	2001      	movs	r0, #1
 800e346:	f7f3 febb 	bl	80020c0 <_exit>
	...

0800e34c <__sflush_r>:
 800e34c:	898a      	ldrh	r2, [r1, #12]
 800e34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e352:	4605      	mov	r5, r0
 800e354:	0710      	lsls	r0, r2, #28
 800e356:	460c      	mov	r4, r1
 800e358:	d458      	bmi.n	800e40c <__sflush_r+0xc0>
 800e35a:	684b      	ldr	r3, [r1, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	dc05      	bgt.n	800e36c <__sflush_r+0x20>
 800e360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e362:	2b00      	cmp	r3, #0
 800e364:	dc02      	bgt.n	800e36c <__sflush_r+0x20>
 800e366:	2000      	movs	r0, #0
 800e368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e36e:	2e00      	cmp	r6, #0
 800e370:	d0f9      	beq.n	800e366 <__sflush_r+0x1a>
 800e372:	2300      	movs	r3, #0
 800e374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e378:	682f      	ldr	r7, [r5, #0]
 800e37a:	602b      	str	r3, [r5, #0]
 800e37c:	d032      	beq.n	800e3e4 <__sflush_r+0x98>
 800e37e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	075a      	lsls	r2, r3, #29
 800e384:	d505      	bpl.n	800e392 <__sflush_r+0x46>
 800e386:	6863      	ldr	r3, [r4, #4]
 800e388:	1ac0      	subs	r0, r0, r3
 800e38a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e38c:	b10b      	cbz	r3, 800e392 <__sflush_r+0x46>
 800e38e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e390:	1ac0      	subs	r0, r0, r3
 800e392:	2300      	movs	r3, #0
 800e394:	4602      	mov	r2, r0
 800e396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e398:	6a21      	ldr	r1, [r4, #32]
 800e39a:	4628      	mov	r0, r5
 800e39c:	47b0      	blx	r6
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	d106      	bne.n	800e3b2 <__sflush_r+0x66>
 800e3a4:	6829      	ldr	r1, [r5, #0]
 800e3a6:	291d      	cmp	r1, #29
 800e3a8:	d82c      	bhi.n	800e404 <__sflush_r+0xb8>
 800e3aa:	4a2a      	ldr	r2, [pc, #168]	; (800e454 <__sflush_r+0x108>)
 800e3ac:	40ca      	lsrs	r2, r1
 800e3ae:	07d6      	lsls	r6, r2, #31
 800e3b0:	d528      	bpl.n	800e404 <__sflush_r+0xb8>
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	6062      	str	r2, [r4, #4]
 800e3b6:	04d9      	lsls	r1, r3, #19
 800e3b8:	6922      	ldr	r2, [r4, #16]
 800e3ba:	6022      	str	r2, [r4, #0]
 800e3bc:	d504      	bpl.n	800e3c8 <__sflush_r+0x7c>
 800e3be:	1c42      	adds	r2, r0, #1
 800e3c0:	d101      	bne.n	800e3c6 <__sflush_r+0x7a>
 800e3c2:	682b      	ldr	r3, [r5, #0]
 800e3c4:	b903      	cbnz	r3, 800e3c8 <__sflush_r+0x7c>
 800e3c6:	6560      	str	r0, [r4, #84]	; 0x54
 800e3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ca:	602f      	str	r7, [r5, #0]
 800e3cc:	2900      	cmp	r1, #0
 800e3ce:	d0ca      	beq.n	800e366 <__sflush_r+0x1a>
 800e3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3d4:	4299      	cmp	r1, r3
 800e3d6:	d002      	beq.n	800e3de <__sflush_r+0x92>
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f7ff fab5 	bl	800d948 <_free_r>
 800e3de:	2000      	movs	r0, #0
 800e3e0:	6360      	str	r0, [r4, #52]	; 0x34
 800e3e2:	e7c1      	b.n	800e368 <__sflush_r+0x1c>
 800e3e4:	6a21      	ldr	r1, [r4, #32]
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b0      	blx	r6
 800e3ec:	1c41      	adds	r1, r0, #1
 800e3ee:	d1c7      	bne.n	800e380 <__sflush_r+0x34>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0c4      	beq.n	800e380 <__sflush_r+0x34>
 800e3f6:	2b1d      	cmp	r3, #29
 800e3f8:	d001      	beq.n	800e3fe <__sflush_r+0xb2>
 800e3fa:	2b16      	cmp	r3, #22
 800e3fc:	d101      	bne.n	800e402 <__sflush_r+0xb6>
 800e3fe:	602f      	str	r7, [r5, #0]
 800e400:	e7b1      	b.n	800e366 <__sflush_r+0x1a>
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	e7ad      	b.n	800e368 <__sflush_r+0x1c>
 800e40c:	690f      	ldr	r7, [r1, #16]
 800e40e:	2f00      	cmp	r7, #0
 800e410:	d0a9      	beq.n	800e366 <__sflush_r+0x1a>
 800e412:	0793      	lsls	r3, r2, #30
 800e414:	680e      	ldr	r6, [r1, #0]
 800e416:	bf08      	it	eq
 800e418:	694b      	ldreq	r3, [r1, #20]
 800e41a:	600f      	str	r7, [r1, #0]
 800e41c:	bf18      	it	ne
 800e41e:	2300      	movne	r3, #0
 800e420:	eba6 0807 	sub.w	r8, r6, r7
 800e424:	608b      	str	r3, [r1, #8]
 800e426:	f1b8 0f00 	cmp.w	r8, #0
 800e42a:	dd9c      	ble.n	800e366 <__sflush_r+0x1a>
 800e42c:	6a21      	ldr	r1, [r4, #32]
 800e42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e430:	4643      	mov	r3, r8
 800e432:	463a      	mov	r2, r7
 800e434:	4628      	mov	r0, r5
 800e436:	47b0      	blx	r6
 800e438:	2800      	cmp	r0, #0
 800e43a:	dc06      	bgt.n	800e44a <__sflush_r+0xfe>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e442:	81a3      	strh	r3, [r4, #12]
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	e78e      	b.n	800e368 <__sflush_r+0x1c>
 800e44a:	4407      	add	r7, r0
 800e44c:	eba8 0800 	sub.w	r8, r8, r0
 800e450:	e7e9      	b.n	800e426 <__sflush_r+0xda>
 800e452:	bf00      	nop
 800e454:	20400001 	.word	0x20400001

0800e458 <_fflush_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	690b      	ldr	r3, [r1, #16]
 800e45c:	4605      	mov	r5, r0
 800e45e:	460c      	mov	r4, r1
 800e460:	b913      	cbnz	r3, 800e468 <_fflush_r+0x10>
 800e462:	2500      	movs	r5, #0
 800e464:	4628      	mov	r0, r5
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	b118      	cbz	r0, 800e472 <_fflush_r+0x1a>
 800e46a:	6983      	ldr	r3, [r0, #24]
 800e46c:	b90b      	cbnz	r3, 800e472 <_fflush_r+0x1a>
 800e46e:	f000 f887 	bl	800e580 <__sinit>
 800e472:	4b14      	ldr	r3, [pc, #80]	; (800e4c4 <_fflush_r+0x6c>)
 800e474:	429c      	cmp	r4, r3
 800e476:	d11b      	bne.n	800e4b0 <_fflush_r+0x58>
 800e478:	686c      	ldr	r4, [r5, #4]
 800e47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d0ef      	beq.n	800e462 <_fflush_r+0xa>
 800e482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e484:	07d0      	lsls	r0, r2, #31
 800e486:	d404      	bmi.n	800e492 <_fflush_r+0x3a>
 800e488:	0599      	lsls	r1, r3, #22
 800e48a:	d402      	bmi.n	800e492 <_fflush_r+0x3a>
 800e48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e48e:	f000 f915 	bl	800e6bc <__retarget_lock_acquire_recursive>
 800e492:	4628      	mov	r0, r5
 800e494:	4621      	mov	r1, r4
 800e496:	f7ff ff59 	bl	800e34c <__sflush_r>
 800e49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e49c:	07da      	lsls	r2, r3, #31
 800e49e:	4605      	mov	r5, r0
 800e4a0:	d4e0      	bmi.n	800e464 <_fflush_r+0xc>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	059b      	lsls	r3, r3, #22
 800e4a6:	d4dd      	bmi.n	800e464 <_fflush_r+0xc>
 800e4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4aa:	f000 f908 	bl	800e6be <__retarget_lock_release_recursive>
 800e4ae:	e7d9      	b.n	800e464 <_fflush_r+0xc>
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <_fflush_r+0x70>)
 800e4b2:	429c      	cmp	r4, r3
 800e4b4:	d101      	bne.n	800e4ba <_fflush_r+0x62>
 800e4b6:	68ac      	ldr	r4, [r5, #8]
 800e4b8:	e7df      	b.n	800e47a <_fflush_r+0x22>
 800e4ba:	4b04      	ldr	r3, [pc, #16]	; (800e4cc <_fflush_r+0x74>)
 800e4bc:	429c      	cmp	r4, r3
 800e4be:	bf08      	it	eq
 800e4c0:	68ec      	ldreq	r4, [r5, #12]
 800e4c2:	e7da      	b.n	800e47a <_fflush_r+0x22>
 800e4c4:	0801035c 	.word	0x0801035c
 800e4c8:	0801037c 	.word	0x0801037c
 800e4cc:	0801033c 	.word	0x0801033c

0800e4d0 <std>:
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	b510      	push	{r4, lr}
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4de:	6083      	str	r3, [r0, #8]
 800e4e0:	8181      	strh	r1, [r0, #12]
 800e4e2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4e4:	81c2      	strh	r2, [r0, #14]
 800e4e6:	6183      	str	r3, [r0, #24]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	2208      	movs	r2, #8
 800e4ec:	305c      	adds	r0, #92	; 0x5c
 800e4ee:	f7fb fdf5 	bl	800a0dc <memset>
 800e4f2:	4b05      	ldr	r3, [pc, #20]	; (800e508 <std+0x38>)
 800e4f4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4f6:	4b05      	ldr	r3, [pc, #20]	; (800e50c <std+0x3c>)
 800e4f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4fa:	4b05      	ldr	r3, [pc, #20]	; (800e510 <std+0x40>)
 800e4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4fe:	4b05      	ldr	r3, [pc, #20]	; (800e514 <std+0x44>)
 800e500:	6224      	str	r4, [r4, #32]
 800e502:	6323      	str	r3, [r4, #48]	; 0x30
 800e504:	bd10      	pop	{r4, pc}
 800e506:	bf00      	nop
 800e508:	0800e825 	.word	0x0800e825
 800e50c:	0800e847 	.word	0x0800e847
 800e510:	0800e87f 	.word	0x0800e87f
 800e514:	0800e8a3 	.word	0x0800e8a3

0800e518 <_cleanup_r>:
 800e518:	4901      	ldr	r1, [pc, #4]	; (800e520 <_cleanup_r+0x8>)
 800e51a:	f000 b8af 	b.w	800e67c <_fwalk_reent>
 800e51e:	bf00      	nop
 800e520:	0800e459 	.word	0x0800e459

0800e524 <__sfmoreglue>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	2268      	movs	r2, #104	; 0x68
 800e528:	1e4d      	subs	r5, r1, #1
 800e52a:	4355      	muls	r5, r2
 800e52c:	460e      	mov	r6, r1
 800e52e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e532:	f7ff fa75 	bl	800da20 <_malloc_r>
 800e536:	4604      	mov	r4, r0
 800e538:	b140      	cbz	r0, 800e54c <__sfmoreglue+0x28>
 800e53a:	2100      	movs	r1, #0
 800e53c:	e9c0 1600 	strd	r1, r6, [r0]
 800e540:	300c      	adds	r0, #12
 800e542:	60a0      	str	r0, [r4, #8]
 800e544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e548:	f7fb fdc8 	bl	800a0dc <memset>
 800e54c:	4620      	mov	r0, r4
 800e54e:	bd70      	pop	{r4, r5, r6, pc}

0800e550 <__sfp_lock_acquire>:
 800e550:	4801      	ldr	r0, [pc, #4]	; (800e558 <__sfp_lock_acquire+0x8>)
 800e552:	f000 b8b3 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800e556:	bf00      	nop
 800e558:	20002479 	.word	0x20002479

0800e55c <__sfp_lock_release>:
 800e55c:	4801      	ldr	r0, [pc, #4]	; (800e564 <__sfp_lock_release+0x8>)
 800e55e:	f000 b8ae 	b.w	800e6be <__retarget_lock_release_recursive>
 800e562:	bf00      	nop
 800e564:	20002479 	.word	0x20002479

0800e568 <__sinit_lock_acquire>:
 800e568:	4801      	ldr	r0, [pc, #4]	; (800e570 <__sinit_lock_acquire+0x8>)
 800e56a:	f000 b8a7 	b.w	800e6bc <__retarget_lock_acquire_recursive>
 800e56e:	bf00      	nop
 800e570:	2000247a 	.word	0x2000247a

0800e574 <__sinit_lock_release>:
 800e574:	4801      	ldr	r0, [pc, #4]	; (800e57c <__sinit_lock_release+0x8>)
 800e576:	f000 b8a2 	b.w	800e6be <__retarget_lock_release_recursive>
 800e57a:	bf00      	nop
 800e57c:	2000247a 	.word	0x2000247a

0800e580 <__sinit>:
 800e580:	b510      	push	{r4, lr}
 800e582:	4604      	mov	r4, r0
 800e584:	f7ff fff0 	bl	800e568 <__sinit_lock_acquire>
 800e588:	69a3      	ldr	r3, [r4, #24]
 800e58a:	b11b      	cbz	r3, 800e594 <__sinit+0x14>
 800e58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e590:	f7ff bff0 	b.w	800e574 <__sinit_lock_release>
 800e594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e598:	6523      	str	r3, [r4, #80]	; 0x50
 800e59a:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <__sinit+0x68>)
 800e59c:	4a13      	ldr	r2, [pc, #76]	; (800e5ec <__sinit+0x6c>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5a2:	42a3      	cmp	r3, r4
 800e5a4:	bf04      	itt	eq
 800e5a6:	2301      	moveq	r3, #1
 800e5a8:	61a3      	streq	r3, [r4, #24]
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 f820 	bl	800e5f0 <__sfp>
 800e5b0:	6060      	str	r0, [r4, #4]
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f000 f81c 	bl	800e5f0 <__sfp>
 800e5b8:	60a0      	str	r0, [r4, #8]
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f000 f818 	bl	800e5f0 <__sfp>
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	60e0      	str	r0, [r4, #12]
 800e5c4:	2104      	movs	r1, #4
 800e5c6:	6860      	ldr	r0, [r4, #4]
 800e5c8:	f7ff ff82 	bl	800e4d0 <std>
 800e5cc:	68a0      	ldr	r0, [r4, #8]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	2109      	movs	r1, #9
 800e5d2:	f7ff ff7d 	bl	800e4d0 <std>
 800e5d6:	68e0      	ldr	r0, [r4, #12]
 800e5d8:	2202      	movs	r2, #2
 800e5da:	2112      	movs	r1, #18
 800e5dc:	f7ff ff78 	bl	800e4d0 <std>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	61a3      	str	r3, [r4, #24]
 800e5e4:	e7d2      	b.n	800e58c <__sinit+0xc>
 800e5e6:	bf00      	nop
 800e5e8:	0800fef4 	.word	0x0800fef4
 800e5ec:	0800e519 	.word	0x0800e519

0800e5f0 <__sfp>:
 800e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	f7ff ffac 	bl	800e550 <__sfp_lock_acquire>
 800e5f8:	4b1e      	ldr	r3, [pc, #120]	; (800e674 <__sfp+0x84>)
 800e5fa:	681e      	ldr	r6, [r3, #0]
 800e5fc:	69b3      	ldr	r3, [r6, #24]
 800e5fe:	b913      	cbnz	r3, 800e606 <__sfp+0x16>
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff ffbd 	bl	800e580 <__sinit>
 800e606:	3648      	adds	r6, #72	; 0x48
 800e608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	d503      	bpl.n	800e618 <__sfp+0x28>
 800e610:	6833      	ldr	r3, [r6, #0]
 800e612:	b30b      	cbz	r3, 800e658 <__sfp+0x68>
 800e614:	6836      	ldr	r6, [r6, #0]
 800e616:	e7f7      	b.n	800e608 <__sfp+0x18>
 800e618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e61c:	b9d5      	cbnz	r5, 800e654 <__sfp+0x64>
 800e61e:	4b16      	ldr	r3, [pc, #88]	; (800e678 <__sfp+0x88>)
 800e620:	60e3      	str	r3, [r4, #12]
 800e622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e626:	6665      	str	r5, [r4, #100]	; 0x64
 800e628:	f000 f847 	bl	800e6ba <__retarget_lock_init_recursive>
 800e62c:	f7ff ff96 	bl	800e55c <__sfp_lock_release>
 800e630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e638:	6025      	str	r5, [r4, #0]
 800e63a:	61a5      	str	r5, [r4, #24]
 800e63c:	2208      	movs	r2, #8
 800e63e:	4629      	mov	r1, r5
 800e640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e644:	f7fb fd4a 	bl	800a0dc <memset>
 800e648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e64c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e650:	4620      	mov	r0, r4
 800e652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e654:	3468      	adds	r4, #104	; 0x68
 800e656:	e7d9      	b.n	800e60c <__sfp+0x1c>
 800e658:	2104      	movs	r1, #4
 800e65a:	4638      	mov	r0, r7
 800e65c:	f7ff ff62 	bl	800e524 <__sfmoreglue>
 800e660:	4604      	mov	r4, r0
 800e662:	6030      	str	r0, [r6, #0]
 800e664:	2800      	cmp	r0, #0
 800e666:	d1d5      	bne.n	800e614 <__sfp+0x24>
 800e668:	f7ff ff78 	bl	800e55c <__sfp_lock_release>
 800e66c:	230c      	movs	r3, #12
 800e66e:	603b      	str	r3, [r7, #0]
 800e670:	e7ee      	b.n	800e650 <__sfp+0x60>
 800e672:	bf00      	nop
 800e674:	0800fef4 	.word	0x0800fef4
 800e678:	ffff0001 	.word	0xffff0001

0800e67c <_fwalk_reent>:
 800e67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e680:	4606      	mov	r6, r0
 800e682:	4688      	mov	r8, r1
 800e684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e688:	2700      	movs	r7, #0
 800e68a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e68e:	f1b9 0901 	subs.w	r9, r9, #1
 800e692:	d505      	bpl.n	800e6a0 <_fwalk_reent+0x24>
 800e694:	6824      	ldr	r4, [r4, #0]
 800e696:	2c00      	cmp	r4, #0
 800e698:	d1f7      	bne.n	800e68a <_fwalk_reent+0xe>
 800e69a:	4638      	mov	r0, r7
 800e69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a0:	89ab      	ldrh	r3, [r5, #12]
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d907      	bls.n	800e6b6 <_fwalk_reent+0x3a>
 800e6a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	d003      	beq.n	800e6b6 <_fwalk_reent+0x3a>
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	47c0      	blx	r8
 800e6b4:	4307      	orrs	r7, r0
 800e6b6:	3568      	adds	r5, #104	; 0x68
 800e6b8:	e7e9      	b.n	800e68e <_fwalk_reent+0x12>

0800e6ba <__retarget_lock_init_recursive>:
 800e6ba:	4770      	bx	lr

0800e6bc <__retarget_lock_acquire_recursive>:
 800e6bc:	4770      	bx	lr

0800e6be <__retarget_lock_release_recursive>:
 800e6be:	4770      	bx	lr

0800e6c0 <__swhatbuf_r>:
 800e6c0:	b570      	push	{r4, r5, r6, lr}
 800e6c2:	460e      	mov	r6, r1
 800e6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c8:	2900      	cmp	r1, #0
 800e6ca:	b096      	sub	sp, #88	; 0x58
 800e6cc:	4614      	mov	r4, r2
 800e6ce:	461d      	mov	r5, r3
 800e6d0:	da08      	bge.n	800e6e4 <__swhatbuf_r+0x24>
 800e6d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	602a      	str	r2, [r5, #0]
 800e6da:	061a      	lsls	r2, r3, #24
 800e6dc:	d410      	bmi.n	800e700 <__swhatbuf_r+0x40>
 800e6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6e2:	e00e      	b.n	800e702 <__swhatbuf_r+0x42>
 800e6e4:	466a      	mov	r2, sp
 800e6e6:	f000 f903 	bl	800e8f0 <_fstat_r>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	dbf1      	blt.n	800e6d2 <__swhatbuf_r+0x12>
 800e6ee:	9a01      	ldr	r2, [sp, #4]
 800e6f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6f8:	425a      	negs	r2, r3
 800e6fa:	415a      	adcs	r2, r3
 800e6fc:	602a      	str	r2, [r5, #0]
 800e6fe:	e7ee      	b.n	800e6de <__swhatbuf_r+0x1e>
 800e700:	2340      	movs	r3, #64	; 0x40
 800e702:	2000      	movs	r0, #0
 800e704:	6023      	str	r3, [r4, #0]
 800e706:	b016      	add	sp, #88	; 0x58
 800e708:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e70c <__smakebuf_r>:
 800e70c:	898b      	ldrh	r3, [r1, #12]
 800e70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e710:	079d      	lsls	r5, r3, #30
 800e712:	4606      	mov	r6, r0
 800e714:	460c      	mov	r4, r1
 800e716:	d507      	bpl.n	800e728 <__smakebuf_r+0x1c>
 800e718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	2301      	movs	r3, #1
 800e722:	6163      	str	r3, [r4, #20]
 800e724:	b002      	add	sp, #8
 800e726:	bd70      	pop	{r4, r5, r6, pc}
 800e728:	ab01      	add	r3, sp, #4
 800e72a:	466a      	mov	r2, sp
 800e72c:	f7ff ffc8 	bl	800e6c0 <__swhatbuf_r>
 800e730:	9900      	ldr	r1, [sp, #0]
 800e732:	4605      	mov	r5, r0
 800e734:	4630      	mov	r0, r6
 800e736:	f7ff f973 	bl	800da20 <_malloc_r>
 800e73a:	b948      	cbnz	r0, 800e750 <__smakebuf_r+0x44>
 800e73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e740:	059a      	lsls	r2, r3, #22
 800e742:	d4ef      	bmi.n	800e724 <__smakebuf_r+0x18>
 800e744:	f023 0303 	bic.w	r3, r3, #3
 800e748:	f043 0302 	orr.w	r3, r3, #2
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	e7e3      	b.n	800e718 <__smakebuf_r+0xc>
 800e750:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <__smakebuf_r+0x7c>)
 800e752:	62b3      	str	r3, [r6, #40]	; 0x28
 800e754:	89a3      	ldrh	r3, [r4, #12]
 800e756:	6020      	str	r0, [r4, #0]
 800e758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	9b00      	ldr	r3, [sp, #0]
 800e760:	6163      	str	r3, [r4, #20]
 800e762:	9b01      	ldr	r3, [sp, #4]
 800e764:	6120      	str	r0, [r4, #16]
 800e766:	b15b      	cbz	r3, 800e780 <__smakebuf_r+0x74>
 800e768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e76c:	4630      	mov	r0, r6
 800e76e:	f000 f8d1 	bl	800e914 <_isatty_r>
 800e772:	b128      	cbz	r0, 800e780 <__smakebuf_r+0x74>
 800e774:	89a3      	ldrh	r3, [r4, #12]
 800e776:	f023 0303 	bic.w	r3, r3, #3
 800e77a:	f043 0301 	orr.w	r3, r3, #1
 800e77e:	81a3      	strh	r3, [r4, #12]
 800e780:	89a0      	ldrh	r0, [r4, #12]
 800e782:	4305      	orrs	r5, r0
 800e784:	81a5      	strh	r5, [r4, #12]
 800e786:	e7cd      	b.n	800e724 <__smakebuf_r+0x18>
 800e788:	0800e519 	.word	0x0800e519

0800e78c <_malloc_usable_size_r>:
 800e78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e790:	1f18      	subs	r0, r3, #4
 800e792:	2b00      	cmp	r3, #0
 800e794:	bfbc      	itt	lt
 800e796:	580b      	ldrlt	r3, [r1, r0]
 800e798:	18c0      	addlt	r0, r0, r3
 800e79a:	4770      	bx	lr

0800e79c <_raise_r>:
 800e79c:	291f      	cmp	r1, #31
 800e79e:	b538      	push	{r3, r4, r5, lr}
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	d904      	bls.n	800e7b0 <_raise_r+0x14>
 800e7a6:	2316      	movs	r3, #22
 800e7a8:	6003      	str	r3, [r0, #0]
 800e7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e7b2:	b112      	cbz	r2, 800e7ba <_raise_r+0x1e>
 800e7b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7b8:	b94b      	cbnz	r3, 800e7ce <_raise_r+0x32>
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 f830 	bl	800e820 <_getpid_r>
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	4601      	mov	r1, r0
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7ca:	f000 b817 	b.w	800e7fc <_kill_r>
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d00a      	beq.n	800e7e8 <_raise_r+0x4c>
 800e7d2:	1c59      	adds	r1, r3, #1
 800e7d4:	d103      	bne.n	800e7de <_raise_r+0x42>
 800e7d6:	2316      	movs	r3, #22
 800e7d8:	6003      	str	r3, [r0, #0]
 800e7da:	2001      	movs	r0, #1
 800e7dc:	e7e7      	b.n	800e7ae <_raise_r+0x12>
 800e7de:	2400      	movs	r4, #0
 800e7e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	4798      	blx	r3
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e7e0      	b.n	800e7ae <_raise_r+0x12>

0800e7ec <raise>:
 800e7ec:	4b02      	ldr	r3, [pc, #8]	; (800e7f8 <raise+0xc>)
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	f7ff bfd3 	b.w	800e79c <_raise_r>
 800e7f6:	bf00      	nop
 800e7f8:	2000010c 	.word	0x2000010c

0800e7fc <_kill_r>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	4d07      	ldr	r5, [pc, #28]	; (800e81c <_kill_r+0x20>)
 800e800:	2300      	movs	r3, #0
 800e802:	4604      	mov	r4, r0
 800e804:	4608      	mov	r0, r1
 800e806:	4611      	mov	r1, r2
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	f7f3 fc49 	bl	80020a0 <_kill>
 800e80e:	1c43      	adds	r3, r0, #1
 800e810:	d102      	bne.n	800e818 <_kill_r+0x1c>
 800e812:	682b      	ldr	r3, [r5, #0]
 800e814:	b103      	cbz	r3, 800e818 <_kill_r+0x1c>
 800e816:	6023      	str	r3, [r4, #0]
 800e818:	bd38      	pop	{r3, r4, r5, pc}
 800e81a:	bf00      	nop
 800e81c:	20002474 	.word	0x20002474

0800e820 <_getpid_r>:
 800e820:	f7f3 bc36 	b.w	8002090 <_getpid>

0800e824 <__sread>:
 800e824:	b510      	push	{r4, lr}
 800e826:	460c      	mov	r4, r1
 800e828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e82c:	f000 f894 	bl	800e958 <_read_r>
 800e830:	2800      	cmp	r0, #0
 800e832:	bfab      	itete	ge
 800e834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e836:	89a3      	ldrhlt	r3, [r4, #12]
 800e838:	181b      	addge	r3, r3, r0
 800e83a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e83e:	bfac      	ite	ge
 800e840:	6563      	strge	r3, [r4, #84]	; 0x54
 800e842:	81a3      	strhlt	r3, [r4, #12]
 800e844:	bd10      	pop	{r4, pc}

0800e846 <__swrite>:
 800e846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e84a:	461f      	mov	r7, r3
 800e84c:	898b      	ldrh	r3, [r1, #12]
 800e84e:	05db      	lsls	r3, r3, #23
 800e850:	4605      	mov	r5, r0
 800e852:	460c      	mov	r4, r1
 800e854:	4616      	mov	r6, r2
 800e856:	d505      	bpl.n	800e864 <__swrite+0x1e>
 800e858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e85c:	2302      	movs	r3, #2
 800e85e:	2200      	movs	r2, #0
 800e860:	f000 f868 	bl	800e934 <_lseek_r>
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e86a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	4628      	mov	r0, r5
 800e876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e87a:	f000 b817 	b.w	800e8ac <_write_r>

0800e87e <__sseek>:
 800e87e:	b510      	push	{r4, lr}
 800e880:	460c      	mov	r4, r1
 800e882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e886:	f000 f855 	bl	800e934 <_lseek_r>
 800e88a:	1c43      	adds	r3, r0, #1
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	bf15      	itete	ne
 800e890:	6560      	strne	r0, [r4, #84]	; 0x54
 800e892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e89a:	81a3      	strheq	r3, [r4, #12]
 800e89c:	bf18      	it	ne
 800e89e:	81a3      	strhne	r3, [r4, #12]
 800e8a0:	bd10      	pop	{r4, pc}

0800e8a2 <__sclose>:
 800e8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a6:	f000 b813 	b.w	800e8d0 <_close_r>
	...

0800e8ac <_write_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d07      	ldr	r5, [pc, #28]	; (800e8cc <_write_r+0x20>)
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	4608      	mov	r0, r1
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	602a      	str	r2, [r5, #0]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	f7f3 fc27 	bl	800210e <_write>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d102      	bne.n	800e8ca <_write_r+0x1e>
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	b103      	cbz	r3, 800e8ca <_write_r+0x1e>
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	bd38      	pop	{r3, r4, r5, pc}
 800e8cc:	20002474 	.word	0x20002474

0800e8d0 <_close_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	; (800e8ec <_close_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f3 fc33 	bl	8002146 <_close>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_close_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_close_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	20002474 	.word	0x20002474

0800e8f0 <_fstat_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d07      	ldr	r5, [pc, #28]	; (800e910 <_fstat_r+0x20>)
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	4608      	mov	r0, r1
 800e8fa:	4611      	mov	r1, r2
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	f7f3 fc2e 	bl	800215e <_fstat>
 800e902:	1c43      	adds	r3, r0, #1
 800e904:	d102      	bne.n	800e90c <_fstat_r+0x1c>
 800e906:	682b      	ldr	r3, [r5, #0]
 800e908:	b103      	cbz	r3, 800e90c <_fstat_r+0x1c>
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	bd38      	pop	{r3, r4, r5, pc}
 800e90e:	bf00      	nop
 800e910:	20002474 	.word	0x20002474

0800e914 <_isatty_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4d06      	ldr	r5, [pc, #24]	; (800e930 <_isatty_r+0x1c>)
 800e918:	2300      	movs	r3, #0
 800e91a:	4604      	mov	r4, r0
 800e91c:	4608      	mov	r0, r1
 800e91e:	602b      	str	r3, [r5, #0]
 800e920:	f7f3 fc2d 	bl	800217e <_isatty>
 800e924:	1c43      	adds	r3, r0, #1
 800e926:	d102      	bne.n	800e92e <_isatty_r+0x1a>
 800e928:	682b      	ldr	r3, [r5, #0]
 800e92a:	b103      	cbz	r3, 800e92e <_isatty_r+0x1a>
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	bd38      	pop	{r3, r4, r5, pc}
 800e930:	20002474 	.word	0x20002474

0800e934 <_lseek_r>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4d07      	ldr	r5, [pc, #28]	; (800e954 <_lseek_r+0x20>)
 800e938:	4604      	mov	r4, r0
 800e93a:	4608      	mov	r0, r1
 800e93c:	4611      	mov	r1, r2
 800e93e:	2200      	movs	r2, #0
 800e940:	602a      	str	r2, [r5, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	f7f3 fc26 	bl	8002194 <_lseek>
 800e948:	1c43      	adds	r3, r0, #1
 800e94a:	d102      	bne.n	800e952 <_lseek_r+0x1e>
 800e94c:	682b      	ldr	r3, [r5, #0]
 800e94e:	b103      	cbz	r3, 800e952 <_lseek_r+0x1e>
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	bd38      	pop	{r3, r4, r5, pc}
 800e954:	20002474 	.word	0x20002474

0800e958 <_read_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	4d07      	ldr	r5, [pc, #28]	; (800e978 <_read_r+0x20>)
 800e95c:	4604      	mov	r4, r0
 800e95e:	4608      	mov	r0, r1
 800e960:	4611      	mov	r1, r2
 800e962:	2200      	movs	r2, #0
 800e964:	602a      	str	r2, [r5, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	f7f3 fbb4 	bl	80020d4 <_read>
 800e96c:	1c43      	adds	r3, r0, #1
 800e96e:	d102      	bne.n	800e976 <_read_r+0x1e>
 800e970:	682b      	ldr	r3, [r5, #0]
 800e972:	b103      	cbz	r3, 800e976 <_read_r+0x1e>
 800e974:	6023      	str	r3, [r4, #0]
 800e976:	bd38      	pop	{r3, r4, r5, pc}
 800e978:	20002474 	.word	0x20002474

0800e97c <_init>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	bf00      	nop
 800e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e982:	bc08      	pop	{r3}
 800e984:	469e      	mov	lr, r3
 800e986:	4770      	bx	lr

0800e988 <_fini>:
 800e988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98a:	bf00      	nop
 800e98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e98e:	bc08      	pop	{r3}
 800e990:	469e      	mov	lr, r3
 800e992:	4770      	bx	lr
